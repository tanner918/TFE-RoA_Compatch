cb_gothic_wars = {
	group = event

	allowed_for_character = {
	}

	allowed_against_character = {
		scope:attacker = {
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
			}
		}
	}

	
	target_titles = neighbor_land
	target_title_tier = county
	ignore_effect = change_title_holder
	should_show_war_goal_subview = yes
	combine_into_one = yes
	ai_only_against_neighbors = yes
	mutually_exclusive_titles = { always = yes }

	valid_to_start = {
		always = no
	}

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier = tier_county
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}
			}
		}
	}

	on_invalidated_desc = msg_religious_war_invalidation_region_message

	on_invalidated = {
	}

	cost = {
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = gothic_wars_victory_desc_attacker
			}
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = gothic_wars_victory_desc_defender
			}
			desc = gothic_wars_victory_desc
		}
	}

	on_victory = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:defender = {
			pay_long_term_gold = {
				target = scope:attacker
				gold = grand_raid_gold
			}
			add_prestige = -1000
		}
		scope:attacker = {
			add_prestige = grand_raid_gold
			dynasty = {
				add_dynasty_prestige = 300
			}
			trigger_event = {
				id = gothic_wars.0002
				days = 1
			}
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = gothic_wars_white_peace_desc_attacker
			}
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = gothic_wars_white_peace_desc_defender
			}
			desc = gothic_wars_white_peace_desc
		}
	}

	on_white_peace = {
        #EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }
		scope:attacker = {
		add_prestige = {
			value = minor_prestige_value
			multiply = -1.0
		}
		stress_impact = {
			ambitious = medium_stress_impact_gain
			arrogant = medium_stress_impact_gain
		}
		}
		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		scope:defender = {
			remove_variable = realm_size
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}

		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = gothic_wars_defeat_desc_attacker
			}
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = gothic_wars_defeat_desc_defender
			}
			desc = gothic_wars_defeat_desc
		}
	}

	on_defeat = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			save_temporary_scope_as = loser
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 5
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			remove_variable = realm_size
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_attacker_defeat_effect = yes
		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	attacker_score_from_battles_scale = 200                # War Score from battles won by the Attacker is modified by this value
    defender_score_from_battles_scale = 200                # War Score from battles won by the Defender is modified by this value
    max_attacker_score_from_battles = 100                # How much War Score the Attacker can gain from battles in total
    max_defender_score_from_battles = 100                # How much War Score the Defender can gain from battles in total

	max_defender_score_from_occupation = 50
	full_occupation_by_defender_gives_victory = no

	war_name = GOTHIC_WARS_NAME
	war_name_base = GRAND_RAID_WAR_NAME_BASE
	cb_name = GRAND_RAID_CB

	interface_priority = 100
}
radagaisus_invasion_cb = {
	group = event

	allowed_for_character = {
	}

	allowed_against_character = {
		scope:attacker = {
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
			}
		}
	}

	combine_into_one = yes

	target_titles = none
	target_title_tier = all
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder
	ai_only_against_neighbors = yes
	defender_ticking_warscore_delay = { years = 2 }

	white_peace_possible = no

	valid_to_start = {
		always = no
	}

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier = tier_county
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}
			}
		}
	}

	on_invalidated_desc = msg_religious_war_invalidation_region_message

	on_invalidated = {
	}

	cost = {
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = radagaisus_invasion_victory_desc_attacker
			}
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = radagaisus_invasion_victory_desc_defender
			}
			desc = radagaisus_invasion_victory_desc
		}
	}

	on_victory = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:defender = {
			trigger_event = {
				id = gothic_wars.0014
				days = 1
			}
		}

		create_title_and_vassal_change = {
			type = conquest_holy_war
			save_scope_as = change
			add_claim_on_loss = yes
		}
		# go through the dejure hierarchy under target titles, transfer titles with same or worse tolerance holders (their religion equaly or less tolerated than the defender's),
		# take the holder as vassal otherwise and don't go deeper
		every_in_list = {
			list = target_titles
			custom_tooltip = RELIGIOUS_CB_TITLE

			conquest_cb_title_transfer = {
				RELIGIOUS_WAR = yes
			}
		}

		every_in_list = {
			list = vassals_taken
			change_liege = {
				liege = scope:attacker
				change = scope:change
			}
		}
		
		every_in_list = {
			list = titles_taken
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = yes
			}
		}

		resolve_title_and_vassal_change = scope:change

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable)
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = radagaisus_invasion_white_peace_desc_attacker
			}
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = radagaisus_invasion_white_peace_desc_defender
			}
			desc = radagaisus_invasion_white_peace_desc
		}
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = radagaisus_invasion_defeat_desc_attacker
			}
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = radagaisus_invasion_defeat_desc_defender
			}
			desc = radagaisus_invasion_defeat_desc
		}
	}

	on_defeat = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }

		if = {
			limit = {
				exists = title:k_visigoths.holder
			}
			goths_flee_effect = yes
		}

		# Prestige loss for the attacker
		scope:attacker = {
			save_temporary_scope_as = loser
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 5
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		lost_radagaisus_invasion_effect = yes

		add_truce_attacker_defeat_effect = yes
		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = RADAGAISUS_INVASION_NAME
	war_name_base = RADAGAISUS_INVASION_NAME_BASE
	cb_name = RADAGAISUS_INVASION_CB_NAME

	use_de_jure_wargoal_only = yes
	
	interface_priority = 100
}

#Foederati Pillage and Plunder the Romans
cb_feoderati_raid = {
	group = conquest

	allowed_for_character = {
		is_germanic_foederati_culture = yes
		OR = {
			top_liege = title:e_byzantium.holder
			top_liege = title:e_western_roman_empire.holder
			top_liege = title:e_roman_empire.holder
		}
	}

	allowed_against_character = {
		scope:attacker = {
				top_liege = scope:defender.top_liege
				#NOT = { liege = scope:defender }
		}
	}

	
	target_titles = all
	target_title_tier = county
	ignore_effect = change_title_holder
	should_show_war_goal_subview = yes
	combine_into_one = yes
	ai_only_against_neighbors = yes
	mutually_exclusive_titles = { always = yes }

	valid_to_start = {
		#always = no
	}


	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier = tier_county
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}
			}
		}
	}

	on_invalidated_desc = msg_religious_war_invalidation_region_message

	on_invalidated = {
	}

	cost = {
		prestige = {
			add = {
				value = 250
				desc = CB_BASE_COST
			}
			multiply = common_cb_piety_cost_multiplier
		}
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = gothic_wars_victory_desc_attacker
			}
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = gothic_wars_defeat_desc_defender
			}
			desc = foederati_raid_victory_desc
		}
	}

	on_victory = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		add_truce_attacker_victory_effect = yes
		scope:defender = {
			pay_long_term_gold = {
				target = scope:attacker
				gold = foederati_plunder
			}
			add_prestige = -500
		}
		scope:attacker = {
			add_prestige = foederati_plunder
			dynasty = {
				add_dynasty_prestige = 50
			}
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = gothic_wars_white_peace_desc_attacker
			}
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = gothic_wars_white_peace_desc_defender
			}
			desc = gothic_wars_white_peace_desc
		}
	}

	on_white_peace = {
        #EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }
		scope:attacker ={
		add_prestige = {
			value = minor_prestige_value
			multiply = -1.0
		}
		stress_impact = {
			ambitious = medium_stress_impact_gain
			arrogant = medium_stress_impact_gain
		}
		}
		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		scope:defender = {
			remove_variable = realm_size
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}

		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = gothic_wars_defeat_desc_attacker
			}
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = gothic_wars_victory_desc_defender
			}
			desc = foederati_raid_defeat_desc
		}
	}

	on_defeat = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			save_temporary_scope_as = loser
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 5
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			remove_variable = realm_size
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_attacker_defeat_effect = yes
		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = FOEDERATI_WARS_NAME
	war_name_base = GRAND_RAID_WAR_NAME_BASE
	cb_name = GRAND_RAID_CB

	interface_priority = 100
}

claim_britannia_cb = {
	group = event
	mutually_exclusive_titles = {
		NOT = {
			# If pushing personal claims, you can press multiple claims with the Divine Right innovation (High Medieval Era).
			trigger_if = {
				limit = {
					scope:attacker = scope:claimant
				}
				scope:attacker = {
					culture = {
						has_innovation = innovation_divine_right
					}
				}
			}
			# If pushing claims for someone else, you need the Rightful Ownership innovation to press multiple claims (Late Medieval Era).
			trigger_else = {
				scope:attacker = {
					culture = {
						has_innovation = innovation_rightful_ownership
					}
				}
			}
		}
	}

	# This whole section was already commented out, I just commented it out more to prevent console errors -h
	#allowed_for_character = {}

	# allowed_against_character = {
	# 	faith.religion = scope:attacker.faith.religion
	# }

	# Root is the title
	# scope:claimant is the claimant
	# scope:attacker is the attacker
	# scope:defender is the defender
	is_allowed_claim_title = {
		custom_description = {
			text = "claimant_titles_held_by_you_or_vassal"
			NOR = {
				holder = scope:attacker
				holder = {
					target_is_liege_or_above = scope:attacker
				}
			}
		}
		scope:claimant = {
			NOT = { has_trait = incapable }
			trigger_if = {
				limit = { NOT = { scope:claimant = scope:attacker } } # You can always press your own claims
				is_imprisoned = no
			}
			#religion = scope:attacker.religion
			# claimant must not be at war against defender for this claim already
			custom_description = {
				text = "claimant_already_pressing_their_claim"
				object = root
				NAND = {
					liege = scope:attacker
					any_character_war = {
						casus_belli = {
							any_target_title = {
								this = root
							}
						}
					}
				}
			}
		}
		scope:attacker = {
			#Cannot press claims against your own vassals, as these must be revoked.
			custom_description = {
				text = "claimant_titles_held_by_attacker_vassals"
				NOT = {
					any_vassal_or_below = {
						has_title = root
					}
				}
			}
		}
		trigger_if = {
			limit = {
				NOT = { scope:claimant = scope:attacker } # You can always press your own claims (though the prestige cost might be high)
			}
			trigger_if = {
				limit = {
					is_weak_claimant_due_to_gender_trigger = { FAITH = scope:attacker.faith CHARACTER = scope:claimant }
				}
				trigger_if = {
					limit = {
						scope:claimant = { is_adult = yes }
					}
					save_temporary_scope_as = treat_claim_as_weak
				}
				trigger_else = {
					always = no
				}
			}
			trigger_else_if = {
				limit = {
					scope:claimant = { is_adult = no }
				}
				save_temporary_scope_as = treat_claim_as_weak
			}
			# making the default behavior explicit if no other trigger_(else_)ifs are valid
			trigger_else = {
				always = yes
			}
		}
		trigger_if = {
			limit = { exists = scope:treat_claim_as_weak }
			holder = {
				custom_description = {
					text = "claim_target_position_is_weak"
					object = scope:attacker
					OR = {
						has_trait = incapable
						is_adult = no
						is_weak_claimant_due_to_gender_trigger = { FAITH = scope:attacker.faith CHARACTER = root.holder }
					}
				}
			}
		}
		#Under Byzantine law, a ruler must be unblemished
		trigger_if = {
			limit = {
				scope:defender.culture = { has_cultural_parameter = physical_disfigurement_blocks_inheritance }
			}
			scope:claimant = {
				custom_description = {
					text = "byzantine_claimant_is_disfigured"
					object = scope:claimant
					NOR = {
						has_trait = incapable
						has_trait = blind
						has_trait = disfigured
						is_eunuch_trigger = yes
						has_trait = maimed
						has_trait = one_eyed
						has_trait = one_legged
						has_trait = clubfooted
						has_trait = hunchbacked
						has_trait = dwarf
					}
				}
			}
		}
		#Under Byzantine law, a ruler must be able to produce children.
		trigger_if = {
			limit = {
				scope:defender.culture = { has_cultural_parameter = physical_disfigurement_blocks_inheritance }
			}
			scope:claimant = {
				custom_description = {
					text = "byzantine_claimant_is_celibate"
					object = scope:claimant
					NOR = {
						is_eunuch_trigger = yes
						has_trait = devoted
						has_trait = celibate
					}
				}
			}
		}
	}

	cost = {
		piety = {
			value = 0
			add = common_cb_impious_piety_cost
		}
		prestige = {
			value = 0
			add = claim_cb_prestige_cost
			multiply = common_cb_prestige_cost_multiplier

			if = {
				limit = {
					scope:attacker = {
						has_character_flag = temp_no_claim_war_cost
					}
				}
				multiply = {
					value = 0
					desc = "not_imprisoned_filter" # Says 'free'
				}
			}

		}
	}

	target_titles = claim
	#target_title_tier = all

	on_declaration = {
		on_declared_war = yes
		if = {
			limit = {
				scope:defender = { is_sibling_of = scope:attacker }
			}
			scope:attacker = {
				add_achievement_flag_effect = { FLAG = achievement_bad_blood_flag }
			}
		}
		title:k_britannia.holder = {
			every_vassal = {
				limit = {
					NOT = {
						THIS = scope:attacker
					}
				}
				trigger_event = briton.0009
			}
		}
		if = {
			limit = {
				NOT = {
					title:k_britannia.holder = title:e_western_roman_empire.holder
				}
			}
			title:k_britannia.holder = {
				trigger_event = briton.0010
			}
		}
		title:e_western_roman_empire.holder = {
			trigger_event = briton.0010
		}
	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier >= tier_county
						exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
			AND = { 
				NOT = { scope:claimant = scope:attacker } 
				scope:claimant = {
					OR = {
						is_alive = no 
						NOR = { 
							is_vassal_or_below_of = scope:attacker 
							is_courtier_of = scope:attacker 
						}
					}
				}
			} 
		}
	}

	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = { scope:claimant = scope:attacker } 
					scope:claimant = { is_alive = no }
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_dead_message
			}
			triggered_desc = {
				trigger = {
					scope:claimant = {
						NOR = { 
							this = scope:attacker 
							NOR = { 
								is_vassal_or_below_of = scope:attacker 
								is_courtier_of = scope:attacker 
							}
						}
					}
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_not_vassal_message
			}
			desc = msg_claim_war_invalidated_message
		}
	}
	
	on_invalidated = {
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:claimant = { is_local_player = yes }
				}
				desc = claim_cb_victory_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_victory_desc_attacker
			}
			desc = claim_cb_victory_desc
		}
	}

	on_victory = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = conquest_claim
			save_scope_as = change
			add_claim_on_loss = yes
		}
		# Create a claim CB which is executed to handle title/vassal changes, in addition to being used to calculate Prestige awards for war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			change = scope:change
		}

		resolve_title_and_vassal_change = scope:change

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant.primary_title.tier < scope:attacker.primary_title.tier
				scope:claimant = {
					NOT = { target_is_liege_or_above = scope:attacker }
				}
			}

			create_title_and_vassal_change = {
				type = conquest_claim
				save_scope_as = change_two
				add_claim_on_loss = yes
			}
			scope:claimant = {
				change_liege = {
					liege = scope:attacker
					change = scope:change_two
				}
			}
			resolve_title_and_vassal_change = scope:change_two
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}
		scope:attacker = {
			change_government = autocratic_government
			every_vassal = {
				limit = {
					government_has_flag = government_is_imperial
					government_has_flag = government_is_administrative
				}
				change_government = autocratic_government
			}
			add_unpressed_claim = scope:defender.primary_title
			create_title_and_vassal_change = {
				type = independency
				save_scope_as = change
				add_claim_on_loss = no
			}
			becomes_independent = { change = scope:change }
			resolve_title_and_vassal_change = scope:change
			trigger_event = {
				on_action = usurp_war_trigger
				days = 1
			}
		}
		scope:defender = {
			add_unpressed_claim = title:k_britannia
		}

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_white_peace_desc_defender
			}
			desc = claim_cb_white_peace_desc
		}
		
	}

	on_white_peace = {
        #EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# press claims
		every_in_list = {
			list = target_titles
			if = {
				limit = { scope:claimant = { has_weak_claim_on = prev } }
				scope:claimant = {
					make_claim_strong = prev
				}
			}
		}
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_claim_cb'
				multiply = -5.0
			}
		}
		# Defender neither gains nor loses any prestige.
		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:claimant = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker
			}
			desc = claim_cb_defeat_desc
		}
		
	}

	on_defeat = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Attacker pays gold to the defender as reparations.
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CLAIM_WAR_NAME"
	my_war_name = "CLAIM_WAR_NAME_MY"
	war_name_base = "CLAIM_WAR_NAME_BASE"
	cb_name = "CLAIM_CB_NAME"
	interface_priority = 60

	should_show_war_goal_subview = yes

	attacker_wargoal_percentage = 0.8

	max_ai_diplo_distance_to_title = 1000
}
usurper_WRE_cb = {
	group = event

	on_declaration = {
		on_declared_war = yes
	}

	should_invalidate = {
		always = no
	}

	on_invalidated_desc = msg_religious_war_invalidation_region_message
	
	
	on_invalidated = {
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# Defender neither gains nor loses any prestige.
		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		scope:attacker = {
			change_government = imperial_government
			every_vassal = {
				limit = {
					government_has_flag = government_is_autocratic
				}
				change_government = imperial_government
			}
			create_title_and_vassal_change = {
				type = swear_fealty
				save_scope_as = change
				add_claim_on_loss = yes
			}
			change_liege = {
				liege = scope:defender
				change = scope:change
			}
			resolve_title_and_vassal_change = scope:change
		}
		scope:defender = {
			appoint_court_position = { recipient = scope:attacker court_position = succ_exp_co_emperor_court_position }
		}
		# Truce
		add_truce_white_peace_effect = yes
	}

	on_victory_desc = {
		first_valid = {
			desc = usurper_wars_victory_desc
		}
	}

	on_victory = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = usurped
			save_scope_as = change
			add_claim_on_loss = yes
		}
		# Create a claim CB which is executed to handle title/vassal changes, in addition to being used to calculate Prestige awards for war participants.
		scope:defender.primary_title = {
			change_title_holder_include_vassals = {
				holder = scope:attacker
				change = scope:change
				take_baronies = yes
			}
		}

		resolve_title_and_vassal_change = scope:change


		scope:attacker = {
			change_government = imperial_government
		}
		scope:defender = {
			add_unpressed_claim = title:e_western_roman_empire
		}
	}

	on_white_peace_desc = {
		first_valid = {
			desc = usurper_wars_white_peace_desc
		}
		
	}

	on_white_peace = {
        #EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# Defender neither gains nor loses any prestige.
		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		scope:attacker = {
			change_government = imperial_government
			every_vassal = {
				change_government = imperial_government
			}
			create_title_and_vassal_change = {
				type = swear_fealty
				save_scope_as = change
				add_claim_on_loss = yes
			}
			change_liege = {
				liege = scope:defender
				change = scope:change
			}
			resolve_title_and_vassal_change = scope:change
		}
		scope:defender = {
			appoint_court_position = { recipient = scope:attacker court_position = succ_exp_co_emperor_court_position }
		}
		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			desc = usurper_wars_defeat_desc
		}
		
	}

	on_defeat = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }


		# Attacker pays gold to the defender as reparations.
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
			change_government = imperial_government
			create_title_and_vassal_change = {
				type = swear_fealty
				save_scope_as = change
				add_claim_on_loss = yes
			}
			change_liege = {
				liege = scope:defender
				change = scope:change
			}
			resolve_title_and_vassal_change = scope:change
			if = {
				limit = {
					has_claim_on = title:e_western_roman_empire
				}
				remove_claim = title:e_western_roman_empire
			}
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "USURPER_WAR_NAME"
	war_name_base = "USURPER_WAR_NAME_BASE"
	cb_name = "USURPER_CB_NAME"
	interface_priority = 60

	should_show_war_goal_subview = yes

	attacker_wargoal_percentage = 0.8

	max_ai_diplo_distance_to_title = 1000
}

invasion_of_soissons_cb ={
	group = event
	
	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	white_peace_possible = no 

	target_titles = all
	target_title_tier = kingdom
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier = tier_county
					holder = {
						target_is_same_character_or_above = scope:defender
					}
				}
			}
		}
	}

	on_invalidated_desc = msg_invasion_war_invalidated_message
	
	on_invalidated = {
		scope:attacker = {
			if = {
				limit = {
					is_alive = yes
				}
				remove_character_flag = used_lifetime_invasion # If the war is invalidated, you should be permitted to try again
			}
		}
	}

	
	on_declaration = {
		on_declared_war = yes
		every_ruler = {
			limit = {
				culture = scope:attacker.culture
				NOT = {
					THIS = scope:attacker
				}
				is_landed = yes
			}
			trigger_event = germanic_events.0004
		}
	}	

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = invasion_war_victory_desc_attacker
			}
			desc = invasion_war_victory_desc
		}
	}

	#This is necessary for error log -- this should never happen
	on_white_peace_desc = {
		desc = invasion_war_victory_desc
	}
	
	on_victory = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }
		
		scope:war = {
			scope:defender.primary_title = {
				create_title_and_vassal_change = {
					type = conquest
					save_scope_as = change
					add_claim_on_loss = yes
				}
				change_title_holder = {
					holder = scope:attacker
					change = scope:change
				}
				resolve_title_and_vassal_change = scope:change
			}
		}		
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		
		setup_invasion_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			change = scope:change
			take_occupied = yes
		}
		resolve_title_and_vassal_change = scope:change

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_invasion_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		
		scope:war = {
			every_war_attacker = {
				limit = {
					NOT = {
						THIS = scope:attacker
					}
				}
				create_title_and_vassal_change = {
					type = conquest
					save_scope_as = change
					add_claim_on_loss = yes
				}
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
				resolve_title_and_vassal_change = scope:change
			}
		}
		scope:attacker = {
			change_government = feudal_government
			every_vassal_or_below = {
				limit = {
					OR = {
						government_has_flag = government_is_autocratic
						government_has_flag = government_is_autocratic_ep3
					}
				}
				change_government = feudal_government
			}
		}
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}
	
	on_defeat = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 5
			}
			add_prestige = {
				value = massive_prestige_value
				multiply = -1.0
			}
		}
		
		setup_invasion_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}

		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}
	
		add_truce_attacker_defeat_effect = yes
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}
	
	transfer_behavior = transfer
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "SOISSONS_INVASION_WAR_NAME"
	war_name_base = "SOISSONS_INVASION_WAR_NAME_BASE"
	cb_name = "SOISSONS_INVASION_CB_NAME"
	
	interface_priority = 100
	
	use_de_jure_wargoal_only = yes
	
	attacker_wargoal_percentage = 0.8
}

domination_over_gaul_cb ={
	group = event
	
	should_show_war_goal_subview = yes

	white_peace_possible = no 

	should_invalidate = {
		always = no
	}

	on_invalidated_desc = msg_invasion_war_invalidated_message
	
	on_invalidated = {
		
	}

	
	on_declaration = {
		on_declared_war = yes
		scope:attacker = {
			spawn_army = {
				name = FRANKISH_GLORYHOUNDS
				levies = 1000
				men_at_arms = {
					type = bowmen
					stacks = 3
				}
				men_at_arms = {
					type = light_horsemen
					stacks = 2
				}
				men_at_arms = {
					type = light_footmen
					stacks = 5
				}
				location = scope:attacker.capital_province
			}
		}
	}	

	#This is necessary for error log -- this should never happen
	on_white_peace_desc = {
		desc = invasion_war_victory_desc
	}

	on_victory_desc = {
		first_valid = {
			desc = domination_gaul_cb_victory_desc
		}
	}
	
	on_victory = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }
		
		
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		
		scope:defender = {
			every_vassal = {
				limit = {
					capital_county = {
						OR = {
							kingdom = title:k_france
							AND = {
								kingdom = title:k_aquitaine
								NOT = {
									duchy = title:d_languedoc
								}
							}
						}
					}
				}
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
			every_sub_realm_county = {
				limit = {
					holder = scope:defender
					OR = {
						kingdom = title:k_france
						AND = {
							kingdom = title:k_aquitaine
							NOT = {
								duchy = title:d_languedoc
							}
						}
					}
				}
				change_title_holder = {
					holder = scope:attacker
					change = scope:change
				}
			}
		}
		resolve_title_and_vassal_change = scope:change


		# Truce
		add_truce_attacker_victory_effect = yes

		
	}

	on_defeat_desc = {
		first_valid = {
			desc = domination_gaul_cb_defeat_desc
		}
	}
	
	on_defeat = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 5
			}
			add_prestige = {
				value = massive_prestige_value
				multiply = -1.0
			}
		}
		
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		
		scope:attacker = {
			every_vassal = {
				limit = {
					capital_county = {
						OR = {
							kingdom = title:k_france
							kingdom = title:k_aquitaine
						}
					}
				}
				change_liege = {
					liege = scope:defender
					change = scope:change
				}
			}
			every_sub_realm_county = {
				limit = {
					holder = scope:attacker
					OR = {
						kingdom = title:k_france
						kingdom = title:k_aquitaine
					}
				}
				change_title_holder = {
					holder = scope:defender
					change = scope:change
				}
			}
		}
		resolve_title_and_vassal_change = scope:change

	
		add_truce_attacker_defeat_effect = yes
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}
	
	transfer_behavior = transfer
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "GAUL_DOMINATION_WAR_NAME"
	war_name_base = "GAUL_DOMINATION_WAR_NAME_BASE"
	cb_name = "GAUL_DOMINATION_CB_NAME"
	
	interface_priority = 100
	
	
	attacker_wargoal_percentage = 0.8
}

italian_gothic_invasion_cb = {
	group = event
	# Root is the title
	# scope:claimant is the claimant
	# scope:attacker is the attacker
	# scope:defender is the defender
	is_allowed_claim_title = {
		custom_description = {
			text = "claimant_titles_held_by_you_or_vassal"
			NOR = {
				holder = scope:attacker
				holder = {
					target_is_liege_or_above = scope:attacker
				}
			}
		}
		scope:claimant = {
			NOT = { has_trait = incapable }
			trigger_if = {
				limit = { NOT = { scope:claimant = scope:attacker } } # You can always press your own claims
				is_imprisoned = no
			}
			#religion = scope:attacker.religion
			# claimant must not be at war against defender for this claim already
			custom_description = {
				text = "claimant_already_pressing_their_claim"
				object = root
				NAND = {
					liege = scope:attacker
					any_character_war = {
						casus_belli = {
							any_target_title = {
								this = root
							}
						}
					}
				}
			}
		}
		scope:attacker = {
			#Cannot press claims against your own vassals, as these must be revoked.
			custom_description = {
				text = "claimant_titles_held_by_attacker_vassals"
				NOT = {
					any_vassal_or_below = {
						has_title = root
					}
				}
			}
		}
		trigger_if = {
			limit = {
				NOT = { scope:claimant = scope:attacker } # You can always press your own claims (though the prestige cost might be high)
			}
			trigger_if = {
				limit = {
					is_weak_claimant_due_to_gender_trigger = { FAITH = scope:attacker.faith CHARACTER = scope:claimant }
				}
				trigger_if = {
					limit = {
						scope:claimant = { is_adult = yes }
					}
					save_temporary_scope_as = treat_claim_as_weak
				}
				trigger_else = {
					always = no
				}
			}
			trigger_else_if = {
				limit = {
					scope:claimant = { is_adult = no }
				}
				save_temporary_scope_as = treat_claim_as_weak
			}
			# making the default behavior explicit if no other trigger_(else_)ifs are valid
			trigger_else = {
				always = yes
			}
		}
		trigger_if = {
			limit = { exists = scope:treat_claim_as_weak }
			holder = {
				custom_description = {
					text = "claim_target_position_is_weak"
					object = scope:attacker
					OR = {
						has_trait = incapable
						is_adult = no
						is_weak_claimant_due_to_gender_trigger = { FAITH = scope:attacker.faith CHARACTER = root.holder }
					}
				}
			}
		}
		#Under Byzantine law, a ruler must be unblemished
		trigger_if = {
			limit = {
				scope:defender.culture = { has_cultural_parameter = physical_disfigurement_blocks_inheritance }
			}
			scope:claimant = {
				custom_description = {
					text = "byzantine_claimant_is_disfigured"
					object = scope:claimant
					NOR = {
						has_trait = incapable
						has_trait = blind
						has_trait = disfigured
						is_eunuch_trigger = yes
						has_trait = maimed
						has_trait = one_eyed
						has_trait = one_legged
						has_trait = clubfooted
						has_trait = hunchbacked
						has_trait = dwarf
					}
				}
			}
		}
		#Under Byzantine law, a ruler must be able to produce children.
		trigger_if = {
			limit = {
				scope:defender.culture = { has_cultural_parameter = physical_disfigurement_blocks_inheritance }
			}
			scope:claimant = {
				custom_description = {
					text = "byzantine_claimant_is_celibate"
					object = scope:claimant
					NOR = {
						is_eunuch_trigger = yes
						has_trait = devoted
						has_trait = celibate
					}
				}
			}
		}
	}


	target_titles = claim
	#target_title_tier = all

	on_declaration = {
		on_declared_war = yes
		if = {
			limit = {
				scope:defender = { is_sibling_of = scope:attacker }
			}
			scope:attacker = {
				add_achievement_flag_effect = { FLAG = achievement_bad_blood_flag }
			}
		}
	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier >= tier_county
						exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
			AND = { 
				NOT = { scope:claimant = scope:attacker } 
				scope:claimant = {
					OR = {
						is_alive = no 
						NOR = { 
							is_vassal_or_below_of = scope:attacker 
							is_courtier_of = scope:attacker 
						}
					}
				}
			} 
		}
	}

	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = { scope:claimant = scope:attacker } 
					scope:claimant = { is_alive = no }
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_dead_message
			}
			triggered_desc = {
				trigger = {
					scope:claimant = {
						NOR = { 
							this = scope:attacker 
							NOR = { 
								is_vassal_or_below_of = scope:attacker 
								is_courtier_of = scope:attacker 
							}
						}
					}
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_not_vassal_message
			}
			desc = msg_claim_war_invalidated_message
		}
	}
	
	on_invalidated = {
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:claimant = { is_local_player = yes }
				}
				desc = claim_cb_victory_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_victory_desc_attacker
			}
			desc = claim_cb_victory_desc
		}
	}

	on_victory = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = conquest_claim
			save_scope_as = change
			add_claim_on_loss = yes
		}
		# Create a claim CB which is executed to handle title/vassal changes, in addition to being used to calculate Prestige awards for war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			change = scope:change
		}

		resolve_title_and_vassal_change = scope:change

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant.primary_title.tier < scope:attacker.primary_title.tier
				scope:claimant = {
					NOT = { target_is_liege_or_above = scope:attacker }
				}
			}

			create_title_and_vassal_change = {
				type = conquest_claim
				save_scope_as = change_two
				add_claim_on_loss = yes
			}
			scope:claimant = {
				change_liege = {
					liege = scope:attacker
					change = scope:change_two
				}
			}
			resolve_title_and_vassal_change = scope:change_two
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		if = {
			limit = {
				scope:defender = {
					highest_held_title_tier >= tier_kingdom
				}
			}
			scope:defender = {
				every_held_title = {
					limit = {
						tier >= tier_kingdom
					}
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
				}
			}
		}
		resolve_title_and_vassal_change = scope:change
		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
		# Shift dejure under Italia to the Ostrogoths
		#title:k_italy = {
		#	every_in_de_jure_hierarchy = {
		#		limit = {
		#			tier = tier_duchy
		#		}
		#		set_de_jure_liege_title = scope:attacker.primary_title
		#	}
		#}
		
		if = {
			limit = {
				title:e_byzantium = {
					is_title_created = yes
				}
			}
			custom_tooltip = italian_invasion_trib_effect
			make_tributary = {
				TYPE = tributary_permanent
				TRIBUTARY = scope:attacker
				SUZERAIN = title:e_byzantium.holder
			}
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_white_peace_desc_defender
			}
			desc = claim_cb_white_peace_desc
		}
		
	}

	on_white_peace = {
        #EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# press claims
		every_in_list = {
			list = target_titles
			if = {
				limit = { scope:claimant = { has_weak_claim_on = prev } }
				scope:claimant = {
					make_claim_strong = prev
				}
			}
		}
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_claim_cb'
				multiply = -5.0
			}
		}
		# Defender neither gains nor loses any prestige.
		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:claimant = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker
			}
			desc = claim_cb_defeat_desc
		}
		
	}

	on_defeat = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Attacker pays gold to the defender as reparations.
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CLAIM_WAR_NAME"
	my_war_name = "CLAIM_WAR_NAME_MY"
	war_name_base = "CLAIM_WAR_NAME_BASE"
	cb_name = "CLAIM_CB_NAME"
	interface_priority = 60

	should_show_war_goal_subview = yes

	attacker_wargoal_percentage = 0.8

	max_ai_diplo_distance_to_title = 1000
}

italian_gothic_invasion_cb_theodoric = {
	group = event
	# Root is the title
	# scope:claimant is the claimant
	# scope:attacker is the attacker
	# scope:defender is the defender
	is_allowed_claim_title = {
		custom_description = {
			text = "claimant_titles_held_by_you_or_vassal"
			NOR = {
				holder = scope:attacker
				holder = {
					target_is_liege_or_above = scope:attacker
				}
			}
		}
		scope:claimant = {
			NOT = { has_trait = incapable }
			trigger_if = {
				limit = { NOT = { scope:claimant = scope:attacker } } # You can always press your own claims
				is_imprisoned = no
			}
			#religion = scope:attacker.religion
			# claimant must not be at war against defender for this claim already
			custom_description = {
				text = "claimant_already_pressing_their_claim"
				object = root
				NAND = {
					liege = scope:attacker
					any_character_war = {
						casus_belli = {
							any_target_title = {
								this = root
							}
						}
					}
				}
			}
		}
		scope:attacker = {
			#Cannot press claims against your own vassals, as these must be revoked.
			custom_description = {
				text = "claimant_titles_held_by_attacker_vassals"
				NOT = {
					any_vassal_or_below = {
						has_title = root
					}
				}
			}
		}
		trigger_if = {
			limit = {
				NOT = { scope:claimant = scope:attacker } # You can always press your own claims (though the prestige cost might be high)
			}
			trigger_if = {
				limit = {
					is_weak_claimant_due_to_gender_trigger = { FAITH = scope:attacker.faith CHARACTER = scope:claimant }
				}
				trigger_if = {
					limit = {
						scope:claimant = { is_adult = yes }
					}
					save_temporary_scope_as = treat_claim_as_weak
				}
				trigger_else = {
					always = no
				}
			}
			trigger_else_if = {
				limit = {
					scope:claimant = { is_adult = no }
				}
				save_temporary_scope_as = treat_claim_as_weak
			}
			# making the default behavior explicit if no other trigger_(else_)ifs are valid
			trigger_else = {
				always = yes
			}
		}
		trigger_if = {
			limit = { exists = scope:treat_claim_as_weak }
			holder = {
				custom_description = {
					text = "claim_target_position_is_weak"
					object = scope:attacker
					OR = {
						has_trait = incapable
						is_adult = no
						is_weak_claimant_due_to_gender_trigger = { FAITH = scope:attacker.faith CHARACTER = root.holder }
					}
				}
			}
		}
		#Under Byzantine law, a ruler must be unblemished
		trigger_if = {
			limit = {
				scope:defender.culture = { has_cultural_parameter = physical_disfigurement_blocks_inheritance }
			}
			scope:claimant = {
				custom_description = {
					text = "byzantine_claimant_is_disfigured"
					object = scope:claimant
					NOR = {
						has_trait = incapable
						has_trait = blind
						has_trait = disfigured
						is_eunuch_trigger = yes
						has_trait = maimed
						has_trait = one_eyed
						has_trait = one_legged
						has_trait = clubfooted
						has_trait = hunchbacked
						has_trait = dwarf
					}
				}
			}
		}
		#Under Byzantine law, a ruler must be able to produce children.
		trigger_if = {
			limit = {
				scope:defender.culture = { has_cultural_parameter = physical_disfigurement_blocks_inheritance }
			}
			scope:claimant = {
				custom_description = {
					text = "byzantine_claimant_is_celibate"
					object = scope:claimant
					NOR = {
						is_eunuch_trigger = yes
						has_trait = devoted
						has_trait = celibate
					}
				}
			}
		}
	}


	target_titles = claim
	#target_title_tier = all

	on_declaration = {
		on_declared_war = yes
		if = {
			limit = {
				scope:defender = { is_sibling_of = scope:attacker }
			}
			scope:attacker = {
				add_achievement_flag_effect = { FLAG = achievement_bad_blood_flag }
			}
		}
	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier >= tier_county
						exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
			AND = { 
				NOT = { scope:claimant = scope:attacker } 
				scope:claimant = {
					OR = {
						is_alive = no 
						NOR = { 
							is_vassal_or_below_of = scope:attacker 
							is_courtier_of = scope:attacker 
						}
					}
				}
			} 
		}
	}

	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = { scope:claimant = scope:attacker } 
					scope:claimant = { is_alive = no }
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_dead_message
			}
			triggered_desc = {
				trigger = {
					scope:claimant = {
						NOR = { 
							this = scope:attacker 
							NOR = { 
								is_vassal_or_below_of = scope:attacker 
								is_courtier_of = scope:attacker 
							}
						}
					}
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_not_vassal_message
			}
			desc = msg_claim_war_invalidated_message
		}
	}
	
	on_invalidated = {
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:claimant = { is_local_player = yes }
				}
				desc = claim_cb_victory_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_victory_desc_attacker
			}
			desc = claim_cb_victory_desc
		}
	}

	on_victory = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:attacker = {
			if = {
				limit = {
					title:e_byzantium = {
						is_title_created = yes
					}
				}
				custom_tooltip = italian_invasion_trib_effect
				trigger_event = {
					id = gothic_wars.0017
					days = 1
				}
			}
		}
		create_title_and_vassal_change = {
			type = independency 
			save_scope_as = change
		}
		scope:attacker = {
			becomes_independent = {
				change = scope:change
			}
		}
		resolve_title_and_vassal_change = scope:change

		create_title_and_vassal_change = {
			type = conquest_claim
			save_scope_as = change
			add_claim_on_loss = yes
		}
		# Create a claim CB which is executed to handle title/vassal changes, in addition to being used to calculate Prestige awards for war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			change = scope:change
		}

		resolve_title_and_vassal_change = scope:change

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant.primary_title.tier < scope:attacker.primary_title.tier
				scope:claimant = {
					NOT = { target_is_liege_or_above = scope:attacker }
				}
			}

			create_title_and_vassal_change = {
				type = conquest_claim
				save_scope_as = change_two
				add_claim_on_loss = yes
			}
			scope:claimant = {
				change_liege = {
					liege = scope:attacker
					change = scope:change_two
				}
			}
			resolve_title_and_vassal_change = scope:change_two
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}
		if = {
			limit = {
				scope:defender = {
					highest_held_title_tier >= tier_kingdom
				}
			}
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = changethree
				add_claim_on_loss = yes
			}
			scope:defender = {
				every_held_title = {
					limit = {
						tier >= tier_kingdom
					}
					change_title_holder_include_vassals = {
						holder = scope:attacker
						change = scope:changethree
					}
				}
			}
			resolve_title_and_vassal_change = scope:changethree
		}
		if = {
			limit = {
				scope:defender = {
					is_independent_ruler = yes
					is_landed = yes
				}
			}
			create_title_and_vassal_change = {
				type = swear_fealty
				save_scope_as = changev
				add_claim_on_loss = no
			}
			scope:defender = {
				change_liege = {
					liege = scope:attacker
					change = scope:changev
				}
			}
			resolve_title_and_vassal_change = scope:changev
		}
		resolve_title_and_vassal_change = scope:change
		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
		# Shift dejure under Italia to the Ostrogoths
		#title:k_italy = {
		#	every_in_de_jure_hierarchy = {
		#		limit = {
		#			tier = tier_duchy
		#		}
		#		set_de_jure_liege_title = scope:attacker.primary_title
		#	}
		#}
		scope:attacker = {
			every_realm_county = {
				limit = {
					tier = tier_county
					empire = { this = title:e_byzantium }
				}
				# Grab the county for ease of reference.
				save_temporary_scope_as = current_county
				# Create an elevated peasant to claim the county.
				create_character = {
					location = scope:current_county.title_province
					template = old_country_local_warlord_template
					save_temporary_scope_as = local_warlord
				}
				# Assign the seceding title to the new upstart.
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					scope:current_county = {
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
				if = {
					limit = {
						exists = title:e_byzantium.holder
					}
					# And give them their independence.
					create_title_and_vassal_change = {
						type = conquest
						save_scope_as = change
						add_claim_on_loss = no
					}
					hidden_effect = {
						scope:local_warlord = {
							#becomes_independent = { change = scope:change }
							change_liege = {
								liege = title:e_byzantium.holder
								change = scope:change
							}
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			if = {
				limit = {
					exists = title:e_byzantium.holder
				}
				every_vassal = {
					limit = {
						capital_county.empire = title:e_byzantium
					}
					create_title_and_vassal_change = {
						type = conquest
						save_scope_as = change
						add_claim_on_loss = no
					}
					hidden_effect = {
						change_liege = {
							liege = title:e_byzantium.holder
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
		}

	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_white_peace_desc_defender
			}
			desc = claim_cb_white_peace_desc
		}
		
	}

	on_white_peace = {
        #EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# press claims
		every_in_list = {
			list = target_titles
			if = {
				limit = { scope:claimant = { has_weak_claim_on = prev } }
				scope:claimant = {
					make_claim_strong = prev
				}
			}
		}
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_claim_cb'
				multiply = -5.0
			}
		}
		# Defender neither gains nor loses any prestige.
		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:claimant = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker
			}
			desc = claim_cb_defeat_desc
		}
		
	}

	on_defeat = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Attacker pays gold to the defender as reparations.
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CLAIM_WAR_NAME"
	my_war_name = "CLAIM_WAR_NAME_MY"
	war_name_base = "CLAIM_WAR_NAME_BASE"
	cb_name = "CLAIM_CB_NAME"
	interface_priority = 60

	should_show_war_goal_subview = yes

	attacker_wargoal_percentage = 0.8

	max_ai_diplo_distance_to_title = 1000
}

hephthalites_event_cb = {
	group = event
	white_peace_possible = no
	mutually_exclusive_titles = {
		always = yes
	}

	# This whole section was already commented out, I just commented it out more to prevent console errors -h
	#allowed_for_character = {}

	# allowed_against_character = {
	# 	faith.religion = scope:attacker.faith.religion
	# }

	# Root is the title
	# scope:claimant is the claimant
	# scope:attacker is the attacker
	# scope:defender is the defender
	is_allowed_claim_title = {
		always = yes
	}

	cost = {
		piety = {
			value = 0
			add = common_cb_impious_piety_cost
		}
		prestige = {
			value = 0
			add = claim_cb_prestige_cost
			multiply = common_cb_prestige_cost_multiplier

			if = {
				limit = {
					scope:attacker = {
						has_character_flag = temp_no_claim_war_cost
					}
				}
				multiply = {
					value = 0
					desc = "not_imprisoned_filter" # Says 'free'
				}
			}

		}
	}

	target_titles = claim
	#target_title_tier = all

	on_declaration = {
		on_declared_war = yes
		if = {
			limit = {
				scope:defender = { is_sibling_of = scope:attacker }
			}
			scope:attacker = {
				add_achievement_flag_effect = { FLAG = achievement_bad_blood_flag }
			}
		}
	}

	should_invalidate = {
		AND = { 
			NOT = { scope:claimant = scope:attacker } 
			scope:claimant = {
				OR = {
					is_alive = no 
					NOR = { 
						is_vassal_or_below_of = scope:attacker 
						is_courtier_of = scope:attacker 
					}
				}
			}
		} 
	}

	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = { scope:claimant = scope:attacker } 
					scope:claimant = { is_alive = no }
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_dead_message
			}
			triggered_desc = {
				trigger = {
					scope:claimant = {
						NOR = { 
							this = scope:attacker 
							NOR = { 
								is_vassal_or_below_of = scope:attacker 
								is_courtier_of = scope:attacker 
							}
						}
					}
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_not_vassal_message
			}
			desc = msg_claim_war_invalidated_message
		}
	}
	
	on_invalidated = {
	}

	#This is necessary for error log -- this should never happen
	on_white_peace_desc = {
		desc = invasion_war_victory_desc
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:claimant = { is_local_player = yes }
				}
				desc = claim_cb_victory_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_victory_desc_attacker
			}
			desc = claim_cb_victory_desc
		}
	}

	on_victory = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = conquest_claim
			save_scope_as = change
			add_claim_on_loss = yes
		}
		# Create a claim CB which is executed to handle title/vassal changes, in addition to being used to calculate Prestige awards for war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			change = scope:change
		}

		resolve_title_and_vassal_change = scope:change

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant.primary_title.tier < scope:attacker.primary_title.tier
				scope:claimant = {
					NOT = { target_is_liege_or_above = scope:attacker }
				}
			}

			create_title_and_vassal_change = {
				type = conquest_claim
				save_scope_as = change_two
				add_claim_on_loss = yes
			}
			scope:claimant = {
				change_liege = {
					liege = scope:attacker
					change = scope:change_two
				}
			}
			resolve_title_and_vassal_change = scope:change_two
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:claimant = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker
			}
			desc = claim_cb_defeat_desc
		}
		
	}

	on_defeat = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }
		# lose claims
		title:e_turan = {
			every_title_to_title_neighboring_duchy = {
				limit = {
					AND = {
						is_title_created = yes
						OR = {
							holder = scope:attacker
							holder = {
								any_liege_or_above = {
									THIS = scope:attacker
								}
							}
						}
					}
				}
				create_title_and_vassal_change = {
					type = conquest
					save_scope_as = change
					add_claim_on_loss = yes
				}
				change_title_holder_include_vassals = {
					holder = scope:defender
					change = scope:change
				}
				resolve_title_and_vassal_change = scope:change
			}
		}
		every_in_list = {
			list = target_titles
			scope:claimant = {
				remove_claim = prev
			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}
		
		# Attacker pays gold to the defender as reparations.
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
		}
		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_defeat_effect = yes
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CLAIM_WAR_NAME"
	my_war_name = "CLAIM_WAR_NAME_MY"
	war_name_base = "CLAIM_WAR_NAME_BASE"
	cb_name = "CLAIM_CB_NAME"
	interface_priority = 60

	should_show_war_goal_subview = yes

	attacker_wargoal_percentage = 0.8

	max_ai_diplo_distance_to_title = 1000
}

cb_theodoric_wars = {
	group = event
	white_peace_possible = no 

	allowed_for_character = {
	}

	allowed_against_character = {
	}

	target_titles = none
	target_title_tier = all
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder
	ai_only_against_neighbors = yes

	valid_to_start = {
		always = no
	}

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier = tier_county
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}
			}
		}
	}

	on_invalidated_desc = msg_religious_war_invalidation_region_message

	on_invalidated = {
	}

	cost = {
	}

	on_declaration = {
		on_declared_war = yes
	}

	#This is necessary for error log -- this should never happen
	on_white_peace_desc = {
		desc = invasion_war_victory_desc
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = theodoric_wars_victory_desc_attacker
			}
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = theodoric_wars_defeat_desc_defender
			}
			desc = theodoric_wars_victory_desc
		}
	}

	on_victory = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { destroy_title = title:k_thracian_goths }
		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}

		# go through the dejure hierarchy under target titles, transfer titles with same or worse tolerance holders (their religion equaly or less tolerated than the defender's),
		# take the holder as vassal otherwise and don't go deeper
		every_in_list = {
			list = target_titles
			custom_tooltip = CONQUEST_CB_TITLE
			every_in_de_jure_hierarchy = {
				continue = {
					OR = {
						NOT = {
							exists = holder
						}
						NOT = {
							holder = {
								target_is_liege_or_above = scope:defender
							}
						}
						AND = {
							scope:attacker.faith = {
								faith_hostility_level_comparison = {
									prev.holder.faith <= scope:defender.faith
								}
							}
							holder = {
								OR = {
									this = scope:defender
									target_is_liege_or_above = scope:defender
								}
							}
						}
					}
					tier > tier_county
				}
				limit = {
					tier = tier_county
					exists = holder
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}

				if = {
					limit = {
						OR = {
							scope:attacker.faith = {
								faith_hostility_level_comparison = {
									prev.holder.faith >= scope:defender.faith
								}
							}
							holder.primary_title.tier >= scope:attacker.primary_title.tier
						}
					}
					add_to_temporary_list = titles_taken
				}
				else = {
					holder = {
						add_to_temporary_list = vassals_taken
					}
				}
			}
		}

		every_in_list = {
			list = titles_taken
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = yes
			}
		}

		every_in_list = {
			list = vassals_taken
			change_liege = {
				liege = scope:attacker
				change = scope:change
			}
		}

		resolve_title_and_vassal_change = scope:change

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		scope:attacker = {
			imprison = {
				target = scope:defender
				type = dungeon
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = theodoric_wars_victory_desc_defender
			}
			triggered_desc = {
				trigger = {	scope:attacker = { is_local_player = yes } }
				desc = theodoric_wars_defeat_desc_attacker
			}
			desc = theodoric_wars_defeat_desc
		}
	}

	on_defeat = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:defender = { destroy_title = title:k_ostrogoths }
		scope:defender = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}

		# go through the dejure hierarchy under target titles, transfer titles with same or worse tolerance holders (their religion equaly or less tolerated than the defender's),
		# take the holder as vassal otherwise and don't go deeper
		every_in_list = {
			list = target_titles
			custom_tooltip = CONQUEST_CB_TITLE
			every_in_de_jure_hierarchy = {
				continue = {
					OR = {
						NOT = {
							exists = holder
						}
						NOT = {
							holder = {
								target_is_liege_or_above = scope:attacker
							}
						}
						AND = {
							scope:defender.faith = {
								faith_hostility_level_comparison = {
									prev.holder.faith <= scope:attacker.faith
								}
							}
							holder = {
								OR = {
									this = scope:attacker
									target_is_liege_or_above = scope:attacker
								}
							}
						}
					}
					tier > tier_county
				}
				limit = {
					tier = tier_county
					exists = holder
					holder = {
						OR = {
							this = scope:attacker
							target_is_liege_or_above = scope:attacker
						}
					}
				}

				if = {
					limit = {
						OR = {
							scope:defender.faith = {
								faith_hostility_level_comparison = {
									prev.holder.faith >= scope:attacker.faith
								}
							}
							holder.primary_title.tier >= scope:defender.primary_title.tier
						}
					}
					add_to_temporary_list = titles_taken
				}
				else = {
					holder = {
						add_to_temporary_list = vassals_taken
					}
				}
			}
		}

		every_in_list = {
			list = titles_taken
			change_title_holder = {
				holder = scope:defender
				change = scope:change
				take_baronies = yes
			}
		}

		every_in_list = {
			list = vassals_taken
			change_liege = {
				liege = scope:defender
				change = scope:change
			}
		}

		resolve_title_and_vassal_change = scope:change

		# Prestige Progress for the Defender
		every_in_list = {
			list = target_titles
			scope:defender = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		scope:defender = {
			imprison = {
				target = scope:attacker
				type = dungeon
			}
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:defender = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = THEODORIC_WAR_NAME
	war_name_base = THEODORIC_WAR_NAME_BASE
	cb_name = THEODORIC_CB_NAME

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8
	max_attacker_score_from_battles = 200
	max_defender_score_from_battles = 200

	max_ai_diplo_distance_to_title = 500
}

claim_cb_donatist = {
	group = event
	mutually_exclusive_titles = {
		NOT = {
			# If pushing personal claims, you can press multiple claims with the Divine Right innovation (High Medieval Era).
			trigger_if = {
				limit = {
					scope:attacker = scope:claimant
				}
				scope:attacker = {
					culture = {
						has_innovation = innovation_divine_right
					}
				}
			}
			# If pushing claims for someone else, you need the Rightful Ownership innovation to press multiple claims (Late Medieval Era).
			trigger_else = {
				scope:attacker = {
					culture = {
						has_innovation = innovation_rightful_ownership
					}
				}
			}
		}
	}

	# This whole section was already commented out, I just commented it out more to prevent console errors -h
	#allowed_for_character = {}

	# allowed_against_character = {
	# 	faith.religion = scope:attacker.faith.religion
	# }

	# Root is the title
	# scope:claimant is the claimant
	# scope:attacker is the attacker
	# scope:defender is the defender
	allowed_against_character_display_regardless = {
		### TFE EDIT: War dec check
		casus_belli_block = { SCOPEATK = scope:attacker SCOPEDEF = root }
	}
	is_allowed_claim_title = {
		custom_description = {
			text = "claimant_titles_held_by_you_or_vassal"
			NOR = {
				holder = scope:attacker
				holder = {
					target_is_liege_or_above = scope:attacker
				}
			}
		}
		scope:claimant = {
			NOT = { has_trait = incapable }
			trigger_if = {
				limit = { NOT = { scope:claimant = scope:attacker } } # You can always press your own claims
				is_imprisoned = no
			}
			#religion = scope:attacker.religion
			# claimant must not be at war against defender for this claim already
			custom_description = {
				text = "claimant_already_pressing_their_claim"
				object = root
				NAND = {
					liege = scope:attacker
					any_character_war = {
						casus_belli = {
							any_target_title = {
								this = root
							}
						}
					}
				}
			}
		}
		scope:attacker = {
			#Cannot press claims against your own vassals, as these must be revoked.
			custom_description = {
				text = "claimant_titles_held_by_attacker_vassals"
				NOT = {
					any_vassal_or_below = {
						has_title = root
					}
				}
			}
		}
		trigger_if = {
			limit = {
				NOT = { scope:claimant = scope:attacker } # You can always press your own claims (though the prestige cost might be high)
			}
			trigger_if = {
				limit = {
					is_weak_claimant_due_to_gender_trigger = { FAITH = scope:attacker.faith CHARACTER = scope:claimant }
				}
				trigger_if = {
					limit = {
						scope:claimant = { is_adult = yes }
					}
					save_temporary_scope_as = treat_claim_as_weak
				}
				trigger_else = {
					always = no
				}
			}
			trigger_else_if = {
				limit = {
					scope:claimant = { is_adult = no }
				}
				save_temporary_scope_as = treat_claim_as_weak
			}
			# making the default behavior explicit if no other trigger_(else_)ifs are valid
			trigger_else = {
				always = yes
			}
		}
		trigger_if = {
			limit = { exists = scope:treat_claim_as_weak }
			holder = {
				custom_description = {
					text = "claim_target_position_is_weak"
					object = scope:attacker
					OR = {
						has_trait = incapable
						is_adult = no
						is_weak_claimant_due_to_gender_trigger = { FAITH = scope:attacker.faith CHARACTER = root.holder }
					}
				}
			}
		}
		#Under Byzantine law, a ruler must be unblemished
		trigger_if = {
			limit = {
				scope:defender.culture = { has_cultural_parameter = physical_disfigurement_blocks_inheritance }
			}
			scope:claimant = {
				custom_description = {
					text = "byzantine_claimant_is_disfigured"
					object = scope:claimant
					NOR = {
						has_trait = incapable
						has_trait = blind
						has_trait = disfigured
						is_eunuch_trigger = yes
						has_trait = maimed
						has_trait = one_eyed
						has_trait = one_legged
						has_trait = clubfooted
						has_trait = hunchbacked
						has_trait = dwarf
					}
				}
			}
		}
		#Under Byzantine law, a ruler must be able to produce children.
		trigger_if = {
			limit = {
				scope:defender.culture = { has_cultural_parameter = physical_disfigurement_blocks_inheritance }
			}
			scope:claimant = {
				custom_description = {
					text = "byzantine_claimant_is_celibate"
					object = scope:claimant
					NOR = {
						is_eunuch_trigger = yes
						has_trait = devoted
						has_trait = celibate
					}
				}
			}
		}
	}

	cost = {
		piety = {
			value = 0
			add = common_cb_impious_piety_cost
		}
		prestige = {
			value = 0
			add = claim_cb_prestige_cost
			multiply = common_cb_prestige_cost_multiplier

			if = {
				limit = {
					scope:attacker = {
						has_character_flag = temp_no_claim_war_cost
					}
				}
				multiply = {
					value = 0
					desc = "not_imprisoned_filter" # Says 'free'
				}
			}

		}
	}

	target_titles = claim
	#target_title_tier = all

	on_declaration = {
		on_declared_war = yes
		if = {
			limit = {
				scope:defender = { is_sibling_of = scope:attacker }
			}
			scope:attacker = {
				add_achievement_flag_effect = { FLAG = achievement_bad_blood_flag }
			}
		}
	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier >= tier_county
						exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
			AND = { 
				NOT = { scope:claimant = scope:attacker } 
				scope:claimant = {
					OR = {
						is_alive = no 
						NOR = { 
							is_vassal_or_below_of = scope:attacker 
							is_courtier_of = scope:attacker 
						}
					}
				}
			} 
		}
	}

	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = { scope:claimant = scope:attacker } 
					scope:claimant = { is_alive = no }
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_dead_message
			}
			triggered_desc = {
				trigger = {
					scope:claimant = {
						NOR = { 
							this = scope:attacker 
							NOR = { 
								is_vassal_or_below_of = scope:attacker 
								is_courtier_of = scope:attacker 
							}
						}
					}
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_not_vassal_message
			}
			desc = msg_claim_war_invalidated_message
		}
	}
	
	on_invalidated = {
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:claimant = { is_local_player = yes }
				}
				desc = claim_cb_victory_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_victory_desc_attacker
			}
			desc = claim_cb_victory_desc
		}
	}

	on_victory = {
		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = conquest_claim
			save_scope_as = change
			add_claim_on_loss = yes
		}
		# Create a claim CB which is executed to handle title/vassal changes, in addition to being used to calculate Prestige awards for war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			change = scope:change
		}

		resolve_title_and_vassal_change = scope:change

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant.primary_title.tier < scope:attacker.primary_title.tier
				scope:claimant = {
					NOT = { target_is_liege_or_above = scope:attacker }
				}
			}

			create_title_and_vassal_change = {
				type = conquest_claim
				save_scope_as = change_two
				add_claim_on_loss = yes
			}
			scope:claimant = {
				change_liege = {
					liege = scope:attacker
					change = scope:change_two
				}
			}
			resolve_title_and_vassal_change = scope:change_two
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_white_peace_desc_defender
			}
			desc = claim_cb_white_peace_desc
		}
		
	}

	on_white_peace = {
		#EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# press claims
		every_in_list = {
			list = target_titles
			if = {
				limit = { scope:claimant = { has_weak_claim_on = prev } }
				scope:claimant = {
					make_claim_strong = prev
				}
			}
		}

		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_claim_cb'
				multiply = -5.0
			}
		}
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}
		# Defender neither gains nor loses any prestige.
		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:claimant = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker
			}
			desc = claim_cb_defeat_desc
		}
		
	}

	on_defeat = {
		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }

		# lose claims
		every_in_list = {
			list = target_titles
			scope:claimant = {
				remove_claim = prev
			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Attacker pays gold to the defender as reparations.
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
			
		}
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
		}
		scope:attacker = {
			every_held_title = {
				change_title_holder_include_vassals = {
					holder = scope:defender
					change = scope:change
				}
			}
		}
		resolve_title_and_vassal_change = scope:change
		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CLAIM_WAR_NAME"
	my_war_name = "CLAIM_WAR_NAME_MY"
	war_name_base = "CLAIM_WAR_NAME_BASE"
	cb_name = "CLAIM_CB_NAME"
	interface_priority = 60

	should_show_war_goal_subview = yes

	attacker_wargoal_percentage = 0.8

	max_ai_diplo_distance_to_title = 1000
}

lech_czech_cb = {
	group = event

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		is_ai = yes
	}

	allowed_against_character = {
		always = yes
	}
	target_titles = all
	target_title_tier = county
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder

	valid_to_start = {
		always = no
	}

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier = tier_county
					holder = {
						target_is_same_character_or_above = scope:defender
					}
				}
			}
		}
	}

	on_invalidated_desc = msg_religious_war_invalidation_region_message
	
	on_invalidated = {
		scope:attacker = { clean_scandinavian_adventurer_effect = yes }
	}

	on_declaration = {
		on_declared_war = yes
		scope:attacker = {
			add_character_flag = used_lifetime_migration
		}
		# Dish out event troops, if appropriate.
		## We give out x200 troops per same-culture same-faith core mainland Scandinavian county, up to a maximum of ten counties.
		## These are evenly split between good MaA -> average MaA -> good MaA again, to give a decent bell curve.
		scope:attacker = {
			add_character_modifier = migration_leader
			if = {
				limit = {
					is_landed = yes
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_medium
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = yes
				}
			}
			else = {
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.primary_title.title_capital_county.title_province
					uses_supply = no
					inheritable = yes
				}
			}
			if = {
				limit = {
					AND = {
						is_landed = yes
						migration_levies_value >= 3
						culture = {
							has_cultural_tradition = tradition_migrations
						}
					}
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = no
			}
			}
			if = {
				limit = {
					AND = {
						is_landed = yes
						migration_levies_value >= 10
						culture = {
							has_cultural_tradition = tradition_migrations
						}
					}
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = yes
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = no
				}
			}
			if = {
				limit = {
					AND = {
						exists = struggle:britannia_struggle
						migration_levies_value >= 10
						struggle:britannia_struggle = {
							has_struggle_phase_parameter = more_migration_armies
						}
						any_in_list = {
							list = target_titles
							title_capital_county.title_province = {
								geographical_region = world_europe_west_britannia
							}
						}
						culture = {
							has_cultural_tradition = tradition_migrations
						}
					}
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = yes
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = no
				}
			}
			if = {
				limit = {
					culture = {
						has_cultural_tradition = tradition_migrations
					}
					migration_levies_value >= 1
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = no
				}
			}
		}
		scope:defender = {
			trigger_event = {
				id = migration.0001
				days = 10
			}
		}


		scope:attacker = {
			set_variable = {
				name = culture_province
				value = 5
			}
			every_realm_county = {
				limit = {
					culture = scope:attacker.culture				
				}
				scope:attacker = {
					change_variable = {
						name = culture_province
						add = 1
					}
				}
			}
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = { is_local_player = yes }
				}
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
		triggered_desc = {
			trigger = { scope:attacker = { is_local_player = yes } }
			desc = migration_war_warning_desc
		}
	}

	on_victory = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		# Organise general results for the attacker.
		scope:attacker = {
			set_variable = {
				name = culture_province
				value = 5
			}
			every_realm_county = {
				limit = {
					culture = scope:attacker.culture				
				}
				scope:attacker = {
					change_variable = {
						name = culture_province
						add = 1
					}
				}
			}
			# Set up titles in the new colony.
			## First up, hand over counties in the target duchy to scope:attacker.
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}
			every_in_list = {
				list = target_titles
				custom_tooltip = CONQUEST_CB_TITLE
				every_in_de_jure_hierarchy = {
					continue = {
						OR = {
							NOT = {
								exists = holder
							}
							NOT = {
								holder = {
									target_is_liege_or_above = scope:defender
								}
							}
							AND = {
								scope:attacker.faith = {
									faith_hostility_level_comparison = {
										prev.holder.faith <= scope:defender.faith
									}
								}
								holder = {
									OR = {
										this = scope:defender
										target_is_liege_or_above = scope:defender
									}
								}
							}
						}
						tier > tier_county
					}
					limit = {
						tier = tier_county
						exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
					if = {
						limit = {
							OR = {
								scope:attacker.faith = {
									faith_hostility_level_comparison = { prev.holder.faith >= scope:defender.faith }
								}
								holder.primary_title.tier >= scope:attacker.primary_title.tier
							}
						}
						add_to_temporary_list = titles_taken
					}
					else = {
						holder = { add_to_temporary_list = vassals_taken }
					}
				}
			}
			every_in_list = {
				list = titles_taken
				change_title_holder = {
					holder = scope:attacker
					change = scope:change
					take_baronies = yes
				}
			}
			custom_tooltip = MIGRATION_TOOLTIP
			hidden_effect = {
				if = {
					limit = {
						scope:attacker = {
							has_variable = culture_province
						}
					}
					while = {
						count = scope:attacker.var:culture_province
						random_in_list = {
							list = titles_taken
							random_in_de_jure_hierarchy = {
								limit = {
									tier = tier_county
								}
								set_county_culture = scope:attacker.culture
								set_county_faith = scope:attacker.faith
							}
						}
					}
				}
			}
			every_in_list = {
				list = vassals_taken
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			## Grab the appropriate duchy for future independence checks.
			random_in_list = {
				list = target_titles
				limit = { tier = tier_duchy }
				save_scope_as = target_duchy
			}
			## Next, if the appropriate duchy doesn't already exist, create it.
			if = {
				limit = {
					any_in_list = {
						list = target_titles
						tier = tier_duchy
						is_title_created = no
					}
				}
				random_in_list = {
					list = target_titles
					limit = { tier = tier_duchy }
					save_scope_as = new_duchy
				}
				create_title_and_vassal_change = {
					type = created
					save_scope_as = change
					add_claim_on_loss = no
				}
				scope:new_duchy = {
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## Else if it does & is a part of scope:defender's sub-realm, usurp it.
			else_if = {
				limit = {
					any_in_list = {
						list = target_titles
						tier = tier_duchy
						holder = {
							OR = {
								this = scope:defender
								any_liege_or_above = { this = scope:defender }
							}
						}
					}
				}
				random_in_list = {
					list = target_titles
					# No need to check all triggers, since there'll only ever be one duchy in the list.
					limit = { tier = tier_duchy }
					save_scope_as = new_duchy
				}
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = yes
				}
				scope:new_duchy = {
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## Else we want a titular duchy.
			else = {
				# To keep tooltips neat, show the core duchy as transferring (preventing a messy "unlanded of" from appearing).
				show_as_tooltip = {
					random_in_list = {
					list = target_titles
						limit = { tier = tier_duchy }
						save_scope_as = new_duchy
					}
					create_title_and_vassal_change = {
						type = created
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:new_duchy = {
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
				# Actual transfer.
				hidden_effect = {
					# Randomising the names a little.
					random_list = {
						25 = {
							create_dynamic_title = {
								tier = duchy
								name = VIKING_STATE_TITLE_NAME
							}
						}
						25 = {
							create_dynamic_title = {
								tier = duchy
								name = NORDIC_STATE_TITLE_NAME
							}
						}
						25 = {
							trigger = {
								any_in_list = {
									list = target_titles
									tier = tier_county
									title_province = {
										geographical_region = world_europe_south_east
										geographical_region = world_europe_east
										geographical_region = world_asia_minor
									}
								}
							}
							create_dynamic_title = {
								tier = duchy
								name = VARYAG_STATE_TITLE_NAME
							}
						}
						25 = {
							create_dynamic_title = {
								tier = duchy
								name = NORSE_STATE_TITLE_NAME
							}
						}
					}
					create_title_and_vassal_change = {
						type = created
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:new_title = {
						set_delete_on_destroy = yes
						set_no_automatic_claims = yes
						set_can_be_named_after_dynasty = no
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
						save_scope_as = new_duchy
					}
					resolve_title_and_vassal_change = scope:change
					# Generate a new CoA
					## We do this in a separate block so that the effect has time to see that the title has a holder, since it'll error otherwise.
					scope:new_title = { generate_coa = yes }
				}
			}
			## Set a new capital.
			### We prefer the de jure capital of the other.
			if = {
				limit = {
					any_in_list = {
						list = target_titles
						this = duchy.title_capital_county
					}
				}
				random_in_list = {
					list = target_titles
					limit = { this = duchy.title_capital_county }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			### Otherwise, tribals go by pure levy count.
			else_if = {
				limit = {
					scope:attacker = { government_has_flag = government_is_tribal }
				}
				ordered_in_list = {
					list = target_titles
					limit = { tier = tier_county }
					order_by = total_county_levies
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			### Everyone else prefers the highest development.
			else = {
				ordered_in_list = {
					list = target_titles
					limit = { tier = tier_county }
					order_by = { add = development_level }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			# Then re-order stuff in the Old Country.
			## First, we destroy any other ducal titles scope:attacker holds (excepting HoF titles).
			if = {
				limit = {
					any_held_title = {
						tier = tier_kingdom
						NOR = {
							this = title:k_anglia
							this = title:k_juteland
							this = title:k_visigoths
							this = title:k_varini
							this = title:k_thuringians
							this = title:k_rhinefranks
							this = title:k_quadi
							this = title:k_marcomanni
							this = title:k_alani
							this = title:k_hasding_vandals
							this = title:k_siling_vandals
							this = title:k_franks
							this = title:k_gepids
							this = title:k_vandals
							this = title:k_burgundia
							this = title:k_lombardia
							this = title:k_suebi
							this = title:k_vandals
							this = scope:new_duchy
							is_head_of_faith = yes
						}
					}
				}
				every_held_title = {
					limit = {
						tier = tier_duchy
						NOR = {
							this = scope:new_duchy
							is_head_of_faith = yes
						}
					}
					save_temporary_scope_as = excess_duchy
					scope:attacker = { destroy_title = scope:excess_duchy }
				}
			}
			## Sort out vassalised family.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.family_transfer
			every_vassal_or_below = {
				limit = { dynasty = scope:attacker.dynasty }
				add_to_list = vassalised_family_list
			}
			every_held_title = {
				limit = {
					tier = tier_county
					duchy = { is_in_list = target_titles }
				}
				add_to_list = spare_counties_list
			}
			## If there are any to account for, we bring over other landed family members from the Old Country & try to give them counties in the colony.
			if = {
				limit = {
					any_in_list = {
						list = vassalised_family_list
						count >= 1
					}
				}
				# Then iterate through the family members, dishing out titles as appropriate.
				every_in_list = {
					list = vassalised_family_list
					# Players first.
					limit = { is_ai = no }
					# Then NPCs, prioritising counts.
					alternative_limit = { highest_held_title_tier = tier_county }
					# We don't process barons, they can just go landless.
					# Grab the currently affected vassal.
					save_temporary_scope_as = receiving_vassal
					# Then, if there's anything in that list, look at handing out titles.
					if = {
						limit = {
							any_in_list = {
								list = spare_counties_list
								NOT = { this = scope:attacker.capital_county }
								holder = scope:attacker
							}
						}
						random_in_list = {
							list = spare_counties_list
							limit = {
								NOT = { this = scope:attacker.capital_county }
								tier = tier_county
								holder = scope:attacker
							}
							save_temporary_scope_as = spare_county
							create_title_and_vassal_change = {
								type = granted
								save_scope_as = change
								add_claim_on_loss = no
							}
							scope:spare_county = {
								change_title_holder = {
									holder = scope:receiving_vassal
									change = scope:change
								}
							}
							resolve_title_and_vassal_change = scope:change
						}
						# And add them to the post-processing list so we can divy out their lands elsewhere.
						add_to_list = vassal_family_processed_list
					}
					# Otherwise, we're going to have to do something special with this character, so take note of them for later.
					else = { add_to_list = vassal_family_not_processed_list }
				}
			}
			## Distribute scope:attacker's old domains to peasant vassals of the local culture/faith.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.old_domains
			every_held_title = {
				limit = {
					tier = tier_county
					duchy = {
						NOT = { this = scope:target_duchy 
								this = title:k_juteland
								this = title:k_visigoths
								this = title:k_anglia
							}
					}
				}
				# Grab the county for ease of reference.
				save_temporary_scope_as = current_county
				# Create an elevated peasant to claim the county.
				create_character = {
					location = scope:current_county.title_province
					template = old_country_local_warlord_template
					save_temporary_scope_as = local_warlord
				}
				# Assign the seceding title to the new upstart.
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					scope:current_county = {
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
				# And give them their independence.
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					scope:local_warlord = {
						becomes_independent = { change = scope:change }
						save_scope_as = truce_loc
						add_truce_both_ways = {
							character = scope:attacker
							days = 14600
							name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## Distribute landed family's domains outside of the colony to peasant vassals of the local culture/faith.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.landed_family_old_domains
			every_in_list = {
				list = vassal_family_processed_list
				every_held_title = {
					limit = {
						tier = tier_county
						duchy = {
							NOT = { this = scope:target_duchy }
						}
					}
					# Grab the county for ease of reference.
					save_temporary_scope_as = current_county
					# Create an elevated peasant to claim the county.
					create_character = {
						location = scope:current_county.title_province
						template = old_country_local_warlord_template
						save_temporary_scope_as = local_warlord
					}
					# Assign the seceding title to the new upstart.
					create_title_and_vassal_change = {
						type = usurped
						save_scope_as = change
						add_claim_on_loss = no
					}
					hidden_effect = {
						scope:current_county = {
							change_title_holder = {
								holder = scope:local_warlord
								change = scope:change
								take_baronies = yes
							}
						}
					}
					resolve_title_and_vassal_change = scope:change
					# And give them their independence.
					create_title_and_vassal_change = {
						type = independency
						save_scope_as = change
						add_claim_on_loss = no
					}
					hidden_effect = {
						scope:local_warlord = {
							becomes_independent = { change = scope:change }
							save_scope_as = truce_loc
							add_truce_both_ways = {
								character = scope:attacker
								days = 14600
								name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
							}
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			## Give all old vassals outside of the target_titles independence.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.old_vassals
			every_vassal = {
				limit = {
					NOT = {
						any_held_title = { duchy = scope:target_duchy }
					}
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					becomes_independent = { change = scope:change }
					save_scope_as = truce_loc
					add_truce_both_ways = {
						character = scope:attacker
						days = 14600
						name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			# Sort the governance of the colony.
			## Adjusting the government type as appropriate.
			# Conquering tribes makes you tribal.
			if = {
				limit = {
					capital_province ?= { has_holding_type = tribal_holding }
					NOT = { government_has_flag = government_is_tribal }
				}
				# Change government to tribal.
				change_government = tribal_government
			}
			# Conquering elsewhere as a tribal makes you feudal.
			else_if = {
				limit = {
					NOT = {
						capital_province ?= { has_holding_type = tribal_holding }
					}
					# Might have turned theocratic before from gaining a new capital holding
					#government_has_flag = government_is_tribal
				}
				# Change government to feudal.
				if = {
					limit = {
						capital_province ?= { has_holding_type = estate_holding }
					}
					change_government = roman_government
				}
				else = {
					change_government = feudal_government
				}
			}
			## Seizing control so things *vaguely* work.
			scope:attacker = { trigger_event = fp1_varangian_adventures.0001 }
			## And giving them a gold bounty to keep them afloat.
			scope:attacker = { add_gold = varangian_adventures_bounty_amount_value }
			# Finally, general cleanup.
			## Move any remaining newly-landless family to scope:attacker's court.
			every_in_list = {
				list = vassal_family_not_processed_list
				limit = { is_ruler = no }
				save_temporary_scope_as = landless_family
				scope:attacker = { add_courtier = scope:landless_family }
			}
			## If scope:attacker wasn't an adventurer before, make them one.
			if = {
				limit = {
					NOT = { has_trait = adventurer }
				}
				add_trait = adventurer
			}
			## Increment their Varangian Adventurer CB tally.
			if = {
				limit = {
					NOT = { has_variable = va_cb_tally }
				}
				set_variable = {
					name = va_cb_tally
					# We set to two initially, since the first war cost prestige already, so we want to pretend you had a value of 1 the first time around.
					value = 2
				}
			}
			else = {
				change_variable = {
					name = va_cb_tally
					add = 1
				}
			}
			# Aaaaaand track the A Dangerous Business achievement.
			if = {
				limit = { has_trait = dwarf }
				add_character_flag = a_dangerous_business_achievement_flag
			}

			if = {
				limit = {
					any_realm_county = {
						NOT = {
							culture = scope:attacker.culture
						}
					}
				}
				random_list = {
					5 = {
						trigger_event = {
							id = migration.0005
							days = {30 50}
						}
					}
					10 = {
						trigger_event = {
							id = migration.0006
							days = {30 50}
						}
					}
					10 = {
						trigger_event = {
							id = migration.0007
							days = {30 50}
						}
					}
					5 = {
						trigger_event = {
							id = migration.0008
							days = {30 50}
						}
					}
				}
			}
		}

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		#if = {
	#		limit = {
	#			scope:attacker.primary_title = {
	#				tier = tier_kingdom
	#				is_landless_type_title = yes
	#			}
	#		}
	#		every_in_list = {
	#			list = target_titles
	#			limit = { tier = tier_duchy }
	#			
	#			set_de_jure_liege_title = scope:attacker.primary_title
	#		}
	#	}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}
		
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		setup_invasion_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			change = scope:change
			take_occupied = yes
		}
		resolve_title_and_vassal_change = scope:change

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }

		if = {
			limit = {
				any_in_list = {
					list = target_titles
					THIS = title:d_bohemia
				}
			}
			scope:attacker = {
				convert_player_realm_from_old_culture_to_new_effect = {
					OLD_CULTURE = culture:sclavenian
					NEW_CULTURE = culture:czech
				}
			}
		}
		else_if = {
			limit = {
				any_in_list = {
					list = target_titles
					THIS = title:d_wielkopolska
				}
			}
			scope:attacker = {
				convert_player_realm_from_old_culture_to_new_effect = {
					OLD_CULTURE = culture:sclavenian
					NEW_CULTURE = culture:wendish
				}
			}
		}

		if = {
			limit = {
				scope:attacker = {
					has_title = title:d_bug
				}
			}
			scope:attacker = { destroy_title = title:d_bug }
		}
		if = {
			limit = {
				scope:attacker = {
					has_title = title:d_san
				}
			}
			scope:attacker = { destroy_title = title:d_san }
		}

	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}

	on_white_peace = {
        #EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
			remove_character_modifier = migration_leader
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}

	on_defeat = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold = {
				gold = 3
				target = scope:defender
				yearly_income = yes
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
			remove_character_modifier = migration_leader
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige = major_prestige_value
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}

		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = MIGRATION_WAR_NAME
	war_name_base = MIGRATION_WAR_NAME_BASE
	cb_name = MIGRATION_NAME_CB

	interface_priority = 100

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = MIGRATION_WAR_NAME
	war_name_base = MIGRATION_WAR_NAME_BASE
	cb_name = MIGRATION_NAME_CB

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8
}

gokturk_rouran_war = {
	group = event
	white_peace_possible = no
	should_invalidate = {
		scope:defender = {
			is_independent_ruler = no
		}
	}
	
	on_declaration = {
		on_declared_war = yes
		scope:attacker = {
			if = {
				limit = {
					has_title = title:d_gokturks
				}
				spawn_army = {
					name = "GOKTURK_INVADERS"
					levies = 15000
					men_at_arms = {
						type = light_horsemen
						stacks = 30
					}
					men_at_arms = {
						type = light_footmen
						stacks = 25
					}
					men_at_arms = {
						type = horse_archers
						stacks = 15
					}
					location = scope:attacker.primary_title.title_capital_county.title_province
					uses_supply = no
				}
			}
		}
	}	
	
	on_invalidated_desc = msg_subjugation_war_invalidated_message
	
	on_invalidated = {
		scope:attacker = {
			if = {
				limit = {
					is_alive = yes
				}
				remove_character_flag = used_lifetime_subjugation # If the war is invalidated, you should be permitted to try again
				# Refund their investment.
				add_prestige_no_experience = tribal_subjugation_cb_prestige_cost
			}
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender.primary_title.tier < scope:attacker.primary_title.tier }
				desc = {
					first_valid = {
						triggered_desc = {
							trigger = { scope:attacker = { is_local_player = yes } }
							desc = vassalization_cb_victory_desc_attacker
						}
						triggered_desc = {
							trigger = { scope:defender = { is_local_player = yes } }
							desc = vassalization_cb_victory_desc_defender
						}
						desc = vassalization_cb_victory_desc
					}
				}
			}
			desc = {			
				first_valid = {
					triggered_desc = {
						trigger = { scope:attacker = { is_local_player = yes } }
						desc = tribal_subjugation_cb_victory_desc_equal_tier_attacker
					}
					triggered_desc = {
						trigger = { scope:defender = { is_local_player = yes } }
						desc = tribal_subjugation_cb_victory_desc_equal_tier_defender
					}
					desc = tribal_subjugation_cb_victory_desc_equal_tier
				}
			}
		}
		triggered_desc = {
			trigger = { scope:attacker = { is_local_player = yes } }
			desc = subjugation_war_warning_desc
		}
	}
	
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		
		create_title_and_vassal_change = {
			type = swear_fealty
			save_scope_as = change
			add_claim_on_loss = no
		}
		
		if = {
			limit = {
				scope:defender.primary_title.tier < scope:attacker.primary_title.tier
			}
			scope:defender = {
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
		}
		else = {
			scope:defender = {
				every_held_title = {
					if = {
						limit = {
							tier = scope:defender.primary_title.tier
						}
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
					}
					else_if = {
						limit = {
							OR = {
								NOT = { exists = scope:secondary_title }
								tier > scope:secondary_title.tier
							}
						}
						save_temporary_scope_as = secondary_title
					}
				}
			}
			
			scope:defender = {
				if = {
					limit = {
						exists = scope:secondary_title
					}
					every_vassal = {
						limit = {
							primary_title.tier >= scope:secondary_title.tier
							NOT = {
								primary_title.tier = tier_barony
							}
						}
						change_liege = {
							liege = scope:attacker
							change = scope:change
						}
					}
				}
			}
			
			scope:defender = {
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
		}
		scope:defender = {
			every_vassal = {
				limit = {
					NOT = {
						primary_title.tier = tier_barony
						
					}
				}
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
		}
		resolve_title_and_vassal_change = scope:change
		
		
		# Prestige level progress for the attacker
		scope:attacker = {
			add_prestige_experience = {
				value = major_prestige_value
			}
		}

		# Prestige loss for the defender
		scope:defender = {
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}
		
		# Truce
		add_truce_attacker_victory_effect = yes

		every_vassal = {
			add_opinion = {
				target = root
				opinion = 70
				years = 10
				modifier = united_our_people
			}
		}

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes change_government = nomadic_government }
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = tribal_subjugation_cb_white_peace_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = tribal_subjugation_cb_defeat_desc_attacker
			}
			desc = tribal_subjugation_cb_white_peace_desc
		}
	}
	
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_high_effect = yes }
		
		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for the defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		
		# Truce
		add_truce_attacker_defeat_effect = yes
		
		on_lost_aggression_war_discontent_loss = yes

	}
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "GOKTURK_ROURAN_WAR_NAME"
	war_name_base = "GOKTURK_ROURAN_WAR_BASE"
	cb_name = "GOKTURK_ROURAN_WAR_NAME"
	
	ticking_war_score_targets_entire_realm = yes
	max_defender_score_from_occupation = 50
	max_attacker_score_from_occupation = 200
	attacker_ticking_warscore = 0.2
	attacker_wargoal_percentage = 0.2
	
	max_ai_diplo_distance_to_title = 500
}

vandalic_war_cb = {
	group = event
	white_peace_possible = no
	# Root is the title
	# scope:claimant is the claimant
	# scope:attacker is the attacker
	# scope:defender is the defender

	target_titles = claim
	#target_title_tier = all

	on_declaration = {
		on_declared_war = yes
		scope:attacker = {
			capital_county = {
				add_county_modifier = { modifier = roman_camps years = 5 }
			}
			spawn_army = {
				name = "Roman Vanguard"
				levies = 1000
				men_at_arms = {
					type = cataphract
					stacks = 2
				}
				men_at_arms = {
					type = bowmen
					stacks = 1
				}
				men_at_arms = {
					type = palatinae
					stacks = 1
				}
				men_at_arms = {
					type = comitatenses
					stacks = 1
				}
				men_at_arms = {
					type = scorpio
					stacks = 2
				}
				location = province:4578 #Mahdiya
				uses_supply = no
				inheritable = yes
			}
			spawn_army = {
				name = "Roman Vanguard"
				levies = 600
				men_at_arms = {
					type = cataphract
					stacks = 2
				}
				men_at_arms = {
					type = bowmen
					stacks = 1
				}
				men_at_arms = {
					type = palatinae
					stacks = 1
				}
				men_at_arms = {
					type = comitatenses
					stacks = 1
				}
				men_at_arms = {
					type = scorpio
					stacks = 2
				}
				location = province:4578 #Mahdiya
				uses_supply = no
				inheritable = yes
				war = scope:war
			}
			spawn_army = {
				name = "Roman Vanguard"
				levies = 600
				men_at_arms = {
					type = cataphract
					stacks = 2
				}
				men_at_arms = {
					type = bowmen
					stacks = 1
				}
				men_at_arms = {
					type = palatinae
					stacks = 1
				}
				men_at_arms = {
					type = comitatenses
					stacks = 1
				}
				men_at_arms = {
					type = scorpio
					stacks = 2
				}
				location = province:4578 #Mahdiya
				uses_supply = no
				inheritable = yes
				war = scope:war
			}
			if = {
				limit = {
					character:armenian_02 = {
						is_alive = yes
					}
				}
				add_courtier = character:armenian_02
			}
		}
		scope:defender = {
			if = {
				limit = {
					global_var:hildirix ?= {
						is_alive = yes
					}
				}
				trigger_event = {
					id = western_roman.0040
					days = 1
				}
			}
		}
		if = {
			limit = {
				title:c_tunis.holder = scope:defender
			}
			title:c_tunis = {
				add_county_modifier = { modifier = surprise_attack years = 2 }
			}
		}
		#scope:attacker = {
		#	trigger_event = {
		#		id = TFE_flavour_events.0051
		#		days = 1
		#	}
		#}
	}	

	should_invalidate = {
		scope:defender = {
			is_independent_ruler = no
		}
	}

	on_invalidated_desc = msg_subjugation_war_invalidated_message
	
	on_invalidated = {
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:claimant = { is_local_player = yes }
				}
				desc = claim_cb_victory_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_victory_desc_attacker
			}
			desc = claim_cb_victory_desc
		}
	}

	on_victory = {
		scope:defender = {
			every_held_title = {
				limit = {
					tier >= tier_kingdom
					NOT = { this = title:k_vandals }
				}
				scope:defender = { destroy_title = prev }
			}
			every_held_title = {
				limit = {
					tier = tier_duchy
					NOT = { this = title:d_tunis }
				}
				scope:defender = { destroy_title = prev }
			}
		}
		scope:attacker = {
			top_liege = {
				save_scope_as = victor
				every_vassal = {
					add_opinion = {
						modifier = respect_opinion
						target = scope:victor
						opinion = 20
					}
				}
			}
		}
		title:c_mahdiya = {
			remove_county_modifier = roman_camps
		}
		title:c_tunis = {
			remove_county_modifier = surprise_attack
		}
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:attacker = {
			if = {
				limit = {
					OR = {
						top_liege = {
							has_title = title:e_byzantium
						}
						top_liege = {
							has_title = title:e_roman_empire
						}
					}
				}
				custom_tooltip = vandalic_war_end_effect
				top_liege = {
				trigger_event = {
					id = western_roman.0041
					days = 1
				}
				}
			}
		}

		create_title_and_vassal_change = {
			type = conquest_claim
			save_scope_as = change
			add_claim_on_loss = yes
		}
		# Create a claim CB which is executed to handle title/vassal changes, in addition to being used to calculate Prestige awards for war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			change = scope:change
		}

		resolve_title_and_vassal_change = scope:change

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant.primary_title.tier < scope:attacker.primary_title.tier
				scope:claimant = {
					NOT = { target_is_liege_or_above = scope:attacker }
				}
			}

			create_title_and_vassal_change = {
				type = conquest_claim
				save_scope_as = change_two
				add_claim_on_loss = yes
			}
			scope:claimant = {
				change_liege = {
					liege = scope:attacker
					change = scope:change_two
				}
			}
			resolve_title_and_vassal_change = scope:change_two
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}
		if = {
			limit = {
				scope:defender = {
					highest_held_title_tier >= tier_kingdom
				}
			}
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = changethree
				add_claim_on_loss = yes
			}
			scope:defender = {
				every_held_title = {
					limit = {
						tier >= tier_kingdom
					}
					change_title_holder_include_vassals = {
						holder = scope:attacker
						change = scope:changethree
					}
				}
			}
			resolve_title_and_vassal_change = scope:changethree
		}
		if = {
			limit = {
				scope:defender = {
					is_independent_ruler = yes
					is_landed = yes
				}
			}
			create_title_and_vassal_change = {
				type = swear_fealty
				save_scope_as = changev
				add_claim_on_loss = no
			}
			scope:defender = {
				change_liege = {
					liege = scope:attacker
					change = scope:changev
				}
			}
			resolve_title_and_vassal_change = scope:changev
		}
		resolve_title_and_vassal_change = scope:change
		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
		# Shift dejure under Italia to the Ostrogoths
		#title:k_italy = {
		#	every_in_de_jure_hierarchy = {
		#		limit = {
		#			tier = tier_duchy
		#		}
		#		set_de_jure_liege_title = scope:attacker.primary_title
		#	}
		#}

		#scope:attacker = {
		#	imprison = {
		#		target = scope:defender
		#		type = house_arrest
		#	}
		#}
		if = {
			limit = {
				global_var:hildirix = {
					is_alive = yes
				}
			}
			global_var:hildirix ?= { release_from_prison = yes }
			global_var:hildirix ?= { remove_character_flag = is_being_tortured }
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_white_peace_desc_defender
			}
			desc = claim_cb_white_peace_desc
		}
		
	}

	on_white_peace = {
        #EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# press claims
		every_in_list = {
			list = target_titles
			if = {
				limit = { scope:claimant = { has_weak_claim_on = prev } }
				scope:claimant = {
					make_claim_strong = prev
				}
			}
		}
		# Prestige loss for the attacker
		scope:attacker = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}
		# Defender neither gains nor loses any prestige.
		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:claimant = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker
			}
			desc = claim_cb_defeat_desc
		}
		
	}

	on_defeat = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }

		title:c_mahdiya = {
			remove_county_modifier = roman_camps
		}
		title:c_tunis = {
			remove_county_modifier = surprise_attack
		}

		title:c_kran = {
			save_temporary_scope_as = current_county
		}
		create_title_and_vassal_change = {
			type = usurped
			save_scope_as = change
			add_claim_on_loss = no
		}
		scope:current_county = {
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = yes
			}
		}
		resolve_title_and_vassal_change = scope:change

		title:c_beroe = {
			save_temporary_scope_as = current_county
		}
		create_title_and_vassal_change = {
			type = usurped
			save_scope_as = change
			add_claim_on_loss = no
		}
		scope:current_county = {
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = yes
			}
		}
		resolve_title_and_vassal_change = scope:change

		title:c_burgas = {
			save_temporary_scope_as = current_county
		}
		create_title_and_vassal_change = {
			type = usurped
			save_scope_as = change
			add_claim_on_loss = no
		}
		scope:current_county = {
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = yes
			}
		}
		resolve_title_and_vassal_change = scope:change

		title:c_adrianopolis = {
			save_temporary_scope_as = current_county
		}
		create_title_and_vassal_change = {
			type = usurped
			save_scope_as = change
			add_claim_on_loss = no
		}
		scope:current_county = {
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = yes
			}
		}
		resolve_title_and_vassal_change = scope:change

		title:d_adrianopolis = {
			save_temporary_scope_as = current_county
		}
		create_title_and_vassal_change = {
			type = usurped
			save_scope_as = change
			add_claim_on_loss = no
		}
		scope:current_county = {
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = yes
			}
		}
		resolve_title_and_vassal_change = scope:change

		title:c_mahdiya = {
			save_temporary_scope_as = current_county
		}
		create_title_and_vassal_change = {
			type = usurped
			save_scope_as = change
			add_claim_on_loss = no
		}
		scope:current_county = {
			change_title_holder = {
				holder = scope:defender
				change = scope:change
				take_baronies = yes
			}
		}
		resolve_title_and_vassal_change = scope:change

		#title:e_byzantium.holder = {
		#	add_courtier = scope:attacker
		#}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Attacker pays gold to the defender as reparations.
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = VANDALIC_WAR_NAME
	war_name_base = VANDALIC_WAR_NAME_BASE
	cb_name = VANDALIC_CB_NAME
	interface_priority = 60

	attacker_score_from_battles_scale = 200                # War Score from battles won by the Attacker is modified by this value
    defender_score_from_battles_scale = 200                # War Score from battles won by the Defender is modified by this value
    max_attacker_score_from_battles = 100                # How much War Score the Attacker can gain from battles in total
    max_defender_score_from_battles = 100                # How much War Score the Defender can gain from battles in total

	max_defender_score_from_occupation = 50
	full_occupation_by_defender_gives_victory = no

	should_show_war_goal_subview = yes

	attacker_wargoal_percentage = 0.8

	max_ai_diplo_distance_to_title = 1000
}

independence_war_vandal = {
	icon = independence_faction_war
	group = event
	ai = no # AI targeting is handled through game_rule events.

	allow_hostages = no
	allowed_against_character = {
		OR = {
			scope:attacker = {
				liege = scope:defender
			}
			scope:attacker = {
				top_liege = scope:defender
			}
		}
	}

	cost = {
		piety = {
			value = 0
		}
		prestige = {
			value = 0
		}
	}

	on_declaration = {
		on_declared_war = yes
		# Remove offending HumSac modifiers.
		scope:attacker = {
			hidden_effect = { fp1_remove_humsac_offended_counties_effect = yes }
		}
		war = {
			every_war_attacker = {
				if = {
					limit = { 
						OR = {
							liege = title:k_africae.holder
							AND = {
								liege = {
									liege = scope:defender
								}
								NOT = {
									faith = liege.faith
								}
							}
						}
					}
					add_character_flag = should_become_independent
				}
			}
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { # Desc for only one player attacker
					scope:attacker = {
						is_local_player = yes
					}
				}
				desc = independence_war_victory_desc_local_player_attacker_alone
			}
			triggered_desc = { # Desc for only one attacker, player defender
				trigger = {
					scope:defender = {
						is_local_player = yes
					}
				}
				desc = player_independence_war_victory_desc_local_player_defender_attacker_alone
			}
			desc = independence_war_victory_desc_local_player_attacker_alone # Desc for a third party involved
		}

	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 Accolade glory gain from winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_med_effect = yes }

		create_title_and_vassal_change = {
			type = independency
			save_scope_as = change
		}
		if = {
			# Free character with the flag
			limit = { exists = war }
			war = {
				every_war_attacker = {
					if = {
						limit = { has_character_flag = should_become_independent }

						create_title_and_vassal_change = {
							type = independency
							save_scope_as = going_independent
							add_claim_on_loss = no
						}
						becomes_independent = {
							change = scope:going_independent
						}

						resolve_title_and_vassal_change = scope:going_independent

						add_truce_both_ways = {
							character = scope:defender
							days = 1825
							war = root.war
							result = victory
						}

						remove_character_flag = should_become_independent

						change_liege_or_become_independent = {
							CHANGE = scope:change
							VASSAL = this
						}

						hidden_effect = {
							set_variable = {
								name = independence_war_former_liege
								value = scope:defender
							}

							save_scope_as = current_member

							# Struggle Catalyst
							if = {
								limit = {
									catalyst_gave_independence_to_powerful_diff_faith_culture_vassal_preliminary_trigger = {
										CHAR1 = scope:defender
										CHAR2 = scope:current_member
									}
									any_character_struggle = {
										involvement = involved
										activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
											CATALYST = catalyst_gave_independence_to_powerful_diff_faith_culture_vassal
											CHAR = scope:current_member
										}
									}
								}
								every_character_struggle = {
									involvement = involved
									limit = {
										activate_struggle_catalyst_secondary_character_involvement_either_trigger = {
											CATALYST = catalyst_gave_independence_to_powerful_diff_faith_culture_vassal
											CHAR = scope:current_member
										}
									}
									activate_struggle_catalyst = {
										catalyst = catalyst_gave_independence_to_powerful_diff_faith_culture_vassal
										character = scope:defender
									}
								}
							}
						}
					}
				}
			}
		}

		scope:defender = {
			# Struggle Catalyst
			hidden_effect = {
				if = {
					limit = {
						catalyst_gave_independence_to_powerful_diff_faith_culture_vassal_preliminary_trigger = {
							CHAR1 = scope:defender
							CHAR2 = scope:attacker
						}
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_gave_independence_to_powerful_diff_faith_culture_vassal
								CHAR = scope:attacker
							}
						}
					}
					every_character_struggle = {
						involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_either_trigger = {
								CATALYST = catalyst_gave_independence_to_powerful_diff_faith_culture_vassal
								CHAR = scope:attacker
							}
						}
						activate_struggle_catalyst = {
								catalyst = catalyst_gave_independence_to_powerful_diff_faith_culture_vassal
								character = scope:defender
							}
					}
				}
			}
		}

		resolve_title_and_vassal_change = scope:change

	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = player_independence_war_white_peace_defender_desc
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
					}
				}
				desc = player_independence_war_white_peace_attacker_desc
			}
			desc = player_independence_war_white_peace_desc
		}

	}

	on_white_peace = {
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}
		hidden_effect = {
			scope:attacker = {
				add_truce_both_ways = {
					character = scope:defender
					days = 1825
					war = root.war
					result = white_peace
				}
			}
		}

		scope:defender = {
			add_prestige = minor_prestige_value
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = player_independence_defeat_defender_desc
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
					}
				}
				desc = player_independence_defeat_attacker_desc
			}
			desc = player_independence_war_defeat_desc
		}

	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:defender = {
			add_dread = medium_dread_gain
			# Prestige for Defender
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = medium_prestige_value
			}
		}

		if = {
			# Free character with the flag
			limit = { exists = war }
			war = {
				every_war_attacker = {
					save_scope_as = expelled_vandal
					if = {
						limit = { 
							has_character_flag = should_become_independent 
							NOT = { THIS = character:vandals_012 }
						}
						hard_imprison_character_effect = {
							TARGET = this
							IMPRISONER = scope:defender
						}
						scope:defender = {
							add_opinion = {
								target = prev
								modifier = vassal_lost_faction_revolt_war
							}
						}
					}
					if = {
						limit = {
							THIS = character:vandals_012
							title:c_cappadocia.holder = {
								is_ai = yes
							}
						}
						title:c_cappadocia = {
							save_temporary_scope_as = current_county
						}
						create_title_and_vassal_change = {
							type = usurped
							save_scope_as = change
							add_claim_on_loss = no
						}
						scope:current_county = {
							change_title_holder = {
								holder = character:vandals_012
								change = scope:change
								take_baronies = yes
							}
						}
						resolve_title_and_vassal_change = scope:change

						every_vassal = {
							add_to_list = vassals_to_defect
						}

						every_held_title = {
							limit = {
								NOT = { this = title:c_cappadocia }
							}
							add_to_list = titles_to_usurp
						}		

						create_title_and_vassal_change = {
							type = usurped
							save_scope_as = title_change
								add_claim_on_loss = no
						}
						every_in_list = {
							list = titles_to_usurp
							change_title_holder = {
								holder = title:k_africae.holder
								change = scope:title_change
								take_baronies = no
							}
						}
						every_in_list = {
							list = vassals_to_defect
							change_liege = {
								liege = title:k_africae.holder
								change = scope:title_change
							}
						}
						change_liege = {
							liege = title:k_africae.holder.top_liege
							change = scope:title_change
						}
						resolve_title_and_vassal_change = scope:title_change
						character:vandals_012 = {
							add_character_modifier = {
								modifier = peaceful_retirement
							}
							add_trait = content
							change_government = imperial_government
						}
					}
					else_if = {
						limit = {
							THIS = character:vandals_012
						}
						title:c_lower_galatia = {
							save_temporary_scope_as = current_county
						}
						create_title_and_vassal_change = {
							type = usurped
							save_scope_as = change
							add_claim_on_loss = no
						}
						scope:current_county = {
							change_title_holder = {
								holder = character:vandals_012
								change = scope:change
								take_baronies = yes
							}
						}
						resolve_title_and_vassal_change = scope:change

						every_vassal = {
							add_to_list = vassals_to_defect
						}

						every_held_title = {
							limit = {
								NOT = { this = title:c_lower_galatia }
							}
							add_to_list = titles_to_usurp
						}			
	
						create_title_and_vassal_change = {
							type = usurped
							save_scope_as = title_change
								add_claim_on_loss = no
						}
						every_in_list = {
							list = titles_to_usurp
							change_title_holder = {
								holder = title:k_africae.holder
								change = scope:title_change
								take_baronies = no
							}
						}
						every_in_list = {
							list = vassals_to_defect
							change_liege = {
								liege = title:k_africae.holder
								change = scope:title_change
							}
						}
						change_liege = {
							liege = title:k_africae.holder.top_liege
							change = scope:title_change
						}
						resolve_title_and_vassal_change = scope:title_change
						character:vandals_012 = {
							add_character_modifier = {
								modifier = peaceful_retirement
							}
							add_trait = content
							change_government = imperial_government
						}
					}
					if = {
						limit = {
							liege = title:k_africae.holder
							NOT = { THIS = character:vandals_012 }
						}
						save_scope_as = vandal_expel
						scope:defender.top_liege = {
							random_sub_realm_county = {
								limit = {
									kingdom = title:k_orientis
									holder = { 
										is_ai = yes
										realm_size > 1
										NOT = { 
											OR = {
												THIS = primary_title.title_capital_county
												THIS = primary_title.title_capital_county.de_jure_liege
											}
										}
									}
									NOT = {
										is_in_list = vandal_titles_to_usurp
									}
								}
								save_scope_as = county_expel
								add_to_list = vandal_titles_to_usurp

								#create_title_and_vassal_change = {
								#	type = usurped
								#	save_scope_as = change
								#	add_claim_on_loss = no
								#}
								#scope:county_expel = {
								#	change_title_holder = {
								#		holder = scope:expelled_vandal
								#		change = scope:change
								#		take_baronies = yes
								#	}
								#}
								#resolve_title_and_vassal_change = scope:change
							}
							scope:vandal_expel = {
								every_vassal = {
									add_to_list = vassals_to_defect
								}

								every_held_title = {
									limit = {
										NOT = { this = scope:county_expel }
									}
									add_to_list = titles_to_usurp
								}			
	
								create_title_and_vassal_change = {
									type = usurped
									save_scope_as = title_change
									add_claim_on_loss = no
								}
								every_in_list = {
									list = titles_to_usurp
									change_title_holder = {
										holder = title:k_africae.holder
										change = scope:title_change
										take_baronies = no
									}
								}
								every_in_list = {
									list = vassals_to_defect
									change_liege = {
										liege = title:k_africae.holder
										change = scope:title_change
									}
								}
								change_liege = {
									liege = title:k_africae.holder.top_liege
									change = scope:title_change
								}
								resolve_title_and_vassal_change = scope:title_change
							}
							if = {
								limit = {
									scope:vandal_expel = {
										is_landed = no
									}
									character:vandals_012 = {
										is_alive = yes
										is_landed = yes
									}
								}
								character:vandals_012 = {
									add_courtier = scope:vandal_expel
								}
							}
						}
					}
				}
			}
		}
		add_culture_minority_effect = {
			CULTURE = culture:vandal
			SIZE = small
			COUNTY = title:c_upper_khabur
		}
		add_culture_minority_effect = {
			CULTURE = culture:vandal
			SIZE = small
			COUNTY = title:c_amida
		}
		add_culture_minority_effect = {
			CULTURE = culture:vandal
			SIZE = small
			COUNTY = title:c_tall_basma
		}
	}

	on_invalidated_desc = msg_invalidate_war_title

	check_defender_inheritance_validity = no

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	transfer_behavior = transfer

	war_name = "INDEPENDENCE_WAR_NAME"

	interface_priority = 120

	attacker_wargoal_percentage = 0.8

	max_attacker_score_from_battles = 100
	max_defender_score_from_battles = 50
	
	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150

	max_ai_diplo_distance_to_title = 500
}

cb_gothic_wars_amalasuntha = {
	group = event
	#white_peace_possible = no 

	allowed_for_character = {
	}

	allowed_against_character = {
	}

	target_titles = none
	target_title_tier = all
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder
	ai_only_against_neighbors = yes

	valid_to_start = {
		always = no
	}

	should_invalidate = {
		scope:defender = {
			is_independent_ruler = no
		}
	}

	on_invalidated_desc = msg_religious_war_invalidation_region_message

	on_invalidated = {
	}

	cost = {
	}

	on_declaration = {
		on_declared_war = yes
		set_global_variable = {
			name = gothic_war_declared
			value = yes
		}
		scope:attacker = {
			spawn_army = {
				name = "Ostrogothic Defenders"
				levies = 750
				men_at_arms = {
					type = light_footmen
					stacks = 3
				}
				men_at_arms = {
					type = bowmen
					stacks = 2
				}
				men_at_arms = {
					type = light_horsemen
					stacks = 2
				}
				war = scope:war
				location = capital_province
			}
			every_vassal = {
				limit = {
					is_greek_or_roman = no
					is_ai = yes
				}
				save_scope_as = join_attacker
				scope:war = {
					add_attacker = scope:join_attacker
				}
			}
		}
	}

	#This is necessary for error log -- this should never happen
	on_white_peace_desc = {
		desc = cb_gothic_wars_amalasuntha_white_peace_desc
	}

	on_white_peace = {
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		#EP2 accolade glory gain for defender doing alright
		scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }

		# Defender neither gains nor loses any prestige.
		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		# Truce
		add_truce_white_peace_effect = yes
		if = {
			limit = {
				NOT = { exists = global_var:belisarius_betrayal_white_peace }
			}
		
		scope:attacker = {
			every_held_title = {
				limit = {
					tier = tier_county
					duchy = title:d_sicily
				}
				create_title_and_vassal_change = {
					type = granted
					save_scope_as = change
					add_claim_on_loss = no
				}
				change_title_holder_include_vassals = {
					holder = scope:defender
					change = scope:change
				}
				resolve_title_and_vassal_change = scope:change
			}
			every_vassal = {
				limit = {
					capital_county = {
						duchy = title:d_sicily
					}
				}
				create_title_and_vassal_change = {
					type = granted
					save_scope_as = change
					add_claim_on_loss = no
				}
				change_liege = {
					liege = scope:defender
					change = scope:change
				}
				resolve_title_and_vassal_change = scope:change
			}
		}

		if = {
			limit = {
				exists = title:e_byzantium.holder
				scope:defender = {
					NOT = { top_liege = title:e_byzantium.holder }
				}
			}
			create_title_and_vassal_change = {
				type = swear_fealty
				save_scope_as = change
				add_claim_on_loss = no
			}
			scope:defender = {
				change_liege = {
					liege = title:e_byzantium.holder
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
		}

		}

	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = cb_gothic_wars_amalasuntha_victory_desc_attacker
			}
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = cb_gothic_wars_amalasuntha_defeat_desc_defender
			}
			desc = cb_gothic_wars_amalasuntha_victory_desc
		}
	}

	on_victory = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		#scope:attacker = { destroy_title = title:k_thracian_goths }
		scope:attacker = { show_pow_release_message_effect = yes }
		
		scope:defender = {
			every_vassal = {
				add_to_list = vassals_to_defect
			}
		}

		scope:defender = {
			every_held_title = {
				add_to_list = titles_to_usurp
			}
		}

		create_title_and_vassal_change = {
			type = usurped
			save_scope_as = title_change
			add_claim_on_loss = no
		}
		every_in_list = {
			list = titles_to_usurp
			change_title_holder = {
				holder = scope:attacker
				change = scope:title_change
				take_baronies = no
			}
		}
		every_in_list = {
			list = vassals_to_defect
			change_liege = {
				liege = scope:attacker
				change = scope:title_change
			}
		}
		resolve_title_and_vassal_change = scope:title_change

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		scope:attacker = {
			imprison = {
				target = scope:defender
				type = house_arrest
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = cb_gothic_wars_amalasuntha_victory_desc_defender
			}
			triggered_desc = {
				trigger = {	scope:attacker = { is_local_player = yes } }
				desc = cb_gothic_wars_amalasuntha_defeat_desc_attacker
			}
			desc = cb_gothic_wars_amalasuntha_defeat_desc
		}
	}

	on_defeat = {
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		#scope:defender = { destroy_title = title:k_ostrogoths }
		scope:defender = { show_pow_release_message_effect = yes }
		
		scope:attacker = {
			every_vassal = {
				add_to_list = vassals_to_defect
			}
		}

		scope:attacker = {
			every_held_title = {
				add_to_list = titles_to_usurp
			}
		}

		create_title_and_vassal_change = {
			type = usurped
			save_scope_as = title_change
			add_claim_on_loss = no
		}
		every_in_list = {
			list = titles_to_usurp
			change_title_holder = {
				holder = scope:defender
				change = scope:title_change
				take_baronies = no
			}
		}
		every_in_list = {
			list = vassals_to_defect
			change_liege = {
				liege = scope:defender
				change = scope:title_change
			}
		}
		resolve_title_and_vassal_change = scope:title_change

		# Prestige Progress for the Defender
		every_in_list = {
			list = target_titles
			scope:defender = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		scope:defender = {
			imprison = {
				target = scope:attacker
				type = house_arrest
			}
		}

		if = {
			limit = {
				exists = title:e_byzantium.holder
				scope:defender = {
					NOT = { top_liege = title:e_byzantium.holder }
				}
			}
			create_title_and_vassal_change = {
				type = swear_fealty
				save_scope_as = change
				add_claim_on_loss = no
			}
			scope:defender = {
				change_liege = {
					liege = title:e_byzantium.holder
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			title:e_byzantium.holder = {
				trigger_event = {
					id = western_roman.0062
					days = 1
				}
			}
		}

		if = {
			limit = {
				exists = title:k_ostrogoths.holder
				scope:defender = title:k_ostrogoths.holder
			}
			scope:defender = { destroy_title = title:k_ostrogoths }
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:defender = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = cb_gothic_wars_amalasuntha_NAME
	war_name_base = cb_gothic_wars_amalasuntha_NAME_BASE
	cb_name = cb_gothic_wars_amalasuntha_NAME

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	attacker_score_from_battles_scale = 50                # War Score from battles won by the Attacker is modified by this value
    defender_score_from_battles_scale = 50                # War Score from battles won by the Defender is modified by this value
    max_attacker_score_from_battles = 100                # How much War Score the Attacker can gain from battles in total
    max_defender_score_from_battles = 50                # How much War Score the Defender can gain from battles in total
	attacker_score_from_occupation_scale = 25
	defender_score_from_occupation_scale = 25

	max_ai_diplo_distance_to_title = 500
}
