germanic_migration_cb = {
	group = migration

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		culture = {
			OR = {
				has_cultural_tradition = tradition_migrations
				AND = {
					exists = struggle:britannia_struggle
					struggle:britannia_struggle = {
						is_culture_involved_in_struggle = prev
						
					}
					NOT = {
						has_cultural_pillar = heritage_latin
					}
				}
			}
			NOT = { has_cultural_era_or_later = culture_era_early_medieval }
		}
		NOT = {
			has_character_flag = used_lifetime_migration
		}
		NOT = {
			AND = {
				culture = culture:frankish
				game_start_date = 532.2.1
				highest_held_title_tier >= tier_kingdom
			}
		}
		# is_ai = no
	}

	allowed_for_character_display_regardless = {
		# Ensure that this is only done every now and then.
		is_independent_ruler = yes
		highest_held_title_tier <= tier_kingdom
		trigger_if = {
			limit = { is_ai = no }
			prestige_level >= medium_prestige_level
		}
		trigger_else = { prestige_level >= medium_prestige_level }
		is_at_war = no
		#Doesn't work for some reason
		#is_in_an_activity = no
		is_available = yes
	}

	allowed_against_character = {
		# Cannot adventure against other adventuring cultures.
		is_independent_ruler = yes
		NOT = {
			culture = { has_cultural_tradition = tradition_migrations }
		}
		# Players vs. AI filtering.
		OR = {
			# Can always target the AI.
			is_ai = yes
			# Cannot target a player unless they completely control at least two duchies.
			any_sub_realm_duchy = {
				count >= 2
				save_temporary_scope_as = player_controlled_duchy
				# Custom description to suppress errors.
				custom_description = {
					text = SUPPRESS
					scope:defender = { completely_controls = scope:player_controlled_duchy }
				}
			}
		}

	}
	target_titles = all
	target_title_tier = duchy
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder

	valid_to_start = {
	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							target_is_same_character_or_above = scope:defender
						}
					}
				}
			}
			scope:attacker = {
				is_independent_ruler = no
			}
			
		}
	}

	on_invalidated_desc = msg_county_conquest_war_invalidated_message
	
	on_invalidated = {
		scope:attacker = {
			remove_character_flag = used_lifetime_migration
			remove_character_modifier = migration_leader
		}
	}

	ai_score_mult = {
		value = TFE_MIGRATION_AI_SCORE_MULT
	}

	cost = {
		piety = {
			if = { # Attacking your HoF is impious
				limit = {
					exists = scope:attacker.faith.religious_head
					scope:attacker.faith.religious_head = scope:defender
				}
				if = {
					limit = {
						scope:attacker.faith = {
							has_doctrine = doctrine_spiritual_head
						}
					}
					add = {
						value = massive_piety_value
						desc = CB_ATTACKER_HOF
					}
				}
				else = {
					add = {
						value = medium_piety_value
						desc = CB_ATTACKER_HOF
					}
				}
			}
			if = {
				limit = {
					scope:attacker.faith = scope:defender.faith
					scope:defender = {
						has_government = theocracy_government
					}
				}
				add = {
					value = medium_piety_value
					desc = CB_ATTACKER_THEOCRACY
				}
			}
			value = 0
			if = {
				limit = {
					scope:defender.faith = scope:attacker.faith
				}
				add = {
					value = massive_piety_value
					desc = CB_SAME_FAITH_COST
				}
			}
			if = {
				limit = {
					scope:attacker = { government_has_flag = government_is_tribal }
				}
				multiply = {
					value = 0.5
					desc = CB_TRIBAL_COST
				}
			}

			#Innovation Piety Discounts
			if = {
				limit = {
					scope:attacker = {
						culture = {
							has_innovation = innovation_reconquista
						}
					}
				}
				multiply = {
					value = 0.9
					desc = CB_RECONQUISTA_COST
				}
			}

			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Vassal contract in-realm cost reduction
			if = {
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_war_override
						liege = scope:defender.liege
					}
				}
				multiply = {
					value = war_declaration_rights_allowed_cost_reduction
					desc = "CB_ATTACKER_VASSAL_CONTRACT"
				}
			}

			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}

			if = {
				limit = {
					OR = {
						AND = {
							exists = struggle:britannia_struggle
							struggle:britannia_struggle = {
								AND = {
									has_struggle_phase_parameter = cheaper_migrations_within_struggle_region
									is_culture_involved_in_struggle = scope:attacker.culture
								}
							}
						}
					}
				}
				multiply = {
					value = 0.5
					desc = BRITANNIA_STRUGGLE
				}
			}

			# Because target_titles can't take triggers fsr
			if = {
				limit = {
					NOT = {
						scope:attacker.culture = {
							has_cultural_tradition = tradition_migrations
						}
					}
					any_in_list = {
						list = target_titles
						title_capital_county.title_province = {
							NOT = {
								geographical_region = world_europe_west_britannia
							}
						}
					}
				}
				add = {
					value = 100000
					desc = CANNOT_MIGRATE_OUTSIDE_STRUGGLE_REGION
				}
			}
		}
		prestige = {
			value = 0
			add = {
				value = 200
				desc = CB_BASE_COST
			}
			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Game Rules
			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}

			if = {
				limit = {
					OR = {
						scope:attacker ={
							any_character_struggle = {
								has_struggle_phase_parameter = cheaper_migrations_within_struggle_region
							}
						}
						AND = {
							exists = struggle:britannia_struggle
							struggle:britannia_struggle = {
								AND = {
									has_struggle_phase_parameter = cheaper_migrations_within_struggle_region
									is_culture_involved_in_struggle = scope:attacker.culture
								}
							}
						}
					}
				}
				multiply = {
					value = 0.5
					desc = BRITANNIA_STRUGGLE
				}
			}
			if = {
				limit = {
					NOT = {
						scope:attacker.culture = {
							has_cultural_tradition = tradition_migrations
						}
					}
					any_in_list = {
						list = target_titles
						title_capital_county.title_province = {
							NOT = {
								geographical_region = world_europe_west_britannia
							}
						}
					}
				}
				multiply = {
					add = 100000
					desc = CANNOT_MIGRATE_OUTSIDE_STRUGGLE_REGION
				}
			}
		}
	}

	on_declaration = {
		debug_log = "Migration started"
		on_declared_war = yes
		scope:attacker = {
			add_character_flag = used_lifetime_migration
		}
		# Dish out event troops, if appropriate.
		## We give out x200 troops per same-culture same-faith core mainland Scandinavian county, up to a maximum of ten counties.
		## These are evenly split between good MaA -> average MaA -> good MaA again, to give a decent bell curve.
		scope:attacker = {
			add_character_modifier = migration_leader
			if = {
				limit = {
					is_landed = yes
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = yes
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = no
				}
			}
			if = {
				limit = {
					is_landed = no
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.primary_title.title_capital_county.title_province
					uses_supply = no
					inheritable = yes
				}
			}
			if = {
				limit = {
					AND = {
						is_landed = yes
						migration_levies_value >= 3
						culture = {
							has_cultural_tradition = tradition_migrations
						}
					}
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = no
			}
			}
			if = {
				limit = {
					AND = {
						is_landed = yes
						migration_levies_value >= 10
						culture = {
							has_cultural_tradition = tradition_migrations
						}
					}
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = yes
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = no
				}
			}
			if = {
				limit = {
					AND = {
						exists = struggle:britannia_struggle
						migration_levies_value >= 10
						struggle:britannia_struggle = {
							has_struggle_phase_parameter = more_migration_armies
						}
						any_in_list = {
							list = target_titles
							title_capital_county.title_province = {
								geographical_region = world_europe_west_britannia
							}
						}
						culture = {
							has_cultural_tradition = tradition_migrations
						}
					}
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = yes
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = no
				}
			}
			if = {
				limit = {
					culture = {
						has_cultural_tradition = tradition_migrations
					}
					migration_levies_value >= 1
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = no
				}
			}
		}
		scope:defender.top_liege = {
			trigger_event = {
				id = migration.0001
				days = 10
			}
		}


		scope:attacker = {
			set_variable = {
				name = culture_province
				value = 5
			}
			every_realm_county = {
				limit = {
					culture = scope:attacker.culture				
				}
				scope:attacker = {
					change_variable = {
						name = culture_province
						add = 1
					}
				}
			}
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = { is_local_player = yes }
				}
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
		triggered_desc = {
			trigger = { scope:attacker = { is_local_player = yes } }
			desc = migration_war_warning_desc
		}
	}

	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		# Organise general results for the attacker.
		scope:attacker = {
			set_variable = {
				name = culture_province
				value = 5
			}
			every_realm_county = {
				limit = {
					culture = scope:attacker.culture				
				}
				scope:attacker = {
					change_variable = {
						name = culture_province
						add = 1
					}
				}
			}
			# Set up titles in the new colony.
			## First up, hand over counties in the target duchy to scope:attacker.
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}
			every_in_list = {
				list = target_titles
				custom_tooltip = CONQUEST_CB_TITLE
				every_in_de_jure_hierarchy = {
					continue = {
						OR = {
							NOT = {
								exists = holder
							}
							NOT = {
								holder = {
									target_is_liege_or_above = scope:defender
								}
							}
							AND = {
								scope:attacker.faith = {
									faith_hostility_level_comparison = {
										prev.holder.faith <= scope:defender.faith
									}
								}
								holder = {
									OR = {
										this = scope:defender
										target_is_liege_or_above = scope:defender
									}
								}
							}
						}
						tier > tier_county
					}
					limit = {
						tier = tier_county
						exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
					if = {
						limit = {
							OR = {
								scope:attacker.faith = {
									faith_hostility_level_comparison = { prev.holder.faith >= scope:defender.faith }
								}
								holder.primary_title.tier >= scope:attacker.primary_title.tier
							}
						}
						add_to_temporary_list = titles_taken
					}
					else = {
						holder = { add_to_temporary_list = vassals_taken }
					}
				}
			}
			every_in_list = {
				list = titles_taken
				change_title_holder = {
					holder = scope:attacker
					change = scope:change
					take_baronies = yes
				}
			}
			custom_tooltip = MIGRATION_TOOLTIP
			hidden_effect = {
				if = {
					limit = {
						scope:attacker = {
							has_variable = culture_province
						}
					}
					while = {
						count = scope:attacker.var:culture_province
						random_in_list = {
							list = titles_taken
							random_in_de_jure_hierarchy = {
								limit = {
									tier = tier_county
								}
								set_county_culture = scope:attacker.culture
								set_county_faith = scope:attacker.faith
							}
						}
					}
				}
			}
			every_in_list = {
				list = vassals_taken
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			## Grab the appropriate duchy for future independence checks.
			random_in_list = {
				list = target_titles
				limit = { tier = tier_duchy }
				save_scope_as = target_duchy
			}
			## Next, if the appropriate duchy doesn't already exist, create it.
			if = {
				limit = {
					any_in_list = {
						list = target_titles
						tier = tier_duchy
						is_title_created = no
					}
				}
				random_in_list = {
					list = target_titles
					limit = { tier = tier_duchy }
					save_scope_as = new_duchy
				}
				create_title_and_vassal_change = {
					type = created
					save_scope_as = change
					add_claim_on_loss = no
				}
				scope:new_duchy = {
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## Else if it does & is a part of scope:defender's sub-realm, usurp it.
			else_if = {
				limit = {
					any_in_list = {
						list = target_titles
						tier = tier_duchy
						holder = {
							OR = {
								this = scope:defender
								any_liege_or_above = { this = scope:defender }
							}
						}
					}
				}
				random_in_list = {
					list = target_titles
					# No need to check all triggers, since there'll only ever be one duchy in the list.
					limit = { tier = tier_duchy }
					save_scope_as = new_duchy
				}
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = yes
				}
				scope:new_duchy = {
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## Else we want a titular duchy.
			else = {
				# To keep tooltips neat, show the core duchy as transferring (preventing a messy "unlanded of" from appearing).
				show_as_tooltip = {
					random_in_list = {
					list = target_titles
						limit = { tier = tier_duchy }
						save_scope_as = new_duchy
					}
					create_title_and_vassal_change = {
						type = created
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:new_duchy = {
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
				# Actual transfer.
				hidden_effect = {
					# Randomising the names a little.
					random_list = {
						25 = {
							create_dynamic_title = {
								tier = duchy
								name = VIKING_STATE_TITLE_NAME
							}
						}
						25 = {
							create_dynamic_title = {
								tier = duchy
								name = NORDIC_STATE_TITLE_NAME
							}
						}
						25 = {
							trigger = {
								any_in_list = {
									list = target_titles
									tier = tier_county
									title_province = {
										geographical_region = world_europe_south_east
										geographical_region = world_europe_east
										geographical_region = world_asia_minor
									}
								}
							}
							create_dynamic_title = {
								tier = duchy
								name = VARYAG_STATE_TITLE_NAME
							}
						}
						25 = {
							create_dynamic_title = {
								tier = duchy
								name = NORSE_STATE_TITLE_NAME
							}
						}
					}
					create_title_and_vassal_change = {
						type = created
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:new_title = {
						set_delete_on_destroy = yes
						set_no_automatic_claims = yes
						set_can_be_named_after_dynasty = no
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
						save_scope_as = new_duchy
					}
					resolve_title_and_vassal_change = scope:change
					# Generate a new CoA
					## We do this in a separate block so that the effect has time to see that the title has a holder, since it'll error otherwise.
					scope:new_title = { generate_coa = yes }
				}
			}
			## Set a new capital.
			### We prefer the de jure capital of the other.
			if = {
				limit = {
					any_in_list = {
						list = target_titles
						this = duchy.title_capital_county
					}
				}
				random_in_list = {
					list = target_titles
					limit = { this = duchy.title_capital_county }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			### Otherwise, tribals go by pure levy count.
			else_if = {
				limit = {
					scope:attacker = { government_has_flag = government_is_tribal }
				}
				ordered_in_list = {
					list = target_titles
					limit = { tier = tier_county }
					order_by = total_county_levies
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			### Everyone else prefers the highest development.
			else = {
				ordered_in_list = {
					list = target_titles
					limit = { tier = tier_county }
					order_by = { add = development_level }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			# Then re-order stuff in the Old Country.
			## First, we destroy any other ducal titles scope:attacker holds (excepting HoF titles).
			if = {
				limit = {
					any_held_title = {
						tier = tier_kingdom
						NOR = {
							this = title:k_anglia
							this = title:k_juteland
							this = title:k_visigoths
							this = title:k_varini
							this = title:k_thuringians
							this = title:k_rhinefranks
							this = title:k_quadi
							this = title:k_marcomanni
							this = title:k_alani
							this = title:k_hasding_vandals
							this = title:k_siling_vandals
							this = title:k_franks
							this = title:k_gepids
							this = title:k_vandals
							this = title:k_burgundia
							this = title:k_lombardia
							this = title:k_suebi
							this = title:k_vandals
							this = scope:new_duchy
							is_head_of_faith = yes
						}
					}
				}
				every_held_title = {
					limit = {
						tier = tier_duchy
						NOR = {
							this = scope:new_duchy
							is_head_of_faith = yes
						}
					}
					save_temporary_scope_as = excess_duchy
					scope:attacker = { destroy_title = scope:excess_duchy }
				}
			}
			## Sort out vassalised family.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.family_transfer
			every_vassal_or_below = {
				limit = { dynasty = scope:attacker.dynasty }
				add_to_list = vassalised_family_list
			}
			every_held_title = {
				limit = {
					tier = tier_county
					duchy = { is_in_list = target_titles }
				}
				add_to_list = spare_counties_list
			}
			## If there are any to account for, we bring over other landed family members from the Old Country & try to give them counties in the colony.
			if = {
				limit = {
					any_in_list = {
						list = vassalised_family_list
						count >= 1
					}
				}
				# Then iterate through the family members, dishing out titles as appropriate.
				every_in_list = {
					list = vassalised_family_list
					# Players first.
					limit = { is_ai = no }
					# Then NPCs, prioritising counts.
					alternative_limit = { highest_held_title_tier = tier_county }
					# We don't process barons, they can just go landless.
					# Grab the currently affected vassal.
					save_temporary_scope_as = receiving_vassal
					# Then, if there's anything in that list, look at handing out titles.
					if = {
						limit = {
							any_in_list = {
								list = spare_counties_list
								NOT = { this = scope:attacker.capital_county }
								holder = scope:attacker
							}
						}
						random_in_list = {
							list = spare_counties_list
							limit = {
								NOT = { this = scope:attacker.capital_county }
								tier = tier_county
								holder = scope:attacker
							}
							save_temporary_scope_as = spare_county
							create_title_and_vassal_change = {
								type = granted
								save_scope_as = change
								add_claim_on_loss = no
							}
							scope:spare_county = {
								change_title_holder = {
									holder = scope:receiving_vassal
									change = scope:change
								}
							}
							resolve_title_and_vassal_change = scope:change
						}
						# And add them to the post-processing list so we can divy out their lands elsewhere.
						add_to_list = vassal_family_processed_list
					}
					# Otherwise, we're going to have to do something special with this character, so take note of them for later.
					else = { add_to_list = vassal_family_not_processed_list }
				}
			}
			## Distribute scope:attacker's old domains to peasant vassals of the local culture/faith.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.old_domains
			every_held_title = {
				limit = {
					tier = tier_county
					duchy = {
						NOT = { this = scope:target_duchy 
								this = title:k_juteland
								this = title:k_visigoths
								this = title:k_anglia
							}
					}
				}
				# Grab the county for ease of reference.
				save_temporary_scope_as = current_county
				# Create an elevated peasant to claim the county.
				create_character = {
					location = scope:current_county.title_province
					template = old_country_local_warlord_template
					save_temporary_scope_as = local_warlord
				}
				# Assign the seceding title to the new upstart.
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					scope:current_county = {
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
				# And give them their independence.
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					scope:local_warlord = {
						becomes_independent = { change = scope:change }
						save_scope_as = truce_loc
						add_truce_both_ways = {
							character = scope:attacker
							days = 14600
							name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## Distribute landed family's domains outside of the colony to peasant vassals of the local culture/faith.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.landed_family_old_domains
			every_in_list = {
				list = vassal_family_processed_list
				every_held_title = {
					limit = {
						tier = tier_county
						duchy = {
							NOT = { this = scope:target_duchy }
						}
					}
					# Grab the county for ease of reference.
					save_temporary_scope_as = current_county
					# Create an elevated peasant to claim the county.
					create_character = {
						location = scope:current_county.title_province
						template = old_country_local_warlord_template
						save_temporary_scope_as = local_warlord
					}
					# Assign the seceding title to the new upstart.
					create_title_and_vassal_change = {
						type = usurped
						save_scope_as = change
						add_claim_on_loss = no
					}
					hidden_effect = {
						scope:current_county = {
							change_title_holder = {
								holder = scope:local_warlord
								change = scope:change
								take_baronies = yes
							}
						}
					}
					resolve_title_and_vassal_change = scope:change
					# And give them their independence.
					create_title_and_vassal_change = {
						type = independency
						save_scope_as = change
						add_claim_on_loss = no
					}
					hidden_effect = {
						scope:local_warlord = {
							becomes_independent = { change = scope:change }
							save_scope_as = truce_loc
							add_truce_both_ways = {
								character = scope:attacker
								days = 14600
								name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
							}
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			## Give all old vassals outside of the target_titles independence.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.old_vassals
			every_vassal = {
				limit = {
					NOT = {
						any_held_title = { duchy = scope:target_duchy }
					}
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					becomes_independent = { change = scope:change }
					save_scope_as = truce_loc
					add_truce_both_ways = {
						character = scope:attacker
						days = 14600
						name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			# Sort the governance of the colony.
			## Adjusting the government type as appropriate.
			# Conquering tribes makes you tribal.
			if = {
				limit = {
					capital_province = { has_holding_type = tribal_holding }
					NOT = { government_has_flag = government_is_tribal }
				}
				# Change government to tribal.
				change_government = tribal_government
			}
			# Conquering elsewhere as a tribal makes you feudal.
			else_if = {
				limit = {
					NOT = {
						capital_province = { has_holding_type = tribal_holding }
					}
					# Might have turned theocratic before from gaining a new capital holding
					#government_has_flag = government_is_tribal
				}
				# Change government to feudal.
				if = {
					limit = {
						capital_province = { has_holding_type = estate_holding }
					}
					change_government = roman_government
				}
				else = {
					change_government = feudal_government
				}
			}
			## Seizing control so things *vaguely* work.
			scope:attacker = { trigger_event = fp1_varangian_adventures.0001 }
			## And giving them a gold bounty to keep them afloat.
			scope:attacker = { add_gold = varangian_adventures_bounty_amount_value }
			# Finally, general cleanup.
			## Move any remaining newly-landless family to scope:attacker's court.
			every_in_list = {
				list = vassal_family_not_processed_list
				limit = { is_ruler = no }
				save_temporary_scope_as = landless_family
				scope:attacker = { add_courtier = scope:landless_family }
			}
			## If scope:attacker wasn't an adventurer before, make them one.
			if = {
				limit = {
					NOT = { has_trait = adventurer }
				}
				add_trait = adventurer
			}
			## Increment their Varangian Adventurer CB tally.
			if = {
				limit = {
					NOT = { has_variable = va_cb_tally }
				}
				set_variable = {
					name = va_cb_tally
					# We set to two initially, since the first war cost prestige already, so we want to pretend you had a value of 1 the first time around.
					value = 2
				}
			}
			else = {
				change_variable = {
					name = va_cb_tally
					add = 1
				}
			}
			# Aaaaaand track the A Dangerous Business achievement.
			if = {
				limit = { has_trait = dwarf }
				add_character_flag = a_dangerous_business_achievement_flag
			}

			if = {
				limit = {
					any_realm_county = {
						NOT = {
							culture = scope:attacker.culture
						}
					}
				}
				random_list = {
					5 = {
						trigger_event = {
							id = migration.0005
							days = {30 50}
						}
					}
					10 = {
						trigger_event = {
							id = migration.0006
							days = {30 50}
						}
					}
					10 = {
						trigger_event = {
							id = migration.0007
							days = {30 50}
						}
					}
					5 = {
						trigger_event = {
							id = migration.0008
							days = {30 50}
						}
					}
				}
			}
		}

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		#if = {
	#		limit = {
	#			scope:attacker.primary_title = {
	#				tier = tier_kingdom
	#				is_landless_type_title = yes
	#			}
	#		}
	#		every_in_list = {
	#			list = target_titles
	#			limit = { tier = tier_duchy }
	#			
	#			set_de_jure_liege_title = scope:attacker.primary_title
	#		}
	#	}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}
		
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		setup_invasion_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			change = scope:change
			take_occupied = yes
		}
		resolve_title_and_vassal_change = scope:change

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}

	on_white_peace = {
        #EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
			remove_character_modifier = migration_leader
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}

	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold = {
				gold = 3
				target = scope:defender
				yearly_income = yes
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
			remove_character_modifier = migration_leader
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige = major_prestige_value
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}

		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = MIGRATION_WAR_NAME
	war_name_base = MIGRATION_WAR_NAME_BASE
	cb_name = MIGRATION_NAME_CB

	interface_priority = 100
}

nomadic_migration_cb = {
	group = migration
	
	allowed_for_character = { 
		NOT = {
			has_character_flag = used_lifetime_migration
		}
		AND = {
			culture = {
				has_cultural_tradition = tradition_nomadic_migrations
			}
			government_has_flag = government_is_nomadic
		}
	}
	allowed_for_character_display_regardless = {
		# Ensure that this is only done every now and then.
		is_independent_ruler = yes
		highest_held_title_tier <= tier_kingdom
		trigger_if = {
			limit = { is_ai = no }
			prestige_level >= medium_prestige_level
		}
		trigger_else = { prestige_level >= medium_prestige_level }
		is_at_war = no
		#is_in_an_activity = no
		is_available = yes
	}
	target_titles = all
	target_title_tier = kingdom
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder
	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	cost = {
		piety = {
			if = { # Attacking your HoF is impious
				limit = {
					exists = scope:attacker.faith.religious_head
					scope:attacker.faith.religious_head = scope:defender
				}
				if = {
					limit = {
						scope:attacker.faith = {
							has_doctrine = doctrine_spiritual_head
						}
					}
					add = {
						value = massive_piety_value
						desc = CB_ATTACKER_HOF
					}
				}
				else = {
					add = {
						value = medium_piety_value
						desc = CB_ATTACKER_HOF
					}
				}
			}
			if = {
				limit = {
					scope:attacker.faith = scope:defender.faith
					scope:defender = {
						has_government = theocracy_government
					}
				}
				add = {
					value = medium_piety_value
					desc = CB_ATTACKER_THEOCRACY
				}
			}
			value = 0
			if = {
				limit = {
					scope:defender.faith = scope:attacker.faith
				}
				add = {
					value = massive_piety_value
					desc = CB_SAME_FAITH_COST
				}
			}
			if = {
				limit = {
					scope:attacker = { government_has_flag = government_is_tribal }
				}
				multiply = {
					value = 0.5
					desc = CB_TRIBAL_COST
				}
			}

			#Innovation Piety Discounts
			if = {
				limit = {
					scope:attacker = {
						culture = {
							has_innovation = innovation_reconquista
						}
					}
				}
				multiply = {
					value = 0.9
					desc = CB_RECONQUISTA_COST
				}
			}

			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Vassal contract in-realm cost reduction
			if = {
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_war_override
						liege = scope:defender.liege
					}
				}
				multiply = {
					value = war_declaration_rights_allowed_cost_reduction
					desc = "CB_ATTACKER_VASSAL_CONTRACT"
				}
			}
			if = {
				limit = {
					OR = {
						AND = {
							exists = struggle:north_indian_struggle
							struggle:north_indian_struggle = {
								AND = {
									has_struggle_phase_parameter = cheaper_nomadic_migrations
									is_culture_involved_in_struggle = scope:attacker.culture
								}
							}
						}
					}
				}
				multiply = {
					value = 0.5
					desc = INDIAN_STRUGGLE
				}
			}

			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}
		}
		prestige = {
			value = 1000
			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Game Rules
			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}
			if = {
				limit = {
					AND = {
						exists = struggle:eastern_iranian_struggle
						struggle:eastern_iranian_struggle = {
							AND = {
								has_struggle_phase_parameter = cheaper_nomadic_migrations_within_struggle_region
								is_culture_involved_in_struggle = scope:attacker.culture
							}
						}
					}
				}
				multiply = {
					value = 0.5
					desc = EASTERN_IRANIAN_STRUGGLE
				}
			}
			if = {
				limit = {
					OR = {
						AND = {
							exists = struggle:north_indian_struggle
							struggle:north_indian_struggle = {
								AND = {
									has_struggle_phase_parameter = cheaper_nomadic_migrations
									is_culture_involved_in_struggle = scope:attacker.culture
								}
							}
						}
					}
				}
				multiply = {
					value = 0.5
					desc = INDIAN_STRUGGLE
				}
			}
		}
	}


	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier = tier_county
					holder = {
						target_is_same_character_or_above = scope:defender
					}
				}
			}
		}
		#Emperors do not deign to migrate. Plus it'll mess up title destruction.
		scope:attacker = { highest_held_title_tier >= tier_empire }
	}

	on_invalidated = {
		scope:attacker = {
			remove_character_flag = used_lifetime_migration
		}
	}

	on_invalidated_desc = msg_invasion_war_invalidated_message
	
	on_declaration = {
		scope:attacker = {
			add_character_flag = used_lifetime_migration
		}
		on_declared_war = yes
		scope:attacker = {
			spawn_army = {
				name = event_troop_default_name
				levies = migration_army_levies_medium
				men_at_arms = {
					type = light_horsemen
					stacks = migration_army_maa_medium
				}
				men_at_arms = {
					type = horse_archers
					stacks = migration_army_maa_medium
				}
				location = scope:attacker.capital_province
				uses_supply = no
				inheritable = yes
			}
			spawn_army = {
				name = event_troop_default_name
				levies = migration_army_levies_medium
				men_at_arms = {
					type = horse_archers
					stacks = migration_army_maa_medium
				}
				men_at_arms = {
					type = light_horsemen
					stacks = migration_army_maa_medium
				}
				location = scope:attacker.capital_province
				uses_supply = no
				inheritable = no
			}

			if = {
				limit = {
					OR = {
						AND = {
							exists = struggle:eastern_iranian_struggle
							migration_levies_value >= 10
							struggle:eastern_iranian_struggle = {
								has_struggle_phase_parameter = more_nomadic_migration_armies
							}
							any_in_list = {
								list = target_titles
								title_capital_county.title_province = {
									geographical_region = TFE_eastern_iranian_struggle_region
								}
							}
							has_cultural_tradition = tradition_nomadic_migrations
						}
						AND = {
							exists = struggle:north_indian_struggle
							migration_levies_value >= 10
							struggle:north_indian_struggle = {
								has_struggle_phase_parameter = more_nomadic_migration_armies
							}
							any_in_list = {
								list = target_titles
								title_capital_county.title_province = {
									geographical_region = TFE_north_indian_struggle_region
								}
							}
							has_cultural_tradition = tradition_nomadic_migrations
						}
					}
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = yes
				}
			}
		}

		scope:attacker = {
			set_variable = {
				name = culture_province
				value = 5
			}
			every_realm_county = {
				limit = {
					culture = scope:attacker.culture				
				}
				scope:attacker = {
					change_variable = {
						name = culture_province
						add = 1
					}
				}
			}
		}
	}	

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = { is_local_player = yes }
				}
				desc = nomadic_war_victory_desc_attacker
			}
			desc = nomadic_war_victory_desc
		}
		triggered_desc = {
			trigger = {
				scope:attacker = { is_local_player = yes }
			}
			desc = nomadic_invasion_war_warning_desc
		}
	}
	
	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = {
			set_variable = {
				name = culture_province
				value = 5
			}
			every_realm_county = {
				limit = {
					culture = scope:attacker.culture				
				}
				scope:attacker = {
					change_variable = {
						name = culture_province
						add = 1
					}
				}
			}
		}


		scope:attacker = {
			every_held_title = {
				limit = {
					tier = tier_county
				}
				save_temporary_scope_as = current_county
				create_character = {
					location = scope:current_county.title_province
					template = old_country_local_warlord_template
					save_temporary_scope_as = local_warlord
				}
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					scope:current_county = {
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				resolve_title_and_vassal_change = scope:change
			}

			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}
			every_in_list = {
				list = target_titles
				custom_tooltip = CONQUEST_CB_TITLE
				every_in_de_jure_hierarchy = {
					continue = {
						OR = {
							NOT = {
								exists = holder
							}
							NOT = {
								holder = {
									target_is_liege_or_above = scope:defender
								}
							}
							AND = {
								scope:attacker.faith = {
									faith_hostility_level_comparison = {
										prev.holder.faith <= scope:defender.faith
									}
								}
								holder = {
									OR = {
										this = scope:defender
										target_is_liege_or_above = scope:defender
									}
								}
							}
						}
						tier > tier_county
					}
					limit = {
						tier = tier_county
						exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
					if = {
						limit = {
							OR = {
								scope:attacker.faith = {
									faith_hostility_level_comparison = { prev.holder.faith >= scope:defender.faith }
								}
								holder.primary_title.tier >= scope:attacker.primary_title.tier
							}
						}
						add_to_temporary_list = titles_taken
					}
					else = {
						holder = { add_to_temporary_list = vassals_taken }
					}
				}
			}
			every_in_list = {
				list = titles_taken
				change_title_holder = {
					holder = scope:attacker
					change = scope:change
					take_baronies = yes
				}
			}
			every_in_list = {
				list = vassals_taken
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			scope:attacker = {
				capital_county = {
					save_scope_as = old_capital
				}
			}
			if = {
				limit = {
					any_in_list = {
						list = target_titles
						this = duchy.title_capital_county
					}
				}
				random_in_list = {
					list = target_titles
					limit = { this = duchy.title_capital_county }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			scope:old_capital = {
				save_temporary_scope_as = current_county
				create_character = {
					location = scope:current_county.title_province
					template = old_country_local_warlord_template
					save_temporary_scope_as = local_warlord
				}
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					scope:current_county = {
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				resolve_title_and_vassal_change = scope:change
			}

			scope:attacker = {
				every_in_list = {
					list = target_titles
					every_in_de_jure_hierarchy = {
						limit = {
							tier = tier_kingdom
						}
						save_scope_as = kingdom_title
					}
				}
				hidden_effect = {
					nomadic_migration_effect = { 
						INVADER = scope:attacker 
						TITLE_TARGET = scope:kingdom_title
					}
				}
				custom_tooltip = MIGRATION_TOOLTIP
				hidden_effect = {
					while = {
						count = var:culture_province
						random_in_list = {
							list = titles_taken
							random_in_de_jure_hierarchy = {
								limit = {
									tier = tier_county
								}
								set_county_culture = scope:attacker.culture
								set_county_faith = scope:attacker.faith
							}
						}
					}

					create_title_and_vassal_change = {
						type = independency
						save_scope_as = change
						add_claim_on_loss = no
					}
					becomes_independent = { change = scope:change }
					resolve_title_and_vassal_change = scope:change
				}
			}
		}


		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		setup_invasion_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			change = scope:change
			take_occupied = yes
		}
		resolve_title_and_vassal_change = scope:change
	
		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_invasion_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_victory_effect = yes
		scope:attacker = {
			trigger_event = {
				id = migration.0016
				days = 10
			}
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}
	
	on_white_peace = {
        #EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}
	
	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold = {
				gold = 3
				target = scope:defender
				yearly_income = yes
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige = major_prestige_value
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}

		on_lost_aggression_war_discontent_loss = yes
	}
	
	transfer_behavior = transfer
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	transfer_behavior = transfer
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	ai_score_mult = {
		value = TFE_NOMADIC_AI_SCORE_MULT
	}
	
	war_name = NOMADIC_MIGRATION_WAR_NAME
	war_name_base = NOMADIC_MIGRATION_WAR_NAME_BASE
	cb_name = NOMADIC_MIGRATION_CB_NAME
	
	interface_priority = 100

}

germanic_mass_migration_cb = {
	group = migration

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		culture = {
			has_cultural_tradition = tradition_migrations
			NOT = { has_cultural_era_or_later = culture_era_high_medieval }
			culture_head = scope:attacker
		}
		NOT = {
			has_character_flag = used_lifetime_migration
		}
		is_independent_ruler = yes
		# is_ai = no
		NOT = {
			AND = {
				culture = culture:frankish
				game_start_date = 532.2.1
				highest_held_title_tier >= tier_kingdom
			}
		}
	}

	allowed_for_character_display_regardless = {
		# Ensure that this is only done every now and then.
		is_independent_ruler = yes
		highest_held_title_tier <= tier_kingdom
		trigger_if = {
			limit = { is_ai = no }
			prestige_level >= 3
		}
		trigger_else = { prestige_level >= 2 }
		is_at_war = no
		#is_in_an_activity = no
		is_available = yes
	}

	allowed_against_character = {
		trigger_if = {
			limit = {
				scope:attacker = {
					is_ai = yes
				}
			}
			NOT = {
				culture = { has_cultural_tradition = tradition_migrations }
			}
		}
		# Players vs. AI filtering.
		OR = {
			# Can always target the AI.
			is_ai = yes
			# Cannot target a player unless they completely control at least two duchies.
			any_sub_realm_duchy = {
				count >= 2
				save_temporary_scope_as = player_controlled_duchy
				# Custom description to suppress errors.
				custom_description = {
					text = SUPPRESS
					scope:defender = { completely_controls = scope:player_controlled_duchy }
				}
			}
		}

	}
	target_titles = all
	target_title_tier = kingdom
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder

	ai_can_target_all_titles = { always = yes }

	valid_to_start = {
	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							target_is_same_character_or_above = scope:defender
						}
					}
				}
			}
			scope:attacker = {
				is_independent_ruler = no
			}
			
		}
	}

	on_invalidated_desc = msg_county_conquest_war_invalidated_message
	
	on_invalidated = {
		scope:attacker = {
			remove_character_flag = used_lifetime_migration
		}
	}

	ai_score_mult = {
		value = TFE_MIGRATION_AI_SCORE_MULT
	}

	cost = {
		piety = {
			if = { # Attacking your HoF is impious
				limit = {
					exists = scope:attacker.faith.religious_head
					scope:attacker.faith.religious_head = scope:defender
				}
				if = {
					limit = {
						scope:attacker.faith = {
							has_doctrine = doctrine_spiritual_head
						}
					}
					add = {
						value = massive_piety_value
						desc = CB_ATTACKER_HOF
					}
				}
				else = {
					add = {
						value = medium_piety_value
						desc = CB_ATTACKER_HOF
					}
				}
			}
			if = {
				limit = {
					scope:attacker.faith = scope:defender.faith
					scope:defender = {
						has_government = theocracy_government
					}
				}
				add = {
					value = medium_piety_value
					desc = CB_ATTACKER_THEOCRACY
				}
			}
			value = 0
			if = {
				limit = {
					scope:defender.faith = scope:attacker.faith
				}
				add = {
					value = massive_piety_value
					desc = CB_SAME_FAITH_COST
				}
			}
			if = {
				limit = {
					scope:attacker = { government_has_flag = government_is_tribal }
				}
				multiply = {
					value = 0.5
					desc = CB_TRIBAL_COST
				}
			}

			#Innovation Piety Discounts
			if = {
				limit = {
					scope:attacker = {
						culture = {
							has_innovation = innovation_reconquista
						}
					}
				}
				multiply = {
					value = 0.9
					desc = CB_RECONQUISTA_COST
				}
			}

			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Vassal contract in-realm cost reduction
			if = {
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_war_override
						liege = scope:defender.liege
					}
				}
				multiply = {
					value = war_declaration_rights_allowed_cost_reduction
					desc = "CB_ATTACKER_VASSAL_CONTRACT"
				}
			}

			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}
		}
		prestige = {
			value = 1000
			# Bellum Justum Perk
			if = {
				limit = {
					scope:attacker = {
						has_perk = bellum_justum_perk
					}
				}
				multiply = {
					add = bellum_justum_discount_percentage
					divide = 100
					desc = CB_ATTACKER_BELLUM_JUSTUM
				}
			}

			# Dynasty Warfare Perk
			if = {
				limit = {
					scope:attacker = {
						has_dynasty = yes
						dynasty = {
							has_dynasty_perk = warfare_legacy_2
						}
					}
				}
				multiply = {
					value = warfare_legacy_2_discount
					desc = CB_ATTACKER_DYNASTY_WARFARE
				}
			}

			# Game Rules
			if = {
				limit = {
					has_game_rule = no_cost_casus_belli_costs
				}
				multiply = {
					value = 0
					desc = CB_GAME_RULE_NO_COST
				}
			}
		}
	}

	on_declaration = {
		on_declared_war = yes
		scope:attacker = {
			add_character_flag = used_lifetime_migration
		}
		# Dish out event troops, if appropriate.
		## We give out x200 troops per same-culture same-faith core mainland Scandinavian county, up to a maximum of ten counties.
		## These are evenly split between good MaA -> average MaA -> good MaA again, to give a decent bell curve.
		scope:attacker = {
			spawn_army = {
				name = event_troop_default_name
				levies = 3000
				men_at_arms = {
					type = light_horsemen
					stacks = migration_army_maa_medium
				}
				men_at_arms = {
					type = light_footmen
					stacks = migration_army_maa_medium
				}
				location = scope:attacker.capital_province
				uses_supply = no
				inheritable = yes
			}
			spawn_army = {
				name = event_troop_default_name
				levies = migration_army_levies_medium
				men_at_arms = {
					type = light_horsemen
					stacks = migration_army_maa_small
				}
				men_at_arms = {
					type = light_footmen
					stacks = migration_army_maa_small
				}

				location = scope:attacker.capital_province
				uses_supply = no
				inheritable = no
			}
		}


		scope:attacker = {
			set_variable = {
				name = culture_province
				value = 5
			}
			every_realm_county = {
				limit = {
					culture = scope:attacker.culture				
				}
				scope:attacker = {
					change_variable = {
						name = culture_province
						add = 1
					}
				}
			}
			every_vassal = {
				limit = {
					culture = scope:attacker.culture
				}
				trigger_event = migration.0015
			}
			every_independent_ruler = {
				limit = {
					culture = scope:attacker.culture
					is_landed = yes
					NOT = {
						THIS = scope:attacker
					}
				}
				trigger_event = migration.0015
			}
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = { is_local_player = yes }
				}
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
		triggered_desc = {
			trigger = { scope:attacker = { is_local_player = yes } }
			desc = migration_war_warning_desc
		}
	}

	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = {
			if = {
				limit = {
					highest_held_title_tier < tier_kingdom
				}
				random_in_list = {
					list = target_titles
					limit = {
						tier = tier_kingdom
					}
					create_title_and_vassal_change = {
						type = conquest
						save_scope_as = change
						add_claim_on_loss = yes
					}
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			every_held_title = {
				limit = {
					tier = tier_county
				}
				save_temporary_scope_as = current_county
				create_character = {
					location = scope:current_county.title_province
					template = old_country_local_warlord_template
					save_temporary_scope_as = local_warlord
				}
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					scope:current_county = {
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				resolve_title_and_vassal_change = scope:change
			}

			every_in_list = {
				list = target_titles
				custom_tooltip = CONQUEST_CB_TITLE
				
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_county
						exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
					if = {
						limit = {
							OR = {
								scope:attacker.faith = {
									faith_hostility_level_comparison = { prev.holder.faith >= scope:defender.faith }
								}
								holder.primary_title.tier >= scope:attacker.primary_title.tier
							}
						}
						add_to_temporary_list = titles_taken
						add_to_temporary_list = titles_taken_total
					}
					else = {
						holder = { add_to_temporary_list = vassals_taken }
					}
				}
			}
			every_in_list = {
				list = vassals_taken
				create_title_and_vassal_change = {
					type = conquest
					save_scope_as = change
					add_claim_on_loss = yes
				}
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
				resolve_title_and_vassal_change = scope:change
			}
			ordered_in_list = {
				list = titles_taken
				order_by = this.development_level
				max = mass_migration_attacker_counties #to make attacker stronger than vassals, so that realm doesn't die instantly
				create_title_and_vassal_change = {
					type = conquest
					save_scope_as = change
					add_claim_on_loss = yes
				}
				change_title_holder = {
					holder = scope:attacker
					change = scope:change
					take_baronies = yes
				}
				resolve_title_and_vassal_change = scope:change
				remove_from_list = titles_taken
			}
			war = {
				every_war_attacker = {
					limit = {
						has_character_flag = mass_migrant_participant
					}
					save_scope_as = migrant_patricipant
					ordered_in_list = {
						list = titles_taken
						order_by = this.development_level
						max = mass_migration_sub_attacker_counties
						create_title_and_vassal_change = {
							type = conquest
							save_scope_as = change
							add_claim_on_loss = yes
						}
						change_title_holder = {
							holder = scope:migrant_patricipant
							change = scope:change
							take_baronies = yes
						}
						resolve_title_and_vassal_change = scope:change
						remove_from_list = titles_taken
					}
					create_title_and_vassal_change = {
						type = conquest
						save_scope_as = change
						add_claim_on_loss = yes
					}
					change_liege = {
						liege = scope:attacker
						change = scope:change
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			scope:attacker = {
				capital_county = {
					save_scope_as = old_capital
				}
			}
			if = {
				limit = {
					any_in_list = {
						list = target_titles
						this = duchy.title_capital_county
					}
				}
				random_in_list = {
					list = target_titles
					limit = { this = duchy.title_capital_county }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			scope:old_capital = {
				save_temporary_scope_as = current_county
				create_character = {
					location = scope:current_county.title_province
					template = old_country_local_warlord_template
					save_temporary_scope_as = local_warlord
				}
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					scope:current_county = {
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				resolve_title_and_vassal_change = scope:change
			}

			scope:attacker = {
				every_in_list = {
					list = target_titles
					limit = {
						tier = tier_kingdom
					}
					save_scope_as = kingdom_title
				}
				hidden_effect = {
					mass_migration_effect = { 
						INVADER = scope:attacker 
						TITLE_TARGET = scope:kingdom_title
					}
					every_in_list = {
						list = target_titles
						limit = {
							tier = tier_kingdom
						}
						save_scope_as = kingdom_target_title
					}
					every_realm_county = {
						limit = {
							NOT = {
								kingdom = scope:kingdom_target_title
							}
						}
						create_character = {
							location = THIS.title_province
							gender = male
							dynasty = generate
							faith = scope:attacker.faith
							culture = scope:attacker.culture
							save_scope_as = local_warlord
						}
						create_title_and_vassal_change = {
							type = usurped
							save_scope_as = change
							add_claim_on_loss = no
						}
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
						resolve_title_and_vassal_change = scope:change
						create_title_and_vassal_change = {
							type = usurped
							save_scope_as = change
							add_claim_on_loss = no
						}
						scope:local_warlord = {
							becomes_independent = { change = scope:change }
						}
						resolve_title_and_vassal_change = scope:change
					}
					
					war = {
						every_war_attacker = {
							limit = {
								has_character_flag = mass_migrant_participant
								highest_held_title_tier = tier_kingdom
							}
							save_scope_as = migrant_patricipant
							every_realm_county = {
								limit = {
									NOT = {
										kingdom = scope:kingdom_target_title
									}
								}
								create_character = {
									location = THIS.title_province
									gender = male
									dynasty = generate
									faith = scope:migrant_patricipant.faith
									culture = scope:migrant_patricipant.culture
									save_scope_as = local_warlord
								}
								create_title_and_vassal_change = {
									type = usurped
									save_scope_as = change
									add_claim_on_loss = no
								}
								change_title_holder = {
									holder = scope:local_warlord
									change = scope:change
									take_baronies = yes
								}
								resolve_title_and_vassal_change = scope:change
								create_title_and_vassal_change = {
									type = usurped
									save_scope_as = change
									add_claim_on_loss = no
								}
								scope:local_warlord = {
									becomes_independent = { change = scope:change }
								}
								resolve_title_and_vassal_change = scope:change
							}
							remove_character_flag = mass_migrant_participant
							if = {
								limit = {
									NOT = {
										capital_province = { has_holding_type = tribal_holding }
									}
									government_has_flag = government_is_tribal
								}
								if = {
									limit = {
										capital_province = { has_holding_type = estate_holding }
									}
									change_government = roman_government
								}
								else = {
									change_government = feudal_government
								}
							}
						}
						every_war_attacker = {
							limit = {
								has_character_flag = mass_migrant_participant
							}
							remove_character_flag = mass_migrant_participant
							if = {
								limit = {
									NOT = {
										capital_province = { has_holding_type = tribal_holding }
									}
									government_has_flag = government_is_tribal
								}
								if = {
									limit = {
										capital_province = { has_holding_type = estate_holding }
									}
									change_government = roman_government
								}
								else = {
									change_government = feudal_government
								}
							}
						}
					}

				}
				create_title_and_vassal_change = {
					type = conquest
					save_scope_as = change
					add_claim_on_loss = yes
				}

				setup_invasion_cb = {
					titles = target_titles
					attacker = scope:attacker
					defender = scope:defender
					change = scope:change
					take_occupied = yes
				}
				resolve_title_and_vassal_change = scope:change
				if = {
					limit = {
						NOT = {
							capital_province = { has_holding_type = tribal_holding }
						}
					}
					if = {
						limit = {
							capital_province = { has_holding_type = estate_holding }
						}
						change_government = roman_government
					}
					else = {
						change_government = feudal_government
					}
				}
				custom_tooltip = MIGRATION_TOOLTIP
				hidden_effect = {
					while = {
						count = var:culture_province
						random_realm_county = {
							set_county_culture = scope:attacker.culture
							set_county_faith = scope:attacker.faith
						}
					}

					create_title_and_vassal_change = {
						type = independency
						save_scope_as = change
						add_claim_on_loss = no
					}
					becomes_independent = { change = scope:change }
					resolve_title_and_vassal_change = scope:change
					
					
				}
			}
		}


		
		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_invasion_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_victory_effect = yes
		scope:attacker = {
			trigger_event = {
				id = migration.0016
				days = 10
			}
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}

	on_white_peace = {
        #EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}

	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold = {
				gold = 3
				target = scope:defender
				yearly_income = yes
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige = major_prestige_value
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}

		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = MASS_MIGRATION_WAR_NAME
	war_name_base = MASS_MIGRATION_WAR_NAME_BASE
	cb_name = MASS_MIGRATION_NAME_CB

	interface_priority = 100
}

##########
# Special 'invasion' CBs used by the Gaels to migrate from the Ireland to Britain
##########
tfe_brythonic_conquest = {
	group = event

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		is_ai = yes
	}

	allowed_against_character = {
		always = yes
	}
	target_titles = all
	target_title_tier = county
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder

	valid_to_start = {
		always = no
	}

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier = tier_county
					holder = {
						target_is_same_character_or_above = scope:defender
					}
				}
			}
		}
	}

	on_invalidated_desc = msg_religious_war_invalidation_region_message
	
	on_invalidated = {
		scope:attacker = { clean_scandinavian_adventurer_effect = yes }
	}

	on_declaration = {
		on_declared_war = yes

		# If scope:defender is a player or a king, give them a few choices.
		#scope:defender = {
		#	if = {
		#		limit = {
		#			OR = {
		#				is_ai = no
		#				highest_held_title_tier >= tier_kingdom
		#			}
		#		}
		#		trigger_event = {
		#			id = fp1_trade_events.1131
		#			days = 30
		#		}
		#	}
		#}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
	}
	ai_score_mult = {
		value = 1
		add = {
			if = {
				limit = {
					scope:attacker = {
						OR = {
							AND = {
								OR = {
									has_government = feudal_government
									government_has_flag = government_is_imperial
									government_has_flag = government_is_administrative
									government_has_flag = government_is_roman
								}
								realm_size > 30 #small sized feudal realms can't migrate
							}
							realm_size >= 40 #big realms can't migrate
						}
					}
				}
				add = -1000
			}
		}
	}

	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}

		# go through the dejure hierarchy under target titles, transfer titles with same or worse tolerance holders (their religion equally or less tolerated than the defender's),
		# take the holder as vassal otherwise and don't go deeper
		every_in_list = {
			list = target_titles
			custom_tooltip = CONQUEST_CB_TITLE
			every_in_de_jure_hierarchy = {
				continue = {
					OR = {
						NOT = {	exists = holder }
						NOT = {
							holder = { target_is_liege_or_above = scope:defender }
						}
						AND = {
							scope:attacker.faith = {
								faith_hostility_level_comparison = { prev.holder.faith <= scope:defender.faith }
							}
							holder = {
								OR = {
									this = scope:defender
									target_is_liege_or_above = scope:defender
								}
							}
						}
					}
					tier > tier_county
				}
				limit = {
					tier <= tier_county
					exists = holder
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}

				if = {
					limit = {
						OR = {
							scope:attacker.faith = {
								faith_hostility_level_comparison = {
									prev.holder.faith >= scope:defender.faith
								}
							}
							holder.primary_title.tier >= scope:attacker.primary_title.tier
						}
					}
					add_to_temporary_list = titles_taken
				}
				else = {
					holder = {
						add_to_temporary_list = vassals_taken
					}
				}
			}
		}

		every_in_list = {
			list = titles_taken
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = yes
			}
		}

		every_in_list = {
			list = vassals_taken
			change_liege = {
				liege = scope:attacker
				change = scope:change
			}
		}

		resolve_title_and_vassal_change = scope:change

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		#Clean-up adventurer things.
		scope:attacker = { clean_brythonic_adventurer_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}

	on_white_peace = {
        #EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # Not important as the scales are identical
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		add_truce_white_peace_effect = yes

		#Clean-up adventurer things.
		scope:attacker = { clean_brythonic_adventurer_effect = yes }

		# Since they failed to win, take away their efficacy loan.
		scope:attacker = { remove_short_term_gold = scandinavian_adventurer_efficacy_loan_value }
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}

	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 5
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}

		on_lost_aggression_war_discontent_loss = yes

		#Clean-up adventurer things.
		scope:attacker = { clean_brythonic_adventurer_effect = yes }

		# Since they lost, take away their efficacy loan.
		scope:attacker = { remove_short_term_gold = scandinavian_adventurer_efficacy_loan_value }
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CONQUEST_WAR_NAME"
	war_name_base = "CONQUEST_WAR_NAME_BASE"
	cb_name = "CONQUEST_DUCHY_CB_NAME"

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8
}


##########
# Special 'invasion' CBs used by the Hungarians to migrate from the steppe to Pannonia
# If victorious, the Hungarians directly usurp all land within Pannonia not held by a player.
##########

visigothic_revolt_cb = {
	group = event	#Switching this to event will render the CB invisible.
	
	allowed_for_character = { culture = culture:visigothic }
	target_titles = all
	target_title_tier = kingdom
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder
	combine_into_one = yes


	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier = tier_county
					holder = {
						target_is_same_character_or_above = scope:defender
					}
				}
			}
		}
		#Emperors do not deign to migrate. Plus it'll mess up title destruction.
		scope:attacker = { highest_held_title_tier >= tier_empire }
	}

	on_invalidated = {
		if = {
			limit = { exists = scope:attacker.player_heir }
			scope:attacker.player_heir = {
				if = {
					limit = {
						culture = culture:german
						faith = { has_doctrine = unreformed_faith_doctrine }
					}
				}
				#Give scope:attacker back their ability to declare a migration in the event of invalidation.
				add_character_flag = undertaking_visigothic_migration
			}
		}
	}

	on_invalidated_desc = msg_invasion_war_invalidated_message
	
	on_declaration = {
		on_declared_war = yes
		#Give scope:attacker some armies to ensure success & use up their free invasion.
		scope:attacker = {
			remove_character_flag = undertaking_visigothic_migration
			#One army to conquer.
			spawn_army = {
				name = event_troop_default_name
				levies = migration_army_levies_very_large
				men_at_arms = {
					type = pikemen_unit
					stacks = migration_army_maa_very_large
				}
				men_at_arms = {
					type = bowmen
					stacks = migration_army_maa_large
				}
				location = scope:attacker.capital_province
				uses_supply = no
				war = scope:war
				inheritable = yes
			}
			#And one army to hold.
			spawn_army = {
				name = event_troop_default_name
				levies = migration_army_levies_large
				men_at_arms = {
					type = pikemen_unit
					stacks = migration_army_maa_very_large
				}
				location = scope:attacker.capital_province
				uses_supply = no
				inheritable = yes
			}
		}
	}	

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = { is_local_player = yes }
				}
				desc = visigothic_invasion_war_victory_desc_attacker
			}
			desc = visigothic_invasion_war_victory_desc
		}
		triggered_desc = {
			trigger = {
				scope:attacker = { is_local_player = yes }
			}
			desc = visigothic_invasion_war_warning_desc
		}
	}
	
	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }
		#If the Mogyers aren't independent, make them so.
		#Take lands within Pannonia.
		hidden_effect = {
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}
			setup_invasion_cb = {
				titles = target_titles
				attacker = scope:attacker
				defender = scope:defender
				change = scope:change
				take_occupied = no
			}
			every_in_list = {
				list = target_titles

				# Personally seize all duchy titles in k_hungary AND duchy titles personally held by the target king.
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_kingdom
						special_invasion_cb_seize_land_in_region_trigger = {
							TARGET_REGION = custom_roman_illyricum
							TARGET_EMPIRE = e_italy
						}
					}
					if = {
						limit = {
							exists = holder
							holder = {
								exists = top_liege
								top_liege = scope:defender

								# Vassal players in Hungary get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
								NAND = {
									NOT = { this = top_liege }
									is_ai = no
								}
							}
						}
						custom_description = {
							text = custom_seize_title_and_below_de_jure
							subject = scope:attacker
							object = this
							change_title_holder = {
								holder = scope:attacker
								change = scope:change
								take_baronies = yes
							}
						}

						# Grab the counties that go with the duchies, too.
						every_in_de_jure_hierarchy = {
							limit = {
								tier = tier_county
								exists = holder
								holder = {
									top_liege = scope:defender

									# Vassal players in Hungary get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
									NAND = {
										NOT = { this = top_liege }
										is_ai = no
									}
								}
							}
							hidden_effect = {
								change_title_holder = {
									holder = scope:attacker
									change = scope:change
									take_baronies = yes
								}
							}
							add_to_temporary_list = county_titles_under_transfer
						}
					}
				}
			}
			resolve_title_and_vassal_change = scope:change
		}

		#Start processing the Hungarian-specific effects.
		scope:attacker = {
			visigothic_rebellion_scripted_effect = { INVADER = scope:attacker }
		}
		
		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_invasion_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_victory_effect = yes
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}
	
	on_white_peace = {
        #EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }
		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = major_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = major_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Truce
		add_truce_white_peace_effect = yes

		scope:attacker = {
			add_prestige = mongol_invasion_cb_prestige_white_peace
		}
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}
	
	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		scope:attacker = { show_pow_release_message_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold = {
				gold = 5
				target = scope:defender
				yearly_income = yes
			}
			add_prestige = {
				value = massive_prestige_value
				multiply = -1.0
			}
		}

		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}
	
		add_truce_attacker_defeat_effect = yes
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}
	
	transfer_behavior = transfer
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	transfer_behavior = transfer
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "HUNGARIAN_INVASION_WAR_NAME"
	war_name_base = "HUNGARIAN_INVASION_WAR_NAME_BASE"
	cb_name = "HUNGARIAN_INVASION_CB_NAME"
	
	interface_priority = 100

}

tfe_slavic_migration = {
	group = event

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		is_ai = yes
	}

	allowed_against_character = {
		always = yes
	}
	target_titles = all
	target_title_tier = county
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder

	valid_to_start = {
		always = no
	}

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier = tier_county
					holder = {
						target_is_same_character_or_above = scope:defender
					}
				}
			}
		}
	}

	on_invalidated_desc = msg_religious_war_invalidation_region_message
	
	on_invalidated = {
		scope:attacker = { clean_scandinavian_adventurer_effect = yes }
	}

	on_declaration = {
		on_declared_war = yes
		scope:attacker = {
			add_character_flag = used_lifetime_migration
		}
		# Dish out event troops, if appropriate.
		## We give out x200 troops per same-culture same-faith core mainland Scandinavian county, up to a maximum of ten counties.
		## These are evenly split between good MaA -> average MaA -> good MaA again, to give a decent bell curve.
		scope:attacker = {
			add_character_modifier = migration_leader
			if = {
				limit = {
					is_landed = yes
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_medium
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = yes
				}
			}
			else = {
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.primary_title.title_capital_county.title_province
					uses_supply = no
					inheritable = yes
				}
			}
			if = {
				limit = {
					AND = {
						is_landed = yes
						migration_levies_value >= 3
						culture = {
							has_cultural_tradition = tradition_migrations
						}
					}
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = no
			}
			}
			if = {
				limit = {
					AND = {
						is_landed = yes
						migration_levies_value >= 10
						culture = {
							has_cultural_tradition = tradition_migrations
						}
					}
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = yes
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = no
				}
			}
			if = {
				limit = {
					AND = {
						exists = struggle:britannia_struggle
						migration_levies_value >= 10
						struggle:britannia_struggle = {
							has_struggle_phase_parameter = more_migration_armies
						}
						any_in_list = {
							list = target_titles
							title_capital_county.title_province = {
								geographical_region = world_europe_west_britannia
							}
						}
						culture = {
							has_cultural_tradition = tradition_migrations
						}
					}
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = yes
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = no
				}
			}
			if = {
				limit = {
					culture = {
						has_cultural_tradition = tradition_migrations
					}
					migration_levies_value >= 1
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = no
				}
			}
		}
		scope:defender.top_liege = {
			trigger_event = {
				id = migration.0001
				days = 10
			}
		}


		scope:attacker = {
			set_variable = {
				name = culture_province
				value = 5
			}
			every_realm_county = {
				limit = {
					culture = scope:attacker.culture				
				}
				scope:attacker = {
					change_variable = {
						name = culture_province
						add = 1
					}
				}
			}
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = { is_local_player = yes }
				}
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
		triggered_desc = {
			trigger = { scope:attacker = { is_local_player = yes } }
			desc = migration_war_warning_desc
		}
	}

	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		# Organise general results for the attacker.
		scope:attacker = {
			set_variable = {
				name = culture_province
				value = 5
			}
			every_realm_county = {
				limit = {
					culture = scope:attacker.culture				
				}
				scope:attacker = {
					change_variable = {
						name = culture_province
						add = 1
					}
				}
			}
			# Set up titles in the new colony.
			## First up, hand over counties in the target duchy to scope:attacker.
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}
			every_in_list = {
				list = target_titles
				custom_tooltip = CONQUEST_CB_TITLE
				every_in_de_jure_hierarchy = {
					continue = {
						OR = {
							NOT = {
								exists = holder
							}
							NOT = {
								holder = {
									target_is_liege_or_above = scope:defender
								}
							}
							AND = {
								scope:attacker.faith = {
									faith_hostility_level_comparison = {
										prev.holder.faith <= scope:defender.faith
									}
								}
								holder = {
									OR = {
										this = scope:defender
										target_is_liege_or_above = scope:defender
									}
								}
							}
						}
						tier > tier_county
					}
					limit = {
						tier = tier_county
						exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
					if = {
						limit = {
							OR = {
								scope:attacker.faith = {
									faith_hostility_level_comparison = { prev.holder.faith >= scope:defender.faith }
								}
								holder.primary_title.tier >= scope:attacker.primary_title.tier
							}
						}
						add_to_temporary_list = titles_taken
					}
					else = {
						holder = { add_to_temporary_list = vassals_taken }
					}
				}
			}
			every_in_list = {
				list = titles_taken
				change_title_holder = {
					holder = scope:attacker
					change = scope:change
					take_baronies = yes
				}
			}
			custom_tooltip = MIGRATION_TOOLTIP
			hidden_effect = {
				if = {
					limit = {
						scope:attacker = {
							has_variable = culture_province
						}
					}
					while = {
						count = scope:attacker.var:culture_province
						random_in_list = {
							list = titles_taken
							random_in_de_jure_hierarchy = {
								limit = {
									tier = tier_county
								}
								set_county_culture = scope:attacker.culture
								set_county_faith = scope:attacker.faith
							}
						}
					}
				}
			}
			every_in_list = {
				list = vassals_taken
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			## Grab the appropriate duchy for future independence checks.
			random_in_list = {
				list = target_titles
				limit = { tier = tier_duchy }
				save_scope_as = target_duchy
			}
			## Next, if the appropriate duchy doesn't already exist, create it.
			if = {
				limit = {
					any_in_list = {
						list = target_titles
						tier = tier_duchy
						is_title_created = no
					}
				}
				random_in_list = {
					list = target_titles
					limit = { tier = tier_duchy }
					save_scope_as = new_duchy
				}
				create_title_and_vassal_change = {
					type = created
					save_scope_as = change
					add_claim_on_loss = no
				}
				scope:new_duchy = {
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## Else if it does & is a part of scope:defender's sub-realm, usurp it.
			else_if = {
				limit = {
					any_in_list = {
						list = target_titles
						tier = tier_duchy
						holder = {
							OR = {
								this = scope:defender
								any_liege_or_above = { this = scope:defender }
							}
						}
					}
				}
				random_in_list = {
					list = target_titles
					# No need to check all triggers, since there'll only ever be one duchy in the list.
					limit = { tier = tier_duchy }
					save_scope_as = new_duchy
				}
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = yes
				}
				scope:new_duchy = {
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## Else we want a titular duchy.
			else = {
				# To keep tooltips neat, show the core duchy as transferring (preventing a messy "unlanded of" from appearing).
				show_as_tooltip = {
					random_in_list = {
					list = target_titles
						limit = { tier = tier_duchy }
						save_scope_as = new_duchy
					}
					create_title_and_vassal_change = {
						type = created
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:new_duchy = {
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
				# Actual transfer.
				hidden_effect = {
					# Randomising the names a little.
					random_list = {
						25 = {
							create_dynamic_title = {
								tier = duchy
								name = VIKING_STATE_TITLE_NAME
							}
						}
						25 = {
							create_dynamic_title = {
								tier = duchy
								name = NORDIC_STATE_TITLE_NAME
							}
						}
						25 = {
							trigger = {
								any_in_list = {
									list = target_titles
									tier = tier_county
									title_province = {
										geographical_region = world_europe_south_east
										geographical_region = world_europe_east
										geographical_region = world_asia_minor
									}
								}
							}
							create_dynamic_title = {
								tier = duchy
								name = VARYAG_STATE_TITLE_NAME
							}
						}
						25 = {
							create_dynamic_title = {
								tier = duchy
								name = NORSE_STATE_TITLE_NAME
							}
						}
					}
					create_title_and_vassal_change = {
						type = created
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:new_title = {
						set_delete_on_destroy = yes
						set_no_automatic_claims = yes
						set_can_be_named_after_dynasty = no
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
						save_scope_as = new_duchy
					}
					resolve_title_and_vassal_change = scope:change
					# Generate a new CoA
					## We do this in a separate block so that the effect has time to see that the title has a holder, since it'll error otherwise.
					scope:new_title = { generate_coa = yes }
				}
			}
			## Set a new capital.
			### We prefer the de jure capital of the other.
			if = {
				limit = {
					any_in_list = {
						list = target_titles
						this = duchy.title_capital_county
					}
				}
				random_in_list = {
					list = target_titles
					limit = { this = duchy.title_capital_county }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			### Otherwise, tribals go by pure levy count.
			else_if = {
				limit = {
					scope:attacker = { government_has_flag = government_is_tribal }
				}
				ordered_in_list = {
					list = target_titles
					limit = { tier = tier_county }
					order_by = total_county_levies
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			### Everyone else prefers the highest development.
			else = {
				ordered_in_list = {
					list = target_titles
					limit = { tier = tier_county }
					order_by = { add = development_level }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			# Then re-order stuff in the Old Country.
			## First, we destroy any other ducal titles scope:attacker holds (excepting HoF titles).
			if = {
				limit = {
					any_held_title = {
						tier = tier_kingdom
						NOR = {
							this = title:k_anglia
							this = title:k_juteland
							this = title:k_visigoths
							this = title:k_varini
							this = title:k_thuringians
							this = title:k_rhinefranks
							this = title:k_quadi
							this = title:k_marcomanni
							this = title:k_alani
							this = title:k_hasding_vandals
							this = title:k_siling_vandals
							this = title:k_franks
							this = title:k_gepids
							this = title:k_vandals
							this = title:k_burgundia
							this = title:k_lombardia
							this = title:k_suebi
							this = title:k_vandals
							this = scope:new_duchy
							is_head_of_faith = yes
						}
					}
				}
				every_held_title = {
					limit = {
						tier = tier_duchy
						NOR = {
							this = scope:new_duchy
							is_head_of_faith = yes
						}
					}
					save_temporary_scope_as = excess_duchy
					scope:attacker = { destroy_title = scope:excess_duchy }
				}
			}
			## Sort out vassalised family.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.family_transfer
			every_vassal_or_below = {
				limit = { dynasty = scope:attacker.dynasty }
				add_to_list = vassalised_family_list
			}
			every_held_title = {
				limit = {
					tier = tier_county
					duchy = { is_in_list = target_titles }
				}
				add_to_list = spare_counties_list
			}
			## If there are any to account for, we bring over other landed family members from the Old Country & try to give them counties in the colony.
			if = {
				limit = {
					any_in_list = {
						list = vassalised_family_list
						count >= 1
					}
				}
				# Then iterate through the family members, dishing out titles as appropriate.
				every_in_list = {
					list = vassalised_family_list
					# Players first.
					limit = { is_ai = no }
					# Then NPCs, prioritising counts.
					alternative_limit = { highest_held_title_tier = tier_county }
					# We don't process barons, they can just go landless.
					# Grab the currently affected vassal.
					save_temporary_scope_as = receiving_vassal
					# Then, if there's anything in that list, look at handing out titles.
					if = {
						limit = {
							any_in_list = {
								list = spare_counties_list
								NOT = { this = scope:attacker.capital_county }
								holder = scope:attacker
							}
						}
						random_in_list = {
							list = spare_counties_list
							limit = {
								NOT = { this = scope:attacker.capital_county }
								tier = tier_county
								holder = scope:attacker
							}
							save_temporary_scope_as = spare_county
							create_title_and_vassal_change = {
								type = granted
								save_scope_as = change
								add_claim_on_loss = no
							}
							scope:spare_county = {
								change_title_holder = {
									holder = scope:receiving_vassal
									change = scope:change
								}
							}
							resolve_title_and_vassal_change = scope:change
						}
						# And add them to the post-processing list so we can divy out their lands elsewhere.
						add_to_list = vassal_family_processed_list
					}
					# Otherwise, we're going to have to do something special with this character, so take note of them for later.
					else = { add_to_list = vassal_family_not_processed_list }
				}
			}
			## Distribute scope:attacker's old domains to peasant vassals of the local culture/faith.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.old_domains
			every_held_title = {
				limit = {
					tier = tier_county
					duchy = {
						NOT = { this = scope:target_duchy 
								this = title:k_juteland
								this = title:k_visigoths
								this = title:k_anglia
							}
					}
				}
				# Grab the county for ease of reference.
				save_temporary_scope_as = current_county
				# Create an elevated peasant to claim the county.
				create_character = {
					location = scope:current_county.title_province
					template = old_country_local_warlord_template
					save_temporary_scope_as = local_warlord
				}
				# Assign the seceding title to the new upstart.
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					scope:current_county = {
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
				# And give them their independence.
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					scope:local_warlord = {
						becomes_independent = { change = scope:change }
						save_scope_as = truce_loc
						add_truce_both_ways = {
							character = scope:attacker
							days = 14600
							name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## Distribute landed family's domains outside of the colony to peasant vassals of the local culture/faith.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.landed_family_old_domains
			every_in_list = {
				list = vassal_family_processed_list
				every_held_title = {
					limit = {
						tier = tier_county
						duchy = {
							NOT = { this = scope:target_duchy }
						}
					}
					# Grab the county for ease of reference.
					save_temporary_scope_as = current_county
					# Create an elevated peasant to claim the county.
					create_character = {
						location = scope:current_county.title_province
						template = old_country_local_warlord_template
						save_temporary_scope_as = local_warlord
					}
					# Assign the seceding title to the new upstart.
					create_title_and_vassal_change = {
						type = usurped
						save_scope_as = change
						add_claim_on_loss = no
					}
					hidden_effect = {
						scope:current_county = {
							change_title_holder = {
								holder = scope:local_warlord
								change = scope:change
								take_baronies = yes
							}
						}
					}
					resolve_title_and_vassal_change = scope:change
					# And give them their independence.
					create_title_and_vassal_change = {
						type = independency
						save_scope_as = change
						add_claim_on_loss = no
					}
					hidden_effect = {
						scope:local_warlord = {
							becomes_independent = { change = scope:change }
							save_scope_as = truce_loc
							add_truce_both_ways = {
								character = scope:attacker
								days = 14600
								name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
							}
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			## Give all old vassals outside of the target_titles independence.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.old_vassals
			every_vassal = {
				limit = {
					NOT = {
						any_held_title = { duchy = scope:target_duchy }
					}
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					becomes_independent = { change = scope:change }
					save_scope_as = truce_loc
					add_truce_both_ways = {
						character = scope:attacker
						days = 14600
						name = FP1_VARANGIAN_ADVENTURER_INDEPENDENCE_TRUCE_NAME
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			# Sort the governance of the colony.
			## Adjusting the government type as appropriate.
			# Conquering tribes makes you tribal.
			if = {
				limit = {
					capital_province ?= { has_holding_type = tribal_holding }
					NOT = { government_has_flag = government_is_tribal }
				}
				# Change government to tribal.
				change_government = tribal_government
			}
			# Conquering elsewhere as a tribal makes you feudal.
			else_if = {
				limit = {
					NOT = {
						capital_province ?= { has_holding_type = tribal_holding }
					}
					# Might have turned theocratic before from gaining a new capital holding
					#government_has_flag = government_is_tribal
				}
				# Change government to feudal.
				if = {
					limit = {
						capital_province ?= { has_holding_type = estate_holding }
					}
					change_government = roman_government
				}
				else = {
					change_government = feudal_government
				}
			}
			## Seizing control so things *vaguely* work.
			scope:attacker = { trigger_event = fp1_varangian_adventures.0001 }
			## And giving them a gold bounty to keep them afloat.
			scope:attacker = { add_gold = varangian_adventures_bounty_amount_value }
			# Finally, general cleanup.
			## Move any remaining newly-landless family to scope:attacker's court.
			every_in_list = {
				list = vassal_family_not_processed_list
				limit = { is_ruler = no }
				save_temporary_scope_as = landless_family
				scope:attacker = { add_courtier = scope:landless_family }
			}
			## If scope:attacker wasn't an adventurer before, make them one.
			if = {
				limit = {
					NOT = { has_trait = adventurer }
				}
				add_trait = adventurer
			}
			## Increment their Varangian Adventurer CB tally.
			if = {
				limit = {
					NOT = { has_variable = va_cb_tally }
				}
				set_variable = {
					name = va_cb_tally
					# We set to two initially, since the first war cost prestige already, so we want to pretend you had a value of 1 the first time around.
					value = 2
				}
			}
			else = {
				change_variable = {
					name = va_cb_tally
					add = 1
				}
			}
			# Aaaaaand track the A Dangerous Business achievement.
			if = {
				limit = { has_trait = dwarf }
				add_character_flag = a_dangerous_business_achievement_flag
			}

			if = {
				limit = {
					any_realm_county = {
						NOT = {
							culture = scope:attacker.culture
						}
					}
				}
				random_list = {
					5 = {
						trigger_event = {
							id = migration.0005
							days = {30 50}
						}
					}
					10 = {
						trigger_event = {
							id = migration.0006
							days = {30 50}
						}
					}
					10 = {
						trigger_event = {
							id = migration.0007
							days = {30 50}
						}
					}
					5 = {
						trigger_event = {
							id = migration.0008
							days = {30 50}
						}
					}
				}
			}
		}

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		#if = {
	#		limit = {
	#			scope:attacker.primary_title = {
	#				tier = tier_kingdom
	#				is_landless_type_title = yes
	#			}
	#		}
	#		every_in_list = {
	#			list = target_titles
	#			limit = { tier = tier_duchy }
	#			
	#			set_de_jure_liege_title = scope:attacker.primary_title
	#		}
	#	}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}
		
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		setup_invasion_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			change = scope:change
			take_occupied = yes
		}
		resolve_title_and_vassal_change = scope:change

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}

	on_white_peace = {
        #EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
			remove_character_modifier = migration_leader
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}

	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold = {
				gold = 3
				target = scope:defender
				yearly_income = yes
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
			remove_character_modifier = migration_leader
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige = major_prestige_value
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}

		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = MIGRATION_WAR_NAME
	war_name_base = MIGRATION_WAR_NAME_BASE
	cb_name = MIGRATION_NAME_CB

	interface_priority = 100

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = MIGRATION_WAR_NAME
	war_name_base = MIGRATION_WAR_NAME_BASE
	cb_name = MIGRATION_NAME_CB

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8
}

event_germanic_migration_cb = {
	group = event

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		culture = {
			OR = {
				has_cultural_tradition = tradition_migrations
				AND = {
					exists = struggle:britannia_struggle
					struggle:britannia_struggle = {
						is_culture_involved_in_struggle = prev
						
					}
					NOT = {
						has_cultural_pillar = heritage_latin
					}
				}
			}
			NOT = { has_cultural_era_or_later = culture_era_early_medieval }
		}
		NOT = {
			has_character_flag = used_lifetime_migration
		}
		NOT = {
			AND = {
				culture = culture:frankish
				game_start_date = 532.2.1
				highest_held_title_tier >= tier_kingdom
			}
		}
		# is_ai = no
	}

	allowed_for_character_display_regardless = {
		# Ensure that this is only done every now and then.
		#is_independent_ruler = yes
		#highest_held_title_tier <= tier_kingdom
		trigger_if = {
			limit = { is_ai = no }
			prestige_level >= medium_prestige_level
		}
		trigger_else = { prestige_level >= medium_prestige_level }
		#is_at_war = no
		#Doesn't work for some reason
		#is_in_an_activity = no
		is_available = yes
	}

	allowed_against_character = {
		# Cannot adventure against other adventuring cultures.
		NOT = {
			culture = { has_cultural_tradition = tradition_migrations }
		}
		# Players vs. AI filtering.
		OR = {
			# Can always target the AI.
			is_ai = yes
			# Cannot target a player unless they completely control at least two duchies.
			any_sub_realm_duchy = {
				count >= 2
				save_temporary_scope_as = player_controlled_duchy
				# Custom description to suppress errors.
				custom_description = {
					text = SUPPRESS
					scope:defender = { completely_controls = scope:player_controlled_duchy }
				}
			}
		}

	}
	target_titles = all
	target_title_tier = duchy
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder

	valid_to_start = {
	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier = tier_county
						holder = {
							target_is_same_character_or_above = scope:defender
						}
					}
				}
			}
			#scope:attacker = {
			#	is_independent_ruler = no
			#}
			
		}
	}

	on_invalidated_desc = msg_county_conquest_war_invalidated_message
	
	on_invalidated = {
		scope:attacker = {
			remove_character_flag = used_lifetime_migration
			remove_character_modifier = migration_leader
		}
	}

	ai_score_mult = {
		value = TFE_MIGRATION_AI_SCORE_MULT
	}

	cost = {
		prestige = {
			value = 1
		}
	}

	on_declaration = {
		debug_log = "Migration started"
		on_declared_war = yes
		scope:attacker = {
			add_character_flag = used_lifetime_migration
		}
		# Dish out event troops, if appropriate.
		## We give out x200 troops per same-culture same-faith core mainland Scandinavian county, up to a maximum of ten counties.
		## These are evenly split between good MaA -> average MaA -> good MaA again, to give a decent bell curve.
		scope:attacker = {
			add_character_modifier = migration_leader
			if = {
				limit = {
					is_landed = yes
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = yes
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = no
				}
			}
			if = {
				limit = {
					is_landed = no
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.primary_title.title_capital_county.title_province
					uses_supply = no
					inheritable = yes
				}
			}
			if = {
				limit = {
					AND = {
						is_landed = yes
						migration_levies_value >= 3
						culture = {
							has_cultural_tradition = tradition_migrations
						}
					}
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = no
			}
			}
			if = {
				limit = {
					AND = {
						is_landed = yes
						migration_levies_value >= 10
						culture = {
							has_cultural_tradition = tradition_migrations
						}
					}
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = yes
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = no
				}
			}
			if = {
				limit = {
					AND = {
						exists = struggle:britannia_struggle
						migration_levies_value >= 10
						struggle:britannia_struggle = {
							has_struggle_phase_parameter = more_migration_armies
						}
						any_in_list = {
							list = target_titles
							title_capital_county.title_province = {
								geographical_region = world_europe_west_britannia
							}
						}
						culture = {
							has_cultural_tradition = tradition_migrations
						}
					}
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = yes
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = no
				}
			}
			if = {
				limit = {
					culture = {
						has_cultural_tradition = tradition_migrations
					}
					migration_levies_value >= 1
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_footmen
						stacks = migration_army_maa_small
					}
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = no
				}
			}
		}
		scope:defender.top_liege = {
			trigger_event = {
				id = migration.0001
				days = 10
			}
		}


		scope:attacker = {
			set_variable = {
				name = culture_province
				value = 5
			}
			every_realm_county = {
				limit = {
					culture = scope:attacker.culture				
				}
				scope:attacker = {
					change_variable = {
						name = culture_province
						add = 1
					}
				}
			}
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = { is_local_player = yes }
				}
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
		triggered_desc = {
			trigger = { scope:attacker = { is_local_player = yes } }
			desc = migration_war_warning_desc
		}
	}

	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		# Organise general results for the attacker.
		scope:attacker = {
			set_variable = {
				name = culture_province
				value = 5
			}
			every_realm_county = {
				limit = {
					culture = scope:attacker.culture				
				}
				scope:attacker = {
					change_variable = {
						name = culture_province
						add = 1
					}
				}
			}
			# Set up titles in the new colony.
			## First up, hand over counties in the target duchy to scope:attacker.
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}
			every_in_list = {
				list = target_titles
				custom_tooltip = CONQUEST_CB_TITLE
				every_in_de_jure_hierarchy = {
					continue = {
						OR = {
							NOT = {
								exists = holder
							}
							NOT = {
								holder = {
									target_is_liege_or_above = scope:defender
								}
							}
							AND = {
								scope:attacker.faith = {
									faith_hostility_level_comparison = {
										prev.holder.faith <= scope:defender.faith
									}
								}
								holder = {
									OR = {
										this = scope:defender
										target_is_liege_or_above = scope:defender
									}
								}
							}
						}
						tier > tier_county
					}
					limit = {
						tier = tier_county
						exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
					if = {
						limit = {
							OR = {
								scope:attacker.faith = {
									faith_hostility_level_comparison = { prev.holder.faith >= scope:defender.faith }
								}
								holder.primary_title.tier >= scope:attacker.primary_title.tier
							}
						}
						add_to_temporary_list = titles_taken
					}
					else = {
						holder = { add_to_temporary_list = vassals_taken }
					}
				}
			}
			every_in_list = {
				list = titles_taken
				change_title_holder = {
					holder = scope:attacker
					change = scope:change
					take_baronies = yes
				}
			}
			custom_tooltip = MIGRATION_TOOLTIP
			hidden_effect = {
				if = {
					limit = {
						scope:attacker = {
							has_variable = culture_province
						}
					}
					while = {
						count = scope:attacker.var:culture_province
						random_in_list = {
							list = titles_taken
							random_in_de_jure_hierarchy = {
								limit = {
									tier = tier_county
								}
								set_county_culture = scope:attacker.culture
								set_county_faith = scope:attacker.faith
							}
						}
					}
				}
			}
			every_in_list = {
				list = vassals_taken
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			## Grab the appropriate duchy for future independence checks.
			random_in_list = {
				list = target_titles
				limit = { tier = tier_duchy }
				save_scope_as = target_duchy
			}
			## Next, if the appropriate duchy doesn't already exist, create it.
			if = {
				limit = {
					any_in_list = {
						list = target_titles
						tier = tier_duchy
						is_title_created = no
					}
				}
				random_in_list = {
					list = target_titles
					limit = { tier = tier_duchy }
					save_scope_as = new_duchy
				}
				create_title_and_vassal_change = {
					type = created
					save_scope_as = change
					add_claim_on_loss = no
				}
				scope:new_duchy = {
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## Else if it does & is a part of scope:defender's sub-realm, usurp it.
			else_if = {
				limit = {
					any_in_list = {
						list = target_titles
						tier = tier_duchy
						holder = {
							OR = {
								this = scope:defender
								any_liege_or_above = { this = scope:defender }
							}
						}
					}
				}
				random_in_list = {
					list = target_titles
					# No need to check all triggers, since there'll only ever be one duchy in the list.
					limit = { tier = tier_duchy }
					save_scope_as = new_duchy
				}
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = yes
				}
				scope:new_duchy = {
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## Else we want a titular duchy.
			else = {
				# To keep tooltips neat, show the core duchy as transferring (preventing a messy "unlanded of" from appearing).
				show_as_tooltip = {
					random_in_list = {
					list = target_titles
						limit = { tier = tier_duchy }
						save_scope_as = new_duchy
					}
					create_title_and_vassal_change = {
						type = created
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:new_duchy = {
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
				# Actual transfer.
				hidden_effect = {
					# Randomising the names a little.
					random_list = {
						25 = {
							create_dynamic_title = {
								tier = duchy
								name = VIKING_STATE_TITLE_NAME
							}
						}
						25 = {
							create_dynamic_title = {
								tier = duchy
								name = NORDIC_STATE_TITLE_NAME
							}
						}
						25 = {
							trigger = {
								any_in_list = {
									list = target_titles
									tier = tier_county
									title_province = {
										geographical_region = world_europe_south_east
										geographical_region = world_europe_east
										geographical_region = world_asia_minor
									}
								}
							}
							create_dynamic_title = {
								tier = duchy
								name = VARYAG_STATE_TITLE_NAME
							}
						}
						25 = {
							create_dynamic_title = {
								tier = duchy
								name = NORSE_STATE_TITLE_NAME
							}
						}
					}
					create_title_and_vassal_change = {
						type = created
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:new_title = {
						set_delete_on_destroy = yes
						set_no_automatic_claims = yes
						set_can_be_named_after_dynasty = no
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
						save_scope_as = new_duchy
					}
					resolve_title_and_vassal_change = scope:change
					# Generate a new CoA
					## We do this in a separate block so that the effect has time to see that the title has a holder, since it'll error otherwise.
					scope:new_title = { generate_coa = yes }
				}
			}
			## Set a new capital.
			### We prefer the de jure capital of the other.
			if = {
				limit = {
					any_in_list = {
						list = target_titles
						this = duchy.title_capital_county
					}
				}
				random_in_list = {
					list = target_titles
					limit = { this = duchy.title_capital_county }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			### Otherwise, tribals go by pure levy count.
			else_if = {
				limit = {
					scope:attacker = { government_has_flag = government_is_tribal }
				}
				ordered_in_list = {
					list = target_titles
					limit = { tier = tier_county }
					order_by = total_county_levies
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			### Everyone else prefers the highest development.
			else = {
				ordered_in_list = {
					list = target_titles
					limit = { tier = tier_county }
					order_by = { add = development_level }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			# Then re-order stuff in the Old Country.
			## First, we destroy any other ducal titles scope:attacker holds (excepting HoF titles).
			if = {
				limit = {
					any_held_title = {
						tier = tier_kingdom
						NOR = {
							this = title:k_anglia
							this = title:k_juteland
							this = title:k_visigoths
							this = title:k_varini
							this = title:k_thuringians
							this = title:k_rhinefranks
							this = title:k_quadi
							this = title:k_marcomanni
							this = title:k_alani
							this = title:k_hasding_vandals
							this = title:k_siling_vandals
							this = title:k_franks
							this = title:k_gepids
							this = title:k_vandals
							this = title:k_burgundia
							this = title:k_lombardia
							this = title:k_suebi
							this = title:k_vandals
							this = scope:new_duchy
							is_head_of_faith = yes
						}
					}
				}
				every_held_title = {
					limit = {
						tier = tier_duchy
						NOR = {
							this = scope:new_duchy
							is_head_of_faith = yes
						}
					}
					save_temporary_scope_as = excess_duchy
					scope:attacker = { destroy_title = scope:excess_duchy }
				}
			}
			## Sort out vassalised family.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.family_transfer
			every_vassal_or_below = {
				limit = { dynasty = scope:attacker.dynasty }
				add_to_list = vassalised_family_list
			}
			every_held_title = {
				limit = {
					tier = tier_county
					duchy = { is_in_list = target_titles }
				}
				add_to_list = spare_counties_list
			}
			## If there are any to account for, we bring over other landed family members from the Old Country & try to give them counties in the colony.
			if = {
				limit = {
					any_in_list = {
						list = vassalised_family_list
						count >= 1
					}
				}
				# Then iterate through the family members, dishing out titles as appropriate.
				every_in_list = {
					list = vassalised_family_list
					# Players first.
					limit = { is_ai = no }
					# Then NPCs, prioritising counts.
					alternative_limit = { highest_held_title_tier = tier_county }
					# We don't process barons, they can just go landless.
					# Grab the currently affected vassal.
					save_temporary_scope_as = receiving_vassal
					# Then, if there's anything in that list, look at handing out titles.
					if = {
						limit = {
							any_in_list = {
								list = spare_counties_list
								NOT = { this = scope:attacker.capital_county }
								holder = scope:attacker
							}
						}
						random_in_list = {
							list = spare_counties_list
							limit = {
								NOT = { this = scope:attacker.capital_county }
								tier = tier_county
								holder = scope:attacker
							}
							save_temporary_scope_as = spare_county
							create_title_and_vassal_change = {
								type = granted
								save_scope_as = change
								add_claim_on_loss = no
							}
							scope:spare_county = {
								change_title_holder = {
									holder = scope:receiving_vassal
									change = scope:change
								}
							}
							resolve_title_and_vassal_change = scope:change
						}
						# And add them to the post-processing list so we can divy out their lands elsewhere.
						add_to_list = vassal_family_processed_list
					}
					# Otherwise, we're going to have to do something special with this character, so take note of them for later.
					else = { add_to_list = vassal_family_not_processed_list }
				}
			}
			## Distribute scope:attacker's old domains to peasant vassals of the local culture/faith.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.old_domains
			every_held_title = {
				limit = {
					tier = tier_county
					duchy = {
						NOT = { this = scope:target_duchy 
								this = title:k_juteland
								this = title:k_visigoths
								this = title:k_anglia
							}
					}
				}
				# Grab the county for ease of reference.
				save_temporary_scope_as = current_county
				# Create an elevated peasant to claim the county.
				create_character = {
					location = scope:current_county.title_province
					template = old_country_local_warlord_template
					save_temporary_scope_as = local_warlord
				}
				# Assign the seceding title to the new upstart.
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					scope:current_county = {
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
				# And give them their independence.
				create_title_and_vassal_change = {
					type = conquest
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					if = {
						limit = {
							scope:attacker = {
								is_independent_ruler = yes
							}
						}
						scope:local_warlord = {
							becomes_independent = { change = scope:change }
						}
					}
					else = {
						scope:local_warlord = {
							change_liege = {
								liege = scope:attacker.liege
								change = scope:change
							}
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## Distribute landed family's domains outside of the colony to peasant vassals of the local culture/faith.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.landed_family_old_domains
			every_in_list = {
				list = vassal_family_processed_list
				every_held_title = {
					limit = {
						tier = tier_county
						duchy = {
							NOT = { this = scope:target_duchy }
						}
					}
					# Grab the county for ease of reference.
					save_temporary_scope_as = current_county
					# Create an elevated peasant to claim the county.
					create_character = {
						location = scope:current_county.title_province
						template = old_country_local_warlord_template
						save_temporary_scope_as = local_warlord
					}
					# Assign the seceding title to the new upstart.
					create_title_and_vassal_change = {
						type = usurped
						save_scope_as = change
						add_claim_on_loss = no
					}
					hidden_effect = {
						scope:current_county = {
							change_title_holder = {
								holder = scope:local_warlord
								change = scope:change
								take_baronies = yes
							}
						}
					}
					resolve_title_and_vassal_change = scope:change
					# And give them their independence.
					create_title_and_vassal_change = {
						type = conquest
						save_scope_as = change
						add_claim_on_loss = no
					}
					hidden_effect = {
						if = {
							limit = {
								scope:attacker = {
									is_independent_ruler = yes
								}
							}
							scope:local_warlord = {
								becomes_independent = { change = scope:change }
							}
						}
						else = {
							scope:local_warlord = {
								change_liege = {
									liege = scope:attacker.liege
									change = scope:change
								}
							}
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			## Give all old vassals outside of the target_titles independence.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.old_vassals
			every_vassal = {
				limit = {
					NOT = {
						any_held_title = { duchy = scope:target_duchy }
					}
				}
				save_scope_as = local_warlord
				# And give them their independence.
				create_title_and_vassal_change = {
					type = conquest
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					if = {
						limit = {
							scope:attacker = {
								is_independent_ruler = yes
							}
						}
						scope:local_warlord = {
							becomes_independent = { change = scope:change }
						}
					}
					else = {
						scope:local_warlord = {
							change_liege = {
								liege = scope:attacker.liege
								change = scope:change
							}
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			# Sort the governance of the colony.
			## Adjusting the government type as appropriate.
			# Conquering tribes makes you tribal.
			if = {
				limit = {
					capital_province = { has_holding_type = tribal_holding }
					NOT = { government_has_flag = government_is_tribal }
				}
				# Change government to tribal.
				change_government = tribal_government
			}
			# Conquering elsewhere as a tribal makes you feudal.
			else_if = {
				limit = {
					NOT = {
						capital_province = { has_holding_type = tribal_holding }
					}
					# Might have turned theocratic before from gaining a new capital holding
					#government_has_flag = government_is_tribal
				}
				# Change government to feudal.
				if = {
					limit = {
						capital_province = { has_holding_type = estate_holding }
					}
					change_government = roman_government
				}
				else = {
					change_government = feudal_government
				}
			}
			## Seizing control so things *vaguely* work.
			scope:attacker = { trigger_event = fp1_varangian_adventures.0001 }
			## And giving them a gold bounty to keep them afloat.
			scope:attacker = { add_gold = varangian_adventures_bounty_amount_value }
			# Finally, general cleanup.
			## Move any remaining newly-landless family to scope:attacker's court.
			every_in_list = {
				list = vassal_family_not_processed_list
				limit = { is_ruler = no }
				save_temporary_scope_as = landless_family
				scope:attacker = { add_courtier = scope:landless_family }
			}
			## If scope:attacker wasn't an adventurer before, make them one.
			if = {
				limit = {
					NOT = { has_trait = adventurer }
				}
				add_trait = adventurer
			}
			## Increment their Varangian Adventurer CB tally.
			if = {
				limit = {
					NOT = { has_variable = va_cb_tally }
				}
				set_variable = {
					name = va_cb_tally
					# We set to two initially, since the first war cost prestige already, so we want to pretend you had a value of 1 the first time around.
					value = 2
				}
			}
			else = {
				change_variable = {
					name = va_cb_tally
					add = 1
				}
			}
			# Aaaaaand track the A Dangerous Business achievement.
			if = {
				limit = { has_trait = dwarf }
				add_character_flag = a_dangerous_business_achievement_flag
			}

			if = {
				limit = {
					any_realm_county = {
						NOT = {
							culture = scope:attacker.culture
						}
					}
				}
				random_list = {
					5 = {
						trigger_event = {
							id = migration.0005
							days = {30 50}
						}
					}
					10 = {
						trigger_event = {
							id = migration.0006
							days = {30 50}
						}
					}
					10 = {
						trigger_event = {
							id = migration.0007
							days = {30 50}
						}
					}
					5 = {
						trigger_event = {
							id = migration.0008
							days = {30 50}
						}
					}
				}
			}
			scope:attacker = {
				if = {
					limit = {
						is_independent_ruler = no	
					}
					create_title_and_vassal_change = {
						type = independency
						save_scope_as = going_independent
						add_claim_on_loss = no
					}
					becomes_independent = {
						change = scope:going_independent
					}
					resolve_title_and_vassal_change = scope:going_independent
				}
			}
		}

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		#if = {
	#		limit = {
	#			scope:attacker.primary_title = {
	#				tier = tier_kingdom
	#				is_landless_type_title = yes
	#			}
	#		}
	#		every_in_list = {
	#			list = target_titles
	#			limit = { tier = tier_duchy }
	#			
	#			set_de_jure_liege_title = scope:attacker.primary_title
	#		}
	#	}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}
		
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		setup_invasion_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			change = scope:change
			take_occupied = yes
		}
		resolve_title_and_vassal_change = scope:change

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}

	on_white_peace = {
        #EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
			remove_character_modifier = migration_leader
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}

	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold = {
				gold = 3
				target = scope:defender
				yearly_income = yes
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
			remove_character_modifier = migration_leader
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige = major_prestige_value
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}

		on_lost_aggression_war_discontent_loss = yes
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = MIGRATION_WAR_NAME
	war_name_base = MIGRATION_WAR_NAME_BASE
	cb_name = MIGRATION_NAME_CB

	interface_priority = 100
}

event_nomadic_migration_cb = {
	group = event
	
	allowed_for_character = { 
		NOT = {
			has_character_flag = used_lifetime_migration
		}
		AND = {
			culture = {
				has_cultural_tradition = tradition_nomadic_migrations
			}
			government_has_flag = government_is_nomadic
		}
	}
	allowed_for_character_display_regardless = {
		# Ensure that this is only done every now and then.
		is_independent_ruler = yes
		highest_held_title_tier <= tier_kingdom
		trigger_if = {
			limit = { is_ai = no }
			prestige_level >= medium_prestige_level
		}
		trigger_else = { prestige_level >= medium_prestige_level }
		is_at_war = no
		#is_in_an_activity = no
		is_available = yes
	}
	target_titles = all
	target_title_tier = duchy
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder
	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	cost = {
		prestige = {
			value = 1
		}
	}


	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier = tier_county
					holder = {
						target_is_same_character_or_above = scope:defender
					}
				}
			}
		}
		#Emperors do not deign to migrate. Plus it'll mess up title destruction.
		scope:attacker = { highest_held_title_tier >= tier_empire }
	}

	on_invalidated = {
		scope:attacker = {
			remove_character_flag = used_lifetime_migration
		}
	}

	on_invalidated_desc = msg_invasion_war_invalidated_message
	
	on_declaration = {
		scope:attacker = {
			add_character_flag = used_lifetime_migration
		}
		on_declared_war = yes
		scope:attacker = {
			spawn_army = {
				name = event_troop_default_name
				levies = migration_army_levies_medium
				men_at_arms = {
					type = light_horsemen
					stacks = migration_army_maa_medium
				}
				men_at_arms = {
					type = horse_archers
					stacks = migration_army_maa_medium
				}
				location = scope:attacker.capital_province
				uses_supply = no
				inheritable = yes
			}
			spawn_army = {
				name = event_troop_default_name
				levies = migration_army_levies_medium
				men_at_arms = {
					type = horse_archers
					stacks = migration_army_maa_medium
				}
				men_at_arms = {
					type = light_horsemen
					stacks = migration_army_maa_medium
				}
				location = scope:attacker.capital_province
				uses_supply = no
				inheritable = no
			}

			if = {
				limit = {
					OR = {
						AND = {
							exists = struggle:eastern_iranian_struggle
							migration_levies_value >= 10
							struggle:eastern_iranian_struggle = {
								has_struggle_phase_parameter = more_nomadic_migration_armies
							}
							any_in_list = {
								list = target_titles
								title_capital_county.title_province = {
									geographical_region = TFE_eastern_iranian_struggle_region
								}
							}
							has_cultural_tradition = tradition_nomadic_migrations
						}
						AND = {
							exists = struggle:north_indian_struggle
							migration_levies_value >= 10
							struggle:north_indian_struggle = {
								has_struggle_phase_parameter = more_nomadic_migration_armies
							}
							any_in_list = {
								list = target_titles
								title_capital_county.title_province = {
									geographical_region = TFE_north_indian_struggle_region
								}
							}
							has_cultural_tradition = tradition_nomadic_migrations
						}
					}
				}
				spawn_army = {
					name = event_troop_default_name
					levies = migration_army_levies_small
					men_at_arms = {
						type = light_horsemen
						stacks = migration_army_maa_small
					}
					location = scope:attacker.capital_province
					uses_supply = no
					inheritable = yes
				}
			}
		}

		scope:attacker = {
			set_variable = {
				name = culture_province
				value = 5
			}
			every_realm_county = {
				limit = {
					culture = scope:attacker.culture				
				}
				scope:attacker = {
					change_variable = {
						name = culture_province
						add = 1
					}
				}
			}
		}
	}	

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = { is_local_player = yes }
				}
				desc = nomadic_war_victory_desc_attacker
			}
			desc = nomadic_war_victory_desc
		}
		triggered_desc = {
			trigger = {
				scope:attacker = { is_local_player = yes }
			}
			desc = nomadic_invasion_war_warning_desc
		}
	}
	
	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		# Organise general results for the attacker.
		scope:attacker = {
			set_variable = {
				name = culture_province
				value = 5
			}
			every_realm_county = {
				limit = {
					culture = scope:attacker.culture				
				}
				scope:attacker = {
					change_variable = {
						name = culture_province
						add = 1
					}
				}
			}
			# Set up titles in the new colony.
			## First up, hand over counties in the target duchy to scope:attacker.
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}
			every_in_list = {
				list = target_titles
				custom_tooltip = CONQUEST_CB_TITLE
				every_in_de_jure_hierarchy = {
					continue = {
						OR = {
							NOT = {
								exists = holder
							}
							NOT = {
								holder = {
									target_is_liege_or_above = scope:defender
								}
							}
							AND = {
								scope:attacker.faith = {
									faith_hostility_level_comparison = {
										prev.holder.faith <= scope:defender.faith
									}
								}
								holder = {
									OR = {
										this = scope:defender
										target_is_liege_or_above = scope:defender
									}
								}
							}
						}
						tier > tier_county
					}
					limit = {
						tier = tier_county
						exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
					if = {
						limit = {
							OR = {
								scope:attacker.faith = {
									faith_hostility_level_comparison = { prev.holder.faith >= scope:defender.faith }
								}
								holder.primary_title.tier >= scope:attacker.primary_title.tier
							}
						}
						add_to_temporary_list = titles_taken
					}
					else = {
						holder = { add_to_temporary_list = vassals_taken }
					}
				}
			}
			every_in_list = {
				list = titles_taken
				change_title_holder = {
					holder = scope:attacker
					change = scope:change
					take_baronies = yes
				}
			}
			custom_tooltip = MIGRATION_TOOLTIP
			hidden_effect = {
				if = {
					limit = {
						scope:attacker = {
							has_variable = culture_province
						}
					}
					while = {
						count = scope:attacker.var:culture_province
						random_in_list = {
							list = titles_taken
							random_in_de_jure_hierarchy = {
								limit = {
									tier = tier_county
								}
								set_county_culture = scope:attacker.culture
								set_county_faith = scope:attacker.faith
							}
						}
					}
				}
			}
			every_in_list = {
				list = vassals_taken
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
			## Grab the appropriate duchy for future independence checks.
			random_in_list = {
				list = target_titles
				limit = { tier = tier_duchy }
				save_scope_as = target_duchy
			}
			## Next, if the appropriate duchy doesn't already exist, create it.
			if = {
				limit = {
					any_in_list = {
						list = target_titles
						tier = tier_duchy
						is_title_created = no
					}
				}
				random_in_list = {
					list = target_titles
					limit = { tier = tier_duchy }
					save_scope_as = new_duchy
				}
				create_title_and_vassal_change = {
					type = created
					save_scope_as = change
					add_claim_on_loss = no
				}
				scope:new_duchy = {
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## Else if it does & is a part of scope:defender's sub-realm, usurp it.
			else_if = {
				limit = {
					any_in_list = {
						list = target_titles
						tier = tier_duchy
						holder = {
							OR = {
								this = scope:defender
								any_liege_or_above = { this = scope:defender }
							}
						}
					}
				}
				random_in_list = {
					list = target_titles
					# No need to check all triggers, since there'll only ever be one duchy in the list.
					limit = { tier = tier_duchy }
					save_scope_as = new_duchy
				}
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = yes
				}
				scope:new_duchy = {
					change_title_holder = {
						holder = scope:attacker
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## Else we want a titular duchy.
			else = {
				# To keep tooltips neat, show the core duchy as transferring (preventing a messy "unlanded of" from appearing).
				show_as_tooltip = {
					random_in_list = {
					list = target_titles
						limit = { tier = tier_duchy }
						save_scope_as = new_duchy
					}
					create_title_and_vassal_change = {
						type = created
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:new_duchy = {
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
				# Actual transfer.
				hidden_effect = {
					# Randomising the names a little.
					random_list = {
						25 = {
							create_dynamic_title = {
								tier = duchy
								name = VIKING_STATE_TITLE_NAME
							}
						}
						25 = {
							create_dynamic_title = {
								tier = duchy
								name = NORDIC_STATE_TITLE_NAME
							}
						}
						25 = {
							trigger = {
								any_in_list = {
									list = target_titles
									tier = tier_county
									title_province = {
										geographical_region = world_europe_south_east
										geographical_region = world_europe_east
										geographical_region = world_asia_minor
									}
								}
							}
							create_dynamic_title = {
								tier = duchy
								name = VARYAG_STATE_TITLE_NAME
							}
						}
						25 = {
							create_dynamic_title = {
								tier = duchy
								name = NORSE_STATE_TITLE_NAME
							}
						}
					}
					create_title_and_vassal_change = {
						type = created
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:new_title = {
						set_delete_on_destroy = yes
						set_no_automatic_claims = yes
						set_can_be_named_after_dynasty = no
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
						}
						save_scope_as = new_duchy
					}
					resolve_title_and_vassal_change = scope:change
					# Generate a new CoA
					## We do this in a separate block so that the effect has time to see that the title has a holder, since it'll error otherwise.
					scope:new_title = { generate_coa = yes }
				}
			}
			## Set a new capital.
			### We prefer the de jure capital of the other.
			if = {
				limit = {
					any_in_list = {
						list = target_titles
						this = duchy.title_capital_county
					}
				}
				random_in_list = {
					list = target_titles
					limit = { this = duchy.title_capital_county }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			### Otherwise, tribals go by pure levy count.
			else_if = {
				limit = {
					scope:attacker = { government_has_flag = government_is_tribal }
				}
				ordered_in_list = {
					list = target_titles
					limit = { tier = tier_county }
					order_by = total_county_levies
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			### Everyone else prefers the highest development.
			else = {
				ordered_in_list = {
					list = target_titles
					limit = { tier = tier_county }
					order_by = { add = development_level }
					save_temporary_scope_as = new_capital
					scope:attacker = { set_realm_capital = scope:new_capital }
				}
			}
			# Then re-order stuff in the Old Country.
			## First, we destroy any other ducal titles scope:attacker holds (excepting HoF titles).
			if = {
				limit = {
					any_held_title = {
						tier = tier_kingdom
						NOR = {
							this = title:k_anglia
							this = title:k_juteland
							this = title:k_visigoths
							this = title:k_varini
							this = title:k_thuringians
							this = title:k_rhinefranks
							this = title:k_quadi
							this = title:k_marcomanni
							this = title:k_alani
							this = title:k_hasding_vandals
							this = title:k_siling_vandals
							this = title:k_franks
							this = title:k_gepids
							this = title:k_vandals
							this = title:k_burgundia
							this = title:k_lombardia
							this = title:k_suebi
							this = title:k_vandals
							this = scope:new_duchy
							is_head_of_faith = yes
						}
					}
				}
				every_held_title = {
					limit = {
						tier = tier_duchy
						NOR = {
							this = scope:new_duchy
							is_head_of_faith = yes
						}
					}
					save_temporary_scope_as = excess_duchy
					scope:attacker = { destroy_title = scope:excess_duchy }
				}
			}
			## Sort out vassalised family.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.family_transfer
			every_vassal_or_below = {
				limit = { dynasty = scope:attacker.dynasty }
				add_to_list = vassalised_family_list
			}
			every_held_title = {
				limit = {
					tier = tier_county
					duchy = { is_in_list = target_titles }
				}
				add_to_list = spare_counties_list
			}
			## If there are any to account for, we bring over other landed family members from the Old Country & try to give them counties in the colony.
			if = {
				limit = {
					any_in_list = {
						list = vassalised_family_list
						count >= 1
					}
				}
				# Then iterate through the family members, dishing out titles as appropriate.
				every_in_list = {
					list = vassalised_family_list
					# Players first.
					limit = { is_ai = no }
					# Then NPCs, prioritising counts.
					alternative_limit = { highest_held_title_tier = tier_county }
					# We don't process barons, they can just go landless.
					# Grab the currently affected vassal.
					save_temporary_scope_as = receiving_vassal
					# Then, if there's anything in that list, look at handing out titles.
					if = {
						limit = {
							any_in_list = {
								list = spare_counties_list
								NOT = { this = scope:attacker.capital_county }
								holder = scope:attacker
							}
						}
						random_in_list = {
							list = spare_counties_list
							limit = {
								NOT = { this = scope:attacker.capital_county }
								tier = tier_county
								holder = scope:attacker
							}
							save_temporary_scope_as = spare_county
							create_title_and_vassal_change = {
								type = granted
								save_scope_as = change
								add_claim_on_loss = no
							}
							scope:spare_county = {
								change_title_holder = {
									holder = scope:receiving_vassal
									change = scope:change
								}
							}
							resolve_title_and_vassal_change = scope:change
						}
						# And add them to the post-processing list so we can divy out their lands elsewhere.
						add_to_list = vassal_family_processed_list
					}
					# Otherwise, we're going to have to do something special with this character, so take note of them for later.
					else = { add_to_list = vassal_family_not_processed_list }
				}
			}
			## Distribute scope:attacker's old domains to peasant vassals of the local culture/faith.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.old_domains
			every_held_title = {
				limit = {
					tier = tier_county
					duchy = {
						NOT = { this = scope:target_duchy 
								this = title:k_juteland
								this = title:k_visigoths
								this = title:k_anglia
							}
					}
				}
				# Grab the county for ease of reference.
				save_temporary_scope_as = current_county
				# Create an elevated peasant to claim the county.
				create_character = {
					location = scope:current_county.title_province
					template = old_country_local_warlord_template
					save_temporary_scope_as = local_warlord
				}
				# Assign the seceding title to the new upstart.
				create_title_and_vassal_change = {
					type = usurped
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					scope:current_county = {
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
				# And give them their independence.
				create_title_and_vassal_change = {
					type = conquest
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					if = {
						limit = {
							scope:attacker = {
								is_independent_ruler = yes
							}
						}
						scope:local_warlord = {
							becomes_independent = { change = scope:change }
						}
					}
					else = {
						scope:local_warlord = {
							change_liege = {
								liege = scope:attacker.liege
								change = scope:change
							}
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			## Distribute landed family's domains outside of the colony to peasant vassals of the local culture/faith.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.landed_family_old_domains
			every_in_list = {
				list = vassal_family_processed_list
				every_held_title = {
					limit = {
						tier = tier_county
						duchy = {
							NOT = { this = scope:target_duchy }
						}
					}
					# Grab the county for ease of reference.
					save_temporary_scope_as = current_county
					# Create an elevated peasant to claim the county.
					create_character = {
						location = scope:current_county.title_province
						template = old_country_local_warlord_template
						save_temporary_scope_as = local_warlord
					}
					# Assign the seceding title to the new upstart.
					create_title_and_vassal_change = {
						type = usurped
						save_scope_as = change
						add_claim_on_loss = no
					}
					hidden_effect = {
						scope:current_county = {
							change_title_holder = {
								holder = scope:local_warlord
								change = scope:change
								take_baronies = yes
							}
						}
					}
					resolve_title_and_vassal_change = scope:change
					# And give them their independence.
					create_title_and_vassal_change = {
						type = conquest
						save_scope_as = change
						add_claim_on_loss = no
					}
					hidden_effect = {
						if = {
							limit = {
								scope:attacker = {
									is_independent_ruler = yes
								}
							}
							scope:local_warlord = {
								becomes_independent = { change = scope:change }
							}
						}
						else = {
							scope:local_warlord = {
								change_liege = {
									liege = scope:attacker.liege
									change = scope:change
								}
							}
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			## Give all old vassals outside of the target_titles independence.
			custom_tooltip = fp1_varangian_adventurer_conquest.summaries.old_vassals
			every_vassal = {
				limit = {
					NOT = {
						any_held_title = { duchy = scope:target_duchy }
					}
				}
				save_scope_as = local_warlord
				# And give them their independence.
				create_title_and_vassal_change = {
					type = conquest
					save_scope_as = change
					add_claim_on_loss = no
				}
				hidden_effect = {
					if = {
						limit = {
							scope:attacker = {
								is_independent_ruler = yes
							}
						}
						scope:local_warlord = {
							becomes_independent = { change = scope:change }
						}
					}
					else = {
						scope:local_warlord = {
							change_liege = {
								liege = scope:attacker.liege
								change = scope:change
							}
						}
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			# Sort the governance of the colony.
			## Adjusting the government type as appropriate.
			# Conquering tribes makes you tribal.
			if = {
				limit = {
					capital_province = { has_holding_type = tribal_holding }
					NOT = { government_has_flag = government_is_tribal }
				}
				# Change government to tribal.
				change_government = tribal_government
			}
			# Conquering elsewhere as a tribal makes you feudal.
			else_if = {
				limit = {
					NOT = {
						capital_province = { has_holding_type = tribal_holding }
					}
					# Might have turned theocratic before from gaining a new capital holding
					#government_has_flag = government_is_tribal
				}
				# Change government to feudal.
				if = {
					limit = {
						capital_province = { has_holding_type = estate_holding }
					}
					change_government = roman_government
				}
				else = {
					change_government = feudal_government
				}
			}
			## Seizing control so things *vaguely* work.
			scope:attacker = { trigger_event = fp1_varangian_adventures.0001 }
			## And giving them a gold bounty to keep them afloat.
			scope:attacker = { add_gold = varangian_adventures_bounty_amount_value }
			# Finally, general cleanup.
			## Move any remaining newly-landless family to scope:attacker's court.
			every_in_list = {
				list = vassal_family_not_processed_list
				limit = { is_ruler = no }
				save_temporary_scope_as = landless_family
				scope:attacker = { add_courtier = scope:landless_family }
			}
			## If scope:attacker wasn't an adventurer before, make them one.
			if = {
				limit = {
					NOT = { has_trait = adventurer }
				}
				add_trait = adventurer
			}
		}

		scope:attacker = {
			if = {
				limit = {
					is_independent_ruler = no	
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = going_independent
					add_claim_on_loss = no
				}
				becomes_independent = {
					change = scope:going_independent
				}
				resolve_title_and_vassal_change = scope:going_independent
			}
		}


		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		setup_invasion_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			change = scope:change
			take_occupied = yes
		}
		resolve_title_and_vassal_change = scope:change
	
		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_invasion_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_victory_effect = yes
		scope:attacker = {
			trigger_event = {
				id = migration.0016
				days = 10
			}
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}
	
	on_white_peace = {
        #EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}
	
	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes
		
        #EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_attacker_war_end_glory_gain_high_effect = yes }
		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold = {
				gold = 3
				target = scope:defender
				yearly_income = yes
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige = major_prestige_value
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = medium_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}

		on_lost_aggression_war_discontent_loss = yes
	}
	
	transfer_behavior = transfer
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	transfer_behavior = transfer
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	ai_score_mult = {
		value = TFE_NOMADIC_AI_SCORE_MULT
	}
	
	war_name = NOMADIC_MIGRATION_WAR_NAME
	war_name_base = NOMADIC_MIGRATION_WAR_NAME_BASE
	cb_name = NOMADIC_MIGRATION_CB_NAME
	
	interface_priority = 100

}

hunnic_migration_cb = {
	icon = invasion
	group = event	#Switching this to event will render the CB invisible.

	allowed_for_character = {
		has_title = title:e_hunnic_empire
	}

	allowed_against_character = {
		#Realm must have at least some land in Crimea.
		scope:defender = {
			any_realm_county = {
				title_province = { geographical_region = ghw_region_crimea }
			}
		}
	}

	target_titles = all
	target_title_tier = kingdom
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder
	use_de_jure_wargoal_only = yes
	combine_into_one = yes

	max_attacker_score_from_battles = 200
	max_defender_score_from_battles = 200
	max_defender_score_from_occupation = 25
	max_attacker_score_from_occupation = 150
	full_occupation_by_defender_gives_victory = no
	landless_attacker_needs_armies = no
	attacker_capital_gives_war_score = no

	valid_to_start = {
		scope:target = title:k_pontic_steppe
	}

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier = tier_county
					holder = {
						target_is_same_character_or_above = scope:defender
					}
				}
			}
		}
	}

	on_invalidated = {
	}

	on_invalidated_desc = msg_invasion_war_invalidated_message
	
	on_declaration = {
		on_declared_war = yes
		scope:attacker = {
			add_character_flag = used_lifetime_migration
		}
	}	

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = { is_local_player = yes }
				}
				desc = nomadic_war_victory_desc_attacker
			}
			desc = nomadic_war_victory_desc
		}
		triggered_desc = {
			trigger = {
				scope:attacker = { is_local_player = yes }
			}
			desc = nomadic_invasion_war_warning_desc
		}
	}
	
	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		if = {
			limit = {
				scope:defender = {
					culture = culture:gothic
					NOT = { exists = title:d_ostrogoths.holder }
				}
			}
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:d_ostrogoths = {
				change_title_holder = {
					holder = scope:defender
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
		}
		scope:attacker = { show_pow_release_message_effect = yes }
		
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }

		#If the Huns aren't independent, make them so.
		if = {
			limit = {
				scope:attacker = { is_independent_ruler = no }
			}
			create_title_and_vassal_change = {
				type = independency
				save_scope_as = change
				add_claim_on_loss = no
			}
			change_liege_or_become_independent = {
				CHANGE = scope:change
				VASSAL = scope:attacker
			}
			resolve_title_and_vassal_change = scope:change
		}

		#Take lands within Sarmatia.
		hidden_effect = {
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}
			setup_invasion_cb = {
				titles = target_titles
				attacker = scope:attacker
				defender = scope:defender
				change = scope:change
				take_occupied = no
			}
			every_in_list = {
				list = target_titles

				# Personally seize all duchy titles in k_hungary AND duchy titles personally held by the target king.
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_duchy
						special_invasion_cb_seize_land_in_region_trigger = {
							TARGET_REGION = ghw_region_crimea
							TARGET_KINGDOM = title:k_pontic_steppe
						}
					}
					if = {
						limit = {
							exists = holder
							holder = {
								exists = top_liege
								top_liege = scope:defender

								# Vassal players get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
								NAND = {
									NOT = { this = top_liege }
									is_ai = no
								}
							}
						}
						hidden_effect = {
							# As a security set all the county below the duchy as under transfer in case the defender owned the duchy and the counties below
							every_in_de_jure_hierarchy = {
								limit = {
									tier = tier_county
									exists = holder
									holder = scope:defender
								}
								add_to_temporary_list = county_titles_under_transfer
							}
						}
						custom_description = {
							text = custom_seize_title_and_below_de_jure
							subject = scope:attacker
							object = this
							change_title_holder = {
								holder = scope:attacker
								change = scope:change
								take_baronies = yes
							}
						}
					}
				}

				# Grab counties belonging to duchies that don't exist
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_county
						exists = holder
						holder = {
							top_liege = scope:defender

							# Vassal players get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
							NAND = {
								NOT = { this = top_liege }
								is_ai = no
							}
						}
					}
					hidden_effect = {
						if = { 
							limit = { NOT = { is_in_list = county_titles_under_transfer } } # Theoretically prevents cases in which a title was already on the list
							add_to_temporary_list = county_titles_under_transfer
							change_title_holder = {
								holder = scope:attacker
								change = scope:change
								take_baronies = yes
							}
						}
					}
				}
			}
			resolve_title_and_vassal_change = scope:change
		}

		#Start processing the Crimea-specific effects.
		scope:attacker = {
			launch_hunnic_migration_scripted_effect = { INVADER = scope:attacker }
		}

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_invasion_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }

		if = {
			limit = {
				scope:defender = {
					is_landed = yes
					is_independent_ruler = yes
				}
			}
			scope:defender = {
				create_title_and_vassal_change = {
					type = conquest
					save_scope_as = change
					add_claim_on_loss = no
				}
				change_liege = {
					liege = scope:attacker
					change = scope:change
				}
				resolve_title_and_vassal_change = scope:change
			}
		}

		custom_tooltip = hunnic_subjugation_caucasus_tt
		hidden_effect = {
			scope:attacker = {
				add_prestige = 1500
				add_gold = 250
				spawn_army = {
					name = "Hunnic Invaders"
					levies = 1000
					men_at_arms = {
						type = horse_archers
						stacks = 5
					}
					men_at_arms = {
						type = light_footmen
						stacks = 5
					}
					men_at_arms = {
						type = siege_towers
						stacks = 5
					}
					location = title:b_kyzyl_jar.title_province
					inheritable = no
				}
				spawn_army = {
					name = "Hunnic Invaders"
					levies = 1000
					men_at_arms = {
						type = light_horsemen
						stacks = 5
					}
					men_at_arms = {
						type = horse_archers
						stacks = 5
					}
					men_at_arms = {
						type = siege_towers
						stacks = 5
					}
					location = title:b_mariupol.title_province
					inheritable = no
				}
			}
			every_ruler = {
				limit = {
					is_independent_ruler = yes
					NOT = { has_title = title:e_hunnic_empire }
					NOT = { has_title = title:d_albania }
					NOT = { is_in_list = uh_oh_spaghetti_o }
					any_sub_realm_county = {
						title_capital_county.title_province = { geographical_region = ghw_region_crimea }
					}
				}
				add_to_list = uh_oh_spaghetti_o
			}
			every_in_list = {
				list = uh_oh_spaghetti_o
				save_scope_as = in_trouble
				scope:attacker = {
					start_war = {
						cb = tribal_subjugation_cb
						target = scope:in_trouble
					}
				}
			}
			title:k_pontic_steppe = {
				set_de_jure_liege_title = title:e_hunnic_empire
			}
			title:k_caucasus = {
				set_de_jure_liege_title = title:e_hunnic_empire
			}
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}
	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for doing ok against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }

		# Prestige for the attacker's war allies

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # Not important as the scales are identical
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_white_peace_effect = yes

		scope:attacker = {
			add_prestige = mongol_invasion_cb_prestige_white_peace
		}
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}
	
	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes
		
		scope:attacker = { show_pow_release_message_effect = yes }
		
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_high_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 5
			}
			add_prestige = {
				value = massive_prestige_value
				multiply = -1.0
			}
		}
		
		setup_invasion_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}

		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}
	
		add_truce_attacker_defeat_effect = yes
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}
	
	transfer_behavior = transfer
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	transfer_behavior = transfer
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "NOMADIC_MIGRATION_WAR_NAME"
	war_name_base = "NOMADIC_MIGRATION_WAR_NAME_BASE"
	cb_name = "NOMADIC_MIGRATION_CB_NAME"
	
	interface_priority = 100
	
	use_de_jure_wargoal_only = yes
	
	attacker_wargoal_percentage = 0.5
}