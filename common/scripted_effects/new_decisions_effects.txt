visigothic_rebellion_scripted_effect = {
	$INVADER$ = {
			
		every_liege_or_above = {
			limit = {
				any_held_title = {
						tier >= tier_empire
				}
			}
			save_scope_as = byzantine_emperor
		}

		#If $INVADER$ has both k_hungary & any other kingdom-tier title, destroy the excess titles.
		custom_tooltip = visigothic_rebellion_scripted_effect.tt.custom_roman_illyricum_region_usurped
		custom_tooltip = visigothic_rebellion_scripted_effect.tt.destroy_other_kingdoms
		hidden_effect = {
			if = {
				limit = {
					has_title = title:k_hungary
					any_held_title = {
						tier >= tier_kingdom
						count >= 2
					}
				}
				every_held_title = {
					limit = {
						tier >= tier_kingdom
						NOT = { this = title:k_hungary }
						NOT = { this = title:k_croatia }
						NOT = { this = title:k_visigoths }
					}
					save_temporary_scope_as = excess_kingdom
					$INVADER$ = { destroy_title = scope:excess_kingdom }
				}
			}
		}

		
		#All territory outside Pannonia is given to new holders and/or made independent.
		custom_tooltip = visigothic_rebellion_scripted_effect.tt.romans_move_into_realm
		custom_tooltip = visigothic_rebellion_scripted_effect.tt.territory_outside_illyricum.german_vassals
		hidden_effect = {
			#All direct vassal non-Mogyers are given their independence, unless they hold land within Pannonia.
			every_vassal = {
				limit = {
					NOT = { culture = culture:german }
					highest_held_title_tier >= tier_county
					any_held_title = {
						count = all
						NOT = {
							title_capital_county.title_province = { geographical_region = custom_roman_illyricum }
						}
					}
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				becomes_independent = { change = scope:change }
				resolve_title_and_vassal_change = scope:change
			}
			#... And catch the stragglers. Has to be a separate effect block, or we'll ruin the de facto structure.
			every_vassal_or_below = {
				limit = {
					NOT = { culture = culture:german }
					highest_held_title_tier >= tier_county
					any_held_title = {
						count = all
						NOT = {
							title_capital_county.title_province = { geographical_region = custom_roman_illyricum }
						}
					}
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				becomes_independent = { change = scope:change }
				resolve_title_and_vassal_change = scope:change
			}
			#Reserve a duchy, preferring the capital, for $INVADER$.
			if = {
				limit = { title:k_hungary.title_capital_county.duchy.holder = $INVADER$ }
				title:k_hungary.title_capital_county.duchy = { save_scope_as = reserved_title }
			}
			#... Of course, if we can't have the capital for some reason, grab any random duchy in Pannonia.
			else = {
				random_held_title = {
					#Filter out Syrmia, because Syrmia sucks.
					limit = {
						title_capital_county.title_province = { geographical_region = custom_roman_illyricum }
						tier = tier_duchy
						NOT = { this = title:d_syrmia }
					}
					#But if we have no other choice, Syrmia is better than no duchy.
					limit = {
						title_capital_county.title_province = { geographical_region = custom_roman_illyricum }
						tier = tier_duchy
					}
					#If we have no possible duchy, make sure to reserve at least *one* county within Pannonia.
					alternative_limit = {
						title_capital_county.title_province = { geographical_region = custom_roman_illyricum }
					}
					save_scope_as = reserved_title
				}
			}
			#Find all Mogyer vassals outside of Pannonia.
			every_vassal_or_below = {
				limit = {
					culture = culture:german
					highest_held_title_tier >= tier_county
				}
				add_to_list = german_vassals_list
			}
			#Find all Pannonian titles held by $INVADER$ that aren't reserved.
			every_held_title = {
				limit = {
					title_capital_county.title_province = { geographical_region = custom_roman_illyricum }
					#Technically we could use any_this_title_or_de_jure_above for the following two checks, but it was being problematic and this does the same thing (just more cumbersomely).
					OR = {
						tier = tier_county
						tier = tier_duchy
					}
					NOT = { this = scope:reserved_title }
				}
				add_to_list = spare_illyirian_titles_list
			}
			#Attempt to give out Pannonian holdings to the vassals who are about to lose land, prioritising players by tier, then NPCs by tier.
			##Now, process duchy title assignment.
			every_in_list = {
				list = german_vassals_list
				#Players first.
				limit = {
					is_ai = no
					launch_hungarian_migration_ducal_processing_trigger = yes
				}
				#NPCs after that.
				alternative_limit = {
					is_ai = yes
					launch_hungarian_migration_ducal_processing_trigger = yes
				}
				#Grab the appropriate vassal.
				save_temporary_scope_as = receiving_vassal
				#If $INVADER$ has a suitable spare ducal title, hand it over.
				if = {
					limit = {
						any_in_list = {
							list = spare_illyirian_titles_list
							tier = tier_duchy
							holder = $INVADER$
						}
					}
					#Save the suitable title.
					random_in_list = {
						list = spare_illyirian_titles_list
						limit = {
							tier = tier_duchy
							holder = $INVADER$
						}
						every_in_de_jure_hierarchy = {
							limit = {
								holder = $INVADER$
								tier >= tier_county
							}
							add_to_list = multiple_donated_titles
						}
					}
					#Hand it to the receiving vassal.
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = no
					}
					every_in_list = {
						list = multiple_donated_titles
						save_temporary_scope_as = donated_title
						scope:donated_title = {
							change_title_holder = {
								holder = scope:receiving_vassal
								change = scope:change
							}
						}
						remove_from_list = multiple_donated_titles
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			##Finally, process county title assignment.
			###First, attempt to pair de facto sub-vassals to their lieges.
			every_in_list = {
				list = german_vassals_list
				#Players first.
				limit = {
					is_ai = no
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#NPCs after that.
				alternative_limit = {
					is_ai = yes
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#Grab the appropriate vassal.
				save_temporary_scope_as = receiving_vassal
				#If $INVADER$ has a suitable spare county title, hand it over.
				if = {
					#Try to pair vassals with their lieges first.
					limit = {
						#Direct vassals shouldn't bother to try pairing.
						NOT = { liege = $INVADER$ }
						any_in_list = {
							list = spare_illyirian_titles_list
							launch_hungarian_migration_sub_vassal_liege_pairing_trigger = yes
						}
					}
					#Save the suitable title.
					random_in_list = {
						list = spare_illyirian_titles_list
						limit = {
							#Direct vassals shouldn't bother to try pairing.
							NOT = { scope:receiving_vassal.liege = $INVADER$ }
							#Run the stock trigger.
							launch_hungarian_migration_sub_vassal_liege_pairing_trigger = yes
							#Don't give away the new liege's primary title's capital county.
							NOT = {	this = holder.primary_title.title_capital_county }
						}
						save_temporary_scope_as = donated_title
					}
					#Hand it to the receiving vassal.
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:donated_title = {
						change_title_holder = {
							holder = scope:receiving_vassal
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			###Then, filter through any remaining direct vassals.
			every_in_list = {
				list = german_vassals_list
				#Players first.
				limit = {
					is_ai = no
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#NPCs after that.
				alternative_limit = {
					is_ai = yes
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#Grab the appropriate vassal.
				save_temporary_scope_as = receiving_vassal
				#If $INVADER$ has a suitable spare county title, hand it over.
				if = {
					#Otherwise, grab any spare valid title that $INVADER$ has lying around.
					limit = {
						any_in_list = {
							list = spare_illyirian_titles_list
							launch_hungarian_migration_direct_vassal_requirements_trigger = { INVADER = $INVADER$ }
						}
					}
					#Save the suitable title.
					random_in_list = {
						list = spare_illyirian_titles_list
						limit = {
							launch_hungarian_migration_direct_vassal_requirements_trigger = { INVADER = $INVADER$ }
						}
						save_temporary_scope_as = donated_title
					}
					#Hand it to the receiving vassal.
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:donated_title = {
						change_title_holder = {
							holder = scope:receiving_vassal
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			##Clean-up: any landless characters should move to $INVADER$'s court.
			every_in_list = {
				list = german_vassals_list
				limit = { is_ruler = no}
				save_temporary_scope_as = landless_german_vassal
				$INVADER$ = { add_courtier = scope:landless_german_vassal }
			}
			#Sum all remaining territory outside of Pannonia & give that territory to created local characters.
			##Start by trying to group duchies.
			every_sub_realm_title = {
				#First we try to make duchy power blocks.
				if = {
					#Grab duchies outside of Pannonia.
					limit = {
						NOT = {
							title_capital_county.title_province = { geographical_region = custom_roman_illyricum }
						}
						tier = tier_duchy
					}
					save_temporary_scope_as = seceding_duchy
					#Now grab the duchy & any sub-realm counties beneath it outside of Pannonia, and filter them to a list for processing.
					scope:seceding_duchy = {
						every_in_de_jure_hierarchy = {
							limit = {
								tier >= tier_county
								OR = {
									holder = $INVADER$
									holder = {
										any_liege_or_above = { this = $INVADER$ }
									}
								}
							}
							add_to_temporary_list = seceding_duchy_list
						}
					}
					#Create a local peasant warlord for the duchy & counties.
					create_character = {
						location = scope:seceding_duchy.title_capital_county.title_province
						template = post_migration_local_warlord_template
						save_scope_as = local_warlord
					}
					#Assign the seceding titles to the new peasant warlord.
					create_title_and_vassal_change = {
						type = usurped
						save_scope_as = change
						add_claim_on_loss = no
					}
					every_in_list = {
						list = seceding_duchy_list
						limit = {
							NAND = {
								tier = tier_county
								title_province = { geographical_region = custom_hungary }
							}
						}
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
						remove_from_list = seceding_duchy_list
					}
					resolve_title_and_vassal_change = scope:change
					#And give the warlord their independence.
					create_title_and_vassal_change = {
						type = usurped
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:local_warlord = {
						change_liege = { 
						liege = scope:byzantine_emperor
						change = scope:change }
					}
					resolve_title_and_vassal_change = scope:change
				}	
			}		
		}
		create_title_and_vassal_change = {
			type = swear_fealty
			save_scope_as = change
			add_claim_on_loss = no
		}
		scope:attacker = {
			change_liege = {
				liege = scope:defender
				change = scope:change
			}
			resolve_title_and_vassal_change = scope:change
		}
	}
}

### I'm not sure why this one is imported, it's identical to the vanilla one - except that it wasn't properly updated for 1.5
# reclaim_britannia_decision_effect = {
	# every_sub_realm_county = {
		# limit = {
			# NOR = {
				
				# culture_group = culture_group:goidelic_group
				# culture_group = culture_group:brythonic_group
			# }
			# title_province = { geographical_region = world_europe_west_britannia }
		# }
		# custom = british_isles.0001.custom
		# add_county_modifier = {
			# modifier = reclaim_britannia_culture_modifier
			# days = 3650
		# }
	# }
	# capital_county = {
		# set_county_culture = root.culture
	# }
	# if = {
		# limit = {
			# culture_group = culture_group:goidelic_group
		# }
		# give_nickname = nick_the_tuatha_de_danann
	# }
	# else = {
		# give_nickname = nick_pendragon
	# }
# }

establish_red_sea_effect = { # - Hróðvitnir
	show_as_tooltip = {
		every_held_title = {
			custom = create_title_every_held_kingdom
			limit = {
				tier = tier_kingdom
			}
			custom_tooltip = create_custom_empire_de_jure_changes
		}
	}
	hidden_effect = {
		save_scope_as = founder
		primary_title = {
			save_scope_as = old_title
		}
		if = {
			limit = { primary_title = title:k_abyssinia }
			title:e_red_sea = {
				set_capital_county = title:k_abyssinia.title_capital_county
			}
		}
		if = {
			limit = { primary_title = title:k_adal }
			title:e_red_sea = {
				set_capital_county = title:k_adal.title_capital_county
			}
		}
		if = {
			limit = { primary_title = title:k_blemmyia }
			title:e_red_sea = {
				set_capital_county = title:k_blemmyia.title_capital_county
			}
		}
		if = {
			limit = { primary_title = title:k_yemen }
			title:e_red_sea = {
				set_capital_county = title:k_yemen.title_capital_county
			}
		}
		every_held_title = {
			limit = {
				tier = tier_kingdom
			}
			if = {
				limit = {
					#Check if you need to notify a player
					exists = empire
					empire = {
						exists = holder
						holder = {
							NOT = { this = root }
						}
					}
				}
				add_to_temporary_list = kingdoms_for_notification
				root = {
					save_temporary_scope_value_as = {
						name = send_notifications
						value = yes
					}
				}
				set_de_jure_liege_title = scope:new_title
			}
		}
		every_sub_realm_county = {
			limit = {
				exists = kingdom
				NOT = { exists = kingdom.holder }
				holder.top_liege = root
				kingdom = {
					save_temporary_scope_as = test_kingdom
				}
				holder.top_liege = {
					completely_controls = scope:test_kingdom
				}
			}
			if = {
				limit = {
					NOT = {
						kingdom = {
							is_in_list = additional_de_jure_kingdoms
						}
					}
				}
				kingdom = {
					set_de_jure_liege_title = title:e_red_sea
					add_to_list = additional_de_jure_kingdoms
				}
			}
		}
		set_primary_title_to = scope:new_title
	}
	create_title_and_vassal_change = {
		type = created
		save_scope_as = title_change
		add_claim_on_loss = no
	}
	title:e_red_sea = {
		change_title_holder = {
			holder = scope:founder
			change = scope:title_change
		}
		save_scope_as = new_title
	}
	resolve_title_and_vassal_change = scope:title_change
	if = {
		#To keep you stable, we give you a nice permanent modifier.
		if = {
			limit = { is_male = yes }
			add_character_modifier = { modifier = red_king_modifier }
		}
		else = {
			add_character_modifier = { modifier = red_queen_modifier }
		}
	}
	dynasty = {
		add_dynasty_modifier = {
			modifier = red_monarchs_modifier
			years = 1000
		}
	}
	every_held_title = {
		limit = {
			is_landless_type_title = no
			tier = tier_kingdom
		}
		set_de_jure_liege_title = title:e_red_sea
	}
	root.primary_title = {
		every_in_de_facto_hierarchy = {
		limit = {
			is_landless_type_title = no
			tier = tier_kingdom
		}
		set_de_jure_liege_title = title:e_red_sea
		}
	}
	every_sub_realm_county = {
		limit = {
			exists = kingdom
			NOT = { exists = kingdom.holder }
			holder.top_liege = root
			kingdom = {
				save_temporary_scope_as = test_kingdom
			}
			holder.top_liege = {
				completely_controls = scope:test_kingdom
			}
		}
		if = {
			limit = {
				NOT = {
					kingdom = {
						is_in_list = additional_de_jure_kingdoms
					}
				}
			}
			kingdom = {
				set_de_jure_liege_title = scope:new_title
				add_to_list = additional_de_jure_kingdoms
			}
		}
	}
	set_primary_title_to = title:e_red_sea
}

restore_the_west_effect = { # Restore Western Rome - Hróðvitnir
	create_title_and_vassal_change = {
		type = created
		save_scope_as = change
		add_claim_on_loss = no
	}
	title:e_western_roman_empire = {
		change_title_holder = {
			holder = root
			change = scope:change
		}
	}
	resolve_title_and_vassal_change = scope:change
	hidden_effect = { set_primary_title_to = title:e_western_roman_empire }
	hidden_effect = { add_character_flag = flag_restorer_of_rome }
}

restore_the_east_effect = { # Restore Eastern Rome - Hróðvitnir
	create_title_and_vassal_change = {
		type = created
		save_scope_as = change
		add_claim_on_loss = no
	}
	title:e_byzantium = {
		change_title_holder = {
			holder = root
			change = scope:change
		}
	}
	resolve_title_and_vassal_change = scope:change
	hidden_effect = { set_primary_title_to = title:e_byzantium }
	hidden_effect = { add_character_flag = flag_restorer_of_rome }
}

nomadic_migration_effect = {
	$INVADER$ = {
		hidden_effect = {
			if = {
				limit = {
					has_title = $TITLE_TARGET$
					any_held_title = {
						tier >= tier_kingdom
						count >= 2
					}
				}
				every_held_title = {
					limit = {
						tier >= tier_kingdom
						NOT = { this = $TITLE_TARGET$ }
					}
					save_temporary_scope_as = excess_kingdom
					$INVADER$ = { destroy_title = scope:excess_kingdom }
				}
			}
		}
		hidden_effect = {
			#All direct vassal non-Mogyers are given their independence, unless they hold land within Pannonia.
			every_vassal = {
				limit = {
					highest_held_title_tier >= tier_county
					any_held_title = {
						count = all
					}
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				becomes_independent = { change = scope:change }
				resolve_title_and_vassal_change = scope:change
			}
			#... And catch the stragglers. Has to be a separate effect block, or we'll ruin the de facto structure.
			every_vassal_or_below = {
				limit = {
					highest_held_title_tier >= tier_county
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				becomes_independent = { change = scope:change }
				resolve_title_and_vassal_change = scope:change
			}
			#Reserve a duchy, preferring the capital, for $INVADER$.
			if = {
				limit = { $TITLE_TARGET$.title_capital_county.duchy.holder = $INVADER$ }
				$TITLE_TARGET$.title_capital_county.duchy = { save_scope_as = reserved_title }
			}
			#... Of course, if we can't have the capital for some reason, grab any random duchy in Pannonia.
			else = {
				random_held_title = {
					limit = {
						tier = tier_duchy
					}
					save_scope_as = reserved_title
				}
			}
			#Find all Mogyer vassals outside of Pannonia.
			every_vassal_or_below = {
				limit = {
					highest_held_title_tier >= tier_county
				}
				add_to_list = german_vassals_list
			}
			#Find all Pannonian titles held by $INVADER$ that aren't reserved.
			every_held_title = {
				limit = {
					#Technically we could use any_this_title_or_de_jure_above for the following two checks, but it was being problematic and this does the same thing (just more cumbersomely).
					OR = {
						tier = tier_county
						tier = tier_duchy
					}
					NOT = { this = scope:reserved_title }
				}
				add_to_list = spare_illyirian_titles_list
			}
			#Attempt to give out Pannonian holdings to the vassals who are about to lose land, prioritising players by tier, then NPCs by tier.
			##Now, process duchy title assignment.
			every_in_list = {
				list = german_vassals_list
				#Players first.
				limit = {
					is_ai = no
					launch_hungarian_migration_ducal_processing_trigger = yes
				}
				#NPCs after that.
				alternative_limit = {
					is_ai = yes
					launch_hungarian_migration_ducal_processing_trigger = yes
				}
				#Grab the appropriate vassal.
				save_temporary_scope_as = receiving_vassal
				#If $INVADER$ has a suitable spare ducal title, hand it over.
				if = {
					limit = {
						any_in_list = {
							list = spare_illyirian_titles_list
							tier = tier_duchy
							holder = $INVADER$
						}
					}
					#Save the suitable title.
					random_in_list = {
						list = spare_illyirian_titles_list
						limit = {
							tier = tier_duchy
							holder = $INVADER$
						}
						every_in_de_jure_hierarchy = {
							limit = {
								holder = $INVADER$
								tier >= tier_county
							}
							add_to_list = multiple_donated_titles
						}
					}
					#Hand it to the receiving vassal.
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = no
					}
					every_in_list = {
						list = multiple_donated_titles
						save_temporary_scope_as = donated_title
						scope:donated_title = {
							change_title_holder = {
								holder = scope:receiving_vassal
								change = scope:change
							}
						}
						remove_from_list = multiple_donated_titles
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			##Finally, process county title assignment.
			###First, attempt to pair de facto sub-vassals to their lieges.
			every_in_list = {
				list = german_vassals_list
				#Players first.
				limit = {
					is_ai = no
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#NPCs after that.
				alternative_limit = {
					is_ai = yes
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#Grab the appropriate vassal.
				save_temporary_scope_as = receiving_vassal
				#If $INVADER$ has a suitable spare county title, hand it over.
				if = {
					#Try to pair vassals with their lieges first.
					limit = {
						#Direct vassals shouldn't bother to try pairing.
						NOT = { liege = $INVADER$ }
						any_in_list = {
							list = spare_illyirian_titles_list
							launch_hungarian_migration_sub_vassal_liege_pairing_trigger = yes
						}
					}
					#Save the suitable title.
					random_in_list = {
						list = spare_illyirian_titles_list
						limit = {
							#Direct vassals shouldn't bother to try pairing.
							NOT = { scope:receiving_vassal.liege = $INVADER$ }
							#Run the stock trigger.
							launch_hungarian_migration_sub_vassal_liege_pairing_trigger = yes
							#Don't give away the new liege's primary title's capital county.
							NOT = {	this = holder.primary_title.title_capital_county }
						}
						save_temporary_scope_as = donated_title
					}
					#Hand it to the receiving vassal.
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:donated_title = {
						change_title_holder = {
							holder = scope:receiving_vassal
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			###Then, filter through any remaining direct vassals.
			every_in_list = {
				list = german_vassals_list
				#Players first.
				limit = {
					is_ai = no
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#NPCs after that.
				alternative_limit = {
					is_ai = yes
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#Grab the appropriate vassal.
				save_temporary_scope_as = receiving_vassal
				#If $INVADER$ has a suitable spare county title, hand it over.
				if = {
					#Otherwise, grab any spare valid title that $INVADER$ has lying around.
					limit = {
						any_in_list = {
							list = spare_illyirian_titles_list
							launch_hungarian_migration_direct_vassal_requirements_trigger = { INVADER = $INVADER$ }
						}
					}
					#Save the suitable title.
					random_in_list = {
						list = spare_illyirian_titles_list
						limit = {
							launch_hungarian_migration_direct_vassal_requirements_trigger = { INVADER = $INVADER$ }
						}
						save_temporary_scope_as = donated_title
					}
					#Hand it to the receiving vassal.
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:donated_title = {
						change_title_holder = {
							holder = scope:receiving_vassal
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			##Clean-up: any landless characters should move to $INVADER$'s court.
			every_in_list = {
				list = german_vassals_list
				limit = { is_ruler = no}
				save_temporary_scope_as = landless_german_vassal
				$INVADER$ = { add_courtier = scope:landless_german_vassal }
			}
			#Sum all remaining territory outside of Pannonia & give that territory to created local characters.
			##Start by trying to group duchies.
			every_sub_realm_title = {
				#First we try to make duchy power blocks.
				if = {
					#Grab duchies outside of Pannonia.
					limit = {
						NOT = {
							title_capital_county.title_province = { geographical_region = custom_roman_illyricum }
						}
						tier = tier_duchy
					}
					save_temporary_scope_as = seceding_duchy
					#Now grab the duchy & any sub-realm counties beneath it outside of Pannonia, and filter them to a list for processing.
					scope:seceding_duchy = {
						every_in_de_jure_hierarchy = {
							limit = {
								tier >= tier_county
								OR = {
									holder = $INVADER$
									holder = {
										any_liege_or_above = { this = $INVADER$ }
									}
								}
							}
							add_to_temporary_list = seceding_duchy_list
						}
					}
					#Create a local peasant warlord for the duchy & counties.
					create_character = {
						location = scope:seceding_duchy.title_capital_county.title_province
						template = post_migration_local_warlord_template
						save_scope_as = local_warlord
					}
					#Assign the seceding titles to the new peasant warlord.
					create_title_and_vassal_change = {
						type = usurped
						save_scope_as = change
						add_claim_on_loss = no
					}
					every_in_list = {
						list = seceding_duchy_list
						limit = {
							NAND = {
								tier = tier_county
								title_province = { geographical_region = custom_hungary }
							}
						}
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
						remove_from_list = seceding_duchy_list
					}
					resolve_title_and_vassal_change = scope:change
					scope:local_warlord = {
						random_held_title = {
							limit = {
								tier = tier_county
							}
							save_scope_as = new_capital_warlord
						}
						set_realm_capital = scope:new_capital_warlord
					}
				}	
			}		
		}
		
	}
}

set_obligation_if_changed_effect = {
	if = {
		limit = {
			exists = local_var:$OBLIGATION_TYPE$
			local_var:$OBLIGATION_TYPE$ != vassal_contract_obligation_level:$OBLIGATION_TYPE$
		}
		vassal_contract_set_obligation_level = {
			type = $OBLIGATION_TYPE$
			level = local_var:$OBLIGATION_TYPE$
		}
	}
}

new_official_imperial_faith_effect = {
	if = {
		limit = { exists = scope:old_faith }
		scope:old_faith = {
			custom_tooltip = new_official_imperial_faith_decision_effect_old_faith_tt
			change_fervor = {
				value = medium_fervor_loss
				desc = fervor_loss_official_imperial_faith
			}
		}
	}
	scope:empire = {
		set_variable = {
			name = official_imperial_faith
			value = scope:new_faith
		}
	}
	scope:new_faith = {
		custom_tooltip = new_official_imperial_faith_decision_effect_new_faith_tt
		change_fervor = {
			value = medium_fervor_gain
			desc = fervor_gain_official_imperial_faith
		}
	}
	
	scope:emperor = {
		every_realm_county = {
			custom = new_official_imperial_faith_decision_effect_conversion_tt
			
			custom_tooltip = new_official_imperial_faith_decision_effect_conversion_non_religion_tt
			custom_tooltip = new_official_imperial_faith_decision_effect_conversion_religion_tt
			hidden_effect = {
				if = {
					limit = {
						NOT = { faith = scope:new_faith }
						NOT = { religion = scope:new_faith.religion }
					}
					random = {
						chance = 10
						set_county_faith = scope:new_faith
					}
				}
				else_if = {
					limit = {
						NOT = { faith = scope:new_faith }
						religion = scope:new_faith.religion
					}
					random = {
						chance = 40
						set_county_faith = scope:new_faith
					}
				}
			}
		}
	}
	
	### Set the Empire as the religious head title if you have the Imperial Head of Faith doctrine
	if = {
		limit = { scope:new_faith = { has_doctrine = doctrine_imperial_head } }
		
		# It doesn't exist? We create it!
		if = {
			limit = { NOT = { exists = scope:new_faith.religious_head_title } }
			custom_tooltip = new_official_imperial_faith_effect_primary_empire_becomes_hof_title_tt
			scope:new_faith = { set_religious_head_title = scope:empire }
			change_government = imperial_cult_government
		}
		
		### TODO: That
		# # It exists? We actually get a cb to become the new rel head!
		# else_if = {
			# limit = { NOT = { has_title = scope:new_faith.religious_head_title } }
			# custom_tooltip = new_official_imperial_faith_effect_can_challenge_hof_title_tt
		# }
	}
}

# Just give the variable to the title
new_official_imperial_faith_effect_skip_effects = {
	$EMPIRE$ = {
		set_variable = {
			name = official_imperial_faith
			value = $FAITH$
		}
	}
}

reject_official_imperial_faith_effect = {
	custom_tooltip = reject_official_imperial_faith_effect_tt
	scope:empire = {
		remove_variable = official_imperial_faith
	}
	if = {
		limit = {
			AND = {
				exists = faith.religious_head_title
				faith.religious_head_title = scope:empire
			}
		}
		faith = { remove_religious_head_title = yes }
		change_government = imperial_government
	}
}

titular_settle_effect = {
	show_as_tooltip = {
		every_held_title = {
			custom = create_title_every_held_duchy
			limit = {
				tier = tier_duchy
			}
			custom_tooltip = create_custom_kingdom_de_jure_changes
		}
	}

	hidden_effect = {
		primary_title = {
			limit = {
				is_titular = yes
			}
			save_scope_as = titular_kingdom
		}

		create_title_and_vassal_change = {
			type = created
			save_scope_as = change
			add_claim_on_loss = no
		}
		
		resolve_title_and_vassal_change = scope:change

		every_sub_realm_county = {
			if = {
				limit = {
					exists = empire
				}
				empire = {
					if = {
						limit = {
							NOT = {
								is_in_list = potential_empires
							}
						}
						add_to_list = potential_empires
					}
				}
			}
		}
		if = {
			limit = {
				any_in_list = {
					list = potential_empires
					count > 0
				}
			}
			ordered_in_list = {
				list = potential_empires
				order_by = {
					every_in_de_jure_hierarchy = {
						continue = {
							tier > tier_county
						}
						limit = {
							tier = tier_county
							holder.top_liege = root
						}
						add = 1
					}
				}
				position = 0
				save_scope_as = old_empire
			}
		}
		if = {
			limit = {
				exists = scope:old_empire
			}
			scope:titular_kingdom = {
				set_de_jure_liege_title = scope:old_empire
			}
		}

		every_held_title = {
			limit = {
				tier = tier_duchy
			}
			if = {
				limit = {
					#Check if you need to notify a player
					OR = {
						AND = {
							exists = kingdom
							kingdom = {
								exists = holder
								holder = {
									NOT = { this = root }
									is_ai = no
								}
							}
						}
						AND = {
							exists = empire
							empire = {
								exists = holder
								holder = {
									NOT = { this = root }
									is_ai = no
								}
							}
						}
					}
				}
				add_to_temporary_list = duchy_for_notification
				root = {
					save_temporary_scope_value_as = {
						name = send_notifications
						value = yes
					}
				}
			}
			set_de_jure_liege_title = scope:titular_kingdom
		}

		every_sub_realm_county = {
			limit = {
				exists = duchy
				OR = {
					AND = {
						exists = duchy.holder
						holder.top_liege = root
					}
					NOT = { exists = duchy.holder }
				}
				duchy = {
					save_temporary_scope_as = test_duchy
				}
				holder.top_liege = {
					completely_controls = scope:test_duchy
				}
			}
			if = {
				limit = {
					NOT = {
						duchy = {
							is_in_list = additional_de_jure_duchies
						}
					}
				}
				duchy = {
					set_de_jure_liege_title = scope:titular_kingdom
					add_to_list = additional_de_jure_duchies
				}
			}
		}
	}
}

reopen_catechetical_school_alexandria_effect = {
	every_religion_global = {
		every_faith = {
			limit = { has_doctrine = tenet_alexandrian_catechism }
			remove_doctrine = tenet_alexandrian_catechism
			add_doctrine = tenet_alexandrian_catechism_reformed
		}
	}
	
	$MAIN_FAITH$ = {
		change_fervor = {
			value = medium_fervor_gain
			desc = fervor_gain_reopen_catechetical_school_alexandria
		}
	}
}

found_kingdom_of_livonia_decision_scripted_effect = {
	create_title_and_vassal_change = {
		type = created
		save_scope_as = title_change
		add_claim_on_loss = no
	}
	title:k_livonia = {
		change_title_holder = {
			holder = scope:founder
			change = scope:title_change
		}
	}
	resolve_title_and_vassal_change = scope:title_change

	title:d_latgalians = { set_de_jure_liege_title = title:k_livonia }
	title:d_courland = { set_de_jure_liege_title = title:k_livonia }
	title:d_livonia = { set_de_jure_liege_title = title:k_livonia }
	if = {
		limit = {
			title:d_esthonia = { holder = root }
		}
		title:d_esthonia = { set_de_jure_liege_title = title:k_livonia }
	}
	if = {
		limit = {
			has_faith = faith:baltic_pagan
			root.culture = { NOT = { has_innovation = innovation_longboats } }
		}
		root.culture = { add_innovation = innovation_longboats }
	}
	title:k_lithuania = {
		set_title_name = LITHUANIA
	}
}

found_kingdom_of_prussia_decision_scripted_effect = {
	create_title_and_vassal_change = {
		type = created
		save_scope_as = title_change
		add_claim_on_loss = no
	}
	title:k_prussia = {
		change_title_holder = {
			holder = scope:founder
			change = scope:title_change
		}
	}
	resolve_title_and_vassal_change = scope:title_change

	title:d_prussia = { set_de_jure_liege_title = title:k_prussia }
	title:d_masuria = { set_de_jure_liege_title = title:k_prussia }
	if = {
		limit = {
			has_faith = faith:baltic_pagan
			root.culture = { NOT = { has_innovation = innovation_longboats } }
		}
		root.culture = { add_innovation = innovation_longboats }
	}
	title:k_lithuania = {
		set_title_name = LITHUANIA
	}
}

unite_the_southern_slavs_decision_effects = {
	create_title_and_vassal_change = {
		type = created
		save_scope_as = title_change
		add_claim_on_loss = no
	}
	title:e_yugoslavia = {
		change_title_holder = {
			holder = scope:southern_slav_uniter
			change = scope:title_change
		}
	}
	resolve_title_and_vassal_change = scope:title_change

	#Prestige
	add_prestige = massive_prestige_gain

	#Innovations
	culture = {
		add_random_innovation = culture_group_military
		add_random_innovation = culture_group_civic
	}

	#Handle de jure drift & destructions of other kingdom titles
	title:k_croatia = { add_to_list = south_slavic_kingdoms }
	title:k_serbia = { add_to_list = south_slavic_kingdoms }
	title:k_bulgaria = { add_to_list = south_slavic_kingdoms }
	title:k_dacia = { add_to_list = south_slavic_kingdoms }
	title:k_moldavia = { add_to_list = south_slavic_kingdoms }

	custom_tooltip = unite_the_southern_slavs_decision_titles_tt
	hidden_effect = {
		every_in_list = {
			list = south_slavic_kingdoms
			limit = {
				NOT = { this = scope:southern_slav_uniter.primary_title }
				scope:southern_slav_uniter = { completely_controls = prev }
			}

			#De jure shift all held west slavic titles into your primary title
			set_de_jure_liege_title = title:e_yugoslavia

			#Destroys them all!
		}
	}
}

#mostly taken from vanilla mogyer stuff
mass_migration_effect = {
	$INVADER$ = {
		hidden_effect = {
			if = {
				limit = {
					has_title = $TITLE_TARGET$
					any_held_title = {
						tier >= tier_kingdom
						count >= 2
					}
				}
				every_held_title = {
					limit = {
						tier >= tier_kingdom
						NOT = { this = $TITLE_TARGET$ }
					}
					save_temporary_scope_as = excess_kingdom
					$INVADER$ = { destroy_title = scope:excess_kingdom }
				}
			}
		}
		hidden_effect = {
			#All direct vassal non-Mogyers are given their independence, unless they hold land within Pannonia.
			every_vassal = {
				limit = {
					highest_held_title_tier >= tier_county
					NOT = {
						any_held_title = {
							kingdom = $TITLE_TARGET$
						}
					}
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				becomes_independent = { change = scope:change }
				resolve_title_and_vassal_change = scope:change
			}
			#... And catch the stragglers. Has to be a separate effect block, or we'll ruin the de facto structure.
			every_vassal_or_below = {
				limit = {
					highest_held_title_tier >= tier_county
					NOT = {
						any_held_title = {
							kingdom = $TITLE_TARGET$
						}
					}
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				becomes_independent = { change = scope:change }
				resolve_title_and_vassal_change = scope:change
			}
			#Reserve a duchy, preferring the capital, for $INVADER$.
			if = {
				limit = { $TITLE_TARGET$.title_capital_county.duchy.holder = $INVADER$ }
				$TITLE_TARGET$.title_capital_county.duchy = { save_scope_as = reserved_title }
			}
			#... Of course, if we can't have the capital for some reason, grab any random duchy in Pannonia.
			else = {
				random_held_title = {
					limit = {
						tier = tier_duchy
					}
					save_scope_as = reserved_title
				}
			}
			#Find all Mogyer vassals outside of Pannonia.
			every_vassal_or_below = {
				limit = {
					highest_held_title_tier >= tier_county
				}
				add_to_list = german_vassals_list
			}
			#Find all Pannonian titles held by $INVADER$ that aren't reserved.
			every_held_title = {
				limit = {
					#Technically we could use any_this_title_or_de_jure_above for the following two checks, but it was being problematic and this does the same thing (just more cumbersomely).
					OR = {
						tier = tier_county
						tier = tier_duchy
					}
					NOT = { this = scope:reserved_title }
				}
				add_to_list = spare_illyirian_titles_list
			}
			#Attempt to give out Pannonian holdings to the vassals who are about to lose land, prioritising players by tier, then NPCs by tier.
			##Now, process duchy title assignment.
			every_in_list = {
				list = german_vassals_list
				#Players first.
				limit = {
					is_ai = no
					launch_hungarian_migration_ducal_processing_trigger = yes
				}
				#NPCs after that.
				alternative_limit = {
					is_ai = yes
					launch_hungarian_migration_ducal_processing_trigger = yes
				}
				#Grab the appropriate vassal.
				save_temporary_scope_as = receiving_vassal
				#If $INVADER$ has a suitable spare ducal title, hand it over.
				if = {
					limit = {
						any_in_list = {
							list = spare_illyirian_titles_list
							tier = tier_duchy
							holder = $INVADER$
						}
					}
					#Save the suitable title.
					random_in_list = {
						list = spare_illyirian_titles_list
						limit = {
							tier = tier_duchy
							holder = $INVADER$
						}
						every_in_de_jure_hierarchy = {
							limit = {
								holder = $INVADER$
								tier >= tier_county
							}
							add_to_list = multiple_donated_titles
						}
					}
					#Hand it to the receiving vassal.
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = no
					}
					every_in_list = {
						list = multiple_donated_titles
						save_temporary_scope_as = donated_title
						scope:donated_title = {
							change_title_holder = {
								holder = scope:receiving_vassal
								change = scope:change
							}
						}
						remove_from_list = multiple_donated_titles
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			##Finally, process county title assignment.
			###First, attempt to pair de facto sub-vassals to their lieges.
			every_in_list = {
				list = german_vassals_list
				#Players first.
				limit = {
					is_ai = no
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#NPCs after that.
				alternative_limit = {
					is_ai = yes
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#Grab the appropriate vassal.
				save_temporary_scope_as = receiving_vassal
				#If $INVADER$ has a suitable spare county title, hand it over.
				if = {
					#Try to pair vassals with their lieges first.
					limit = {
						#Direct vassals shouldn't bother to try pairing.
						NOT = { liege = $INVADER$ }
						any_in_list = {
							list = spare_illyirian_titles_list
							launch_hungarian_migration_sub_vassal_liege_pairing_trigger = yes
						}
					}
					#Save the suitable title.
					random_in_list = {
						list = spare_illyirian_titles_list
						limit = {
							#Direct vassals shouldn't bother to try pairing.
							NOT = { scope:receiving_vassal.liege = $INVADER$ }
							#Run the stock trigger.
							launch_hungarian_migration_sub_vassal_liege_pairing_trigger = yes
							#Don't give away the new liege's primary title's capital county.
							NOT = {	this = holder.primary_title.title_capital_county }
						}
						save_temporary_scope_as = donated_title
					}
					#Hand it to the receiving vassal.
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:donated_title = {
						change_title_holder = {
							holder = scope:receiving_vassal
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			###Then, filter through any remaining direct vassals.
			every_in_list = {
				list = german_vassals_list
				#Players first.
				limit = {
					is_ai = no
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#NPCs after that.
				alternative_limit = {
					is_ai = yes
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#Grab the appropriate vassal.
				save_temporary_scope_as = receiving_vassal
				#If $INVADER$ has a suitable spare county title, hand it over.
				if = {
					#Otherwise, grab any spare valid title that $INVADER$ has lying around.
					limit = {
						any_in_list = {
							list = spare_illyirian_titles_list
							launch_hungarian_migration_direct_vassal_requirements_trigger = { INVADER = $INVADER$ }
						}
					}
					#Save the suitable title.
					random_in_list = {
						list = spare_illyirian_titles_list
						limit = {
							launch_hungarian_migration_direct_vassal_requirements_trigger = { INVADER = $INVADER$ }
						}
						save_temporary_scope_as = donated_title
					}
					#Hand it to the receiving vassal.
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:donated_title = {
						change_title_holder = {
							holder = scope:receiving_vassal
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			##Clean-up: any landless characters should move to $INVADER$'s court.
			every_in_list = {
				list = german_vassals_list
				limit = { is_ruler = no}
				save_temporary_scope_as = landless_german_vassal
				$INVADER$ = { add_courtier = scope:landless_german_vassal }
			}
			#Sum all remaining territory outside of Pannonia & give that territory to created local characters.
			##Start by trying to group duchies.
			every_sub_realm_title = {
				#First we try to make duchy power blocks.
				if = {
					#Grab duchies outside of Pannonia.
					limit = {
						NOT = {
							title_capital_county.kingdom = $TITLE_TARGET$
						}
						tier = tier_duchy
					}
					save_temporary_scope_as = seceding_duchy
					#Now grab the duchy & any sub-realm counties beneath it outside of Pannonia, and filter them to a list for processing.
					scope:seceding_duchy = {
						every_in_de_jure_hierarchy = {
							limit = {
								tier >= tier_county
								OR = {
									holder = $INVADER$
									holder = {
										any_liege_or_above = { this = $INVADER$ }
									}
								}
							}
							add_to_temporary_list = seceding_duchy_list
						}
					}
					#Create a local peasant warlord for the duchy & counties.
					create_character = {
						location = scope:seceding_duchy.title_capital_county.title_province
						gender = male
						dynasty = generate
						faith = $INVADER$.faith
						culture = $INVADER$.culture
						save_scope_as = local_warlord
					}
					#Assign the seceding titles to the new peasant warlord.
					create_title_and_vassal_change = {
						type = usurped
						save_scope_as = change
						add_claim_on_loss = no
					}
					every_in_list = {
						list = seceding_duchy_list
						limit = {
							NAND = {
								tier = tier_county
								kingdom = $TITLE_TARGET$
							}
						}
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
						remove_from_list = seceding_duchy_list
					}
					resolve_title_and_vassal_change = scope:change
					scope:local_warlord = {
						random_held_title = {
							limit = {
								tier = tier_county
							}
							save_scope_as = new_capital_warlord
						}
						set_realm_capital = scope:new_capital_warlord
					}
				}	
			}		
		}
		
	}
}

old_north_scripted_effect = {
	create_title_and_vassal_change = {
		type = created
		save_scope_as = title_change
		add_claim_on_loss = no
	}
	title:k_old_north = {
		change_title_holder = {
			holder = scope:founder
			change = scope:title_change
		}
	}
	resolve_title_and_vassal_change = scope:title_change

	title:d_northumberland = { set_de_jure_liege_title = title:k_old_north }
	title:d_lancaster = { set_de_jure_liege_title = title:k_old_north }
	title:d_lothian = { set_de_jure_liege_title = title:k_old_north }
	title:d_galloway = { set_de_jure_liege_title = title:k_old_north }
}
